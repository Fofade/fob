{"version":3,"file":"js/1836.e2633ca8.js","mappings":"gFACAA,EAAOC,QAAgC,oBAAfC,aAAiD,oBAAZC,U,mCCA7D,IAgCIC,EAAMC,EAAaC,EAhCnBC,EAAsB,EAAQ,OAC9BC,EAAc,EAAQ,OACtBC,EAAS,EAAQ,OACjBC,EAAa,EAAQ,OACrBC,EAAW,EAAQ,OACnBC,EAAS,EAAQ,OACjBC,EAAU,EAAQ,OAClBC,EAAc,EAAQ,OACtBC,EAA8B,EAAQ,OACtCC,EAAW,EAAQ,OACnBC,EAAiB,UACjBC,EAAgB,EAAQ,OACxBC,EAAiB,EAAQ,OACzBC,EAAiB,EAAQ,OACzBC,EAAkB,EAAQ,MAC1BC,EAAM,EAAQ,OAEdC,EAAYd,EAAOc,UACnBC,EAAqBD,GAAaA,EAAUE,UAC5CC,EAAoBjB,EAAOiB,kBAC3BC,EAA6BD,GAAqBA,EAAkBD,UACpEG,EAAaL,GAAaJ,EAAeI,GACzCM,EAAsBL,GAAsBL,EAAeK,GAC3DM,EAAkBC,OAAON,UACzBO,EAAYvB,EAAOuB,UAEnBC,EAAgBZ,EAAgB,eAChCa,EAAkBZ,EAAI,mBACtBa,EAA0Bb,EAAI,2BAE9Bc,EAA4B7B,KAAyBa,GAA4C,UAA1BP,EAAQJ,EAAO4B,OACtFC,GAA2B,EAG3BC,EAA6B,CAC/BhB,UAAW,EACXiB,WAAY,EACZd,kBAAmB,EACnBe,WAAY,EACZC,YAAa,EACbC,WAAY,EACZC,YAAa,EACbC,aAAc,EACdC,aAAc,GAGZC,EAA8B,CAChCC,cAAe,EACfC,eAAgB,GAWdC,EAAe,SAAUC,GAC3B,IAAKxC,EAASwC,GAAK,OAAO,EAC1B,IAAIC,EAAQvC,EAAQsC,GACpB,OAAOvC,EAAO2B,EAA4Ba,IACrCxC,EAAOmC,EAA6BK,IAyD3C,IAAKhD,KAAQmC,GAEXjC,GADAD,EAAcI,EAAOL,KACMC,EAAYoB,WACxBV,EAA4BT,EAAW6B,EAAyB9B,GAC1E+B,GAA4B,EAGnC,IAAKhC,KAAQ2C,GAEXzC,GADAD,EAAcI,EAAOL,KACMC,EAAYoB,YACxBV,EAA4BT,EAAW6B,EAAyB9B,GAIjF,KAAK+B,IAA8B1B,EAAWkB,IAAeA,IAAeyB,SAAS5B,aAEnFG,EAAa,WACX,MAAMI,EAAU,yBAEdI,GAA2B,IAAKhC,KAAQmC,EACtC9B,EAAOL,IAAOgB,EAAeX,EAAOL,GAAOwB,GAInD,KAAKQ,IAA8BP,GAAuBA,IAAwBC,KAChFD,EAAsBD,EAAWH,UAC7BW,GAA2B,IAAKhC,KAAQmC,EACtC9B,EAAOL,IAAOgB,EAAeX,EAAOL,GAAMqB,UAAWI,GAS7D,GAJIO,GAA6BjB,EAAeQ,KAAgCE,GAC9ET,EAAeO,EAA4BE,GAGzCrB,IAAgBI,EAAOiB,EAAqBI,GAK9C,IAAK7B,KAJLkC,GAA2B,EAC3BrB,EAAeY,EAAqBI,EAAe,CAAEqB,IAAK,WACxD,OAAO3C,EAAS4C,MAAQA,KAAKrB,QAAmBsB,KAErCjB,EAAgC9B,EAAOL,IAClDW,EAA4BN,EAAOL,GAAO8B,EAAiB9B,GAI/DJ,EAAOC,QAAU,CACfmC,0BAA2BA,EAC3BD,wBAAyBA,EACzBD,gBAAiBI,GAA4BJ,EAC7CuB,YAxGgB,SAAUN,GAC1B,GAAID,EAAaC,GAAK,OAAOA,EAC7B,MAAMnB,EAAU,gCAuGhB0B,uBApG2B,SAAUC,GACrC,GAAIjD,EAAWiD,MAAQvC,GAAkBF,EAAcU,EAAY+B,IAAK,OAAOA,EAC/E,MAAM3B,EAAUlB,EAAY6C,GAAK,sCAmGjCC,uBAhG2B,SAAUC,EAAKC,EAAUC,EAAQC,GAC5D,GAAKxD,EAAL,CACA,GAAIuD,EAAQ,IAAK,IAAIE,KAAS1B,EAA4B,CACxD,IAAI2B,EAAwBzD,EAAOwD,GACnC,GAAIC,GAAyBtD,EAAOsD,EAAsBzC,UAAWoC,GAAM,WAClEK,EAAsBzC,UAAUoC,GACvC,MAAOM,GAEP,IACED,EAAsBzC,UAAUoC,GAAOC,EACvC,MAAOM,MAGRvC,EAAoBgC,KAAQE,GAC/B/C,EAASa,EAAqBgC,EAAKE,EAASD,EACxC1B,GAA6BZ,EAAmBqC,IAAQC,EAAUE,KAkFxEK,6BA9EiC,SAAUR,EAAKC,EAAUC,GAC1D,IAAIE,EAAOC,EACX,GAAK1D,EAAL,CACA,GAAIY,EAAgB,CAClB,GAAI2C,EAAQ,IAAKE,KAAS1B,EAExB,IADA2B,EAAwBzD,EAAOwD,KACFrD,EAAOsD,EAAuBL,GAAM,WACxDK,EAAsBL,GAC7B,MAAOM,IAEX,GAAKvC,EAAWiC,KAAQE,EAKjB,OAHL,IACE,OAAO/C,EAASY,EAAYiC,EAAKE,EAASD,EAAW1B,GAA6BR,EAAWiC,IAAQC,GACrG,MAAOK,KAGb,IAAKF,KAAS1B,IACZ2B,EAAwBzD,EAAOwD,KACAC,EAAsBL,KAAQE,GAC3D/C,EAASkD,EAAuBL,EAAKC,KA2DzCQ,OA3HW,SAAgBnB,GAC3B,IAAKxC,EAASwC,GAAK,OAAO,EAC1B,IAAIC,EAAQvC,EAAQsC,GACpB,MAAiB,aAAVC,GACFxC,EAAO2B,EAA4Ba,IACnCxC,EAAOmC,EAA6BK,IAuHzCF,aAAcA,EACdtB,WAAYA,EACZC,oBAAqBA,I,sBClLvB,IAAI0C,EAAQ,EAAQ,OAEpBvE,EAAOC,SAAWsE,GAAM,WACtB,SAASC,KAGT,OAFAA,EAAE/C,UAAUgD,YAAc,KAEnB1C,OAAOZ,eAAe,IAAIqD,KAASA,EAAE/C,c,sBCN9C,IAAIhB,EAAS,EAAQ,OACjBG,EAAS,EAAQ,OACjBF,EAAa,EAAQ,OACrBgE,EAAW,EAAQ,OACnBC,EAAY,EAAQ,MACpBC,EAA2B,EAAQ,OAEnCC,EAAWF,EAAU,YACrB5C,EAAStB,EAAOsB,OAChBD,EAAkBC,EAAON,UAI7BzB,EAAOC,QAAU2E,EAA2B7C,EAAOZ,eAAiB,SAAU2D,GAC5E,IAAIC,EAASL,EAASI,GACtB,GAAIlE,EAAOmE,EAAQF,GAAW,OAAOE,EAAOF,GAC5C,IAAIJ,EAAcM,EAAON,YACzB,OAAI/D,EAAW+D,IAAgBM,aAAkBN,EACxCA,EAAYhD,UACZsD,aAAkBhD,EAASD,EAAkB,O,sBCnBxD,IAAIrB,EAAS,EAAQ,OACjBuE,EAAoB,EAAQ,OAE5BC,EAAaxE,EAAOwE,WAExBjF,EAAOC,QAAU,SAAUkD,EAAI+B,GAC7B,IAAIC,EAASH,EAAkB7B,GAC/B,GAAIgC,EAASD,EAAO,MAAMD,EAAW,gBACrC,OAAOE,I,sBCRT,IAAI1E,EAAS,EAAQ,OACjB2E,EAAsB,EAAQ,OAE9BH,EAAaxE,EAAOwE,WAExBjF,EAAOC,QAAU,SAAUkD,GACzB,IAAIkC,EAASD,EAAoBjC,GACjC,GAAIkC,EAAS,EAAG,MAAMJ,EAAW,qCACjC,OAAOI,I,kCCPT,IAAI5E,EAAS,EAAQ,OACjB6E,EAAO,EAAQ,OACfC,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ,OAC5BC,EAAW,EAAQ,OACnBC,EAAkB,EAAQ,OAC1BnB,EAAQ,EAAQ,OAEhBU,EAAaxE,EAAOwE,WACpB1D,EAAYd,EAAOc,UACnBC,EAAqBD,GAAaA,EAAUE,UAC5CkE,EAAOnE,GAAsBA,EAAmBoE,IAChDnC,EAAc8B,EAAoB9B,YAClCG,EAAyB2B,EAAoB3B,uBAE7CiC,GAAiDtB,GAAM,WAEzD,IAAIuB,EAAQ,IAAIpE,kBAAkB,GAElC,OADA4D,EAAKK,EAAMG,EAAO,CAAEC,OAAQ,EAAG,EAAG,GAAK,GACnB,IAAbD,EAAM,MAIXE,EAAgBH,GAAiDN,EAAoBnD,2BAA6BmC,GAAM,WAC1H,IAAIuB,EAAQ,IAAIvE,EAAU,GAG1B,OAFAuE,EAAMF,IAAI,GACVE,EAAMF,IAAI,IAAK,GACK,IAAbE,EAAM,IAAyB,IAAbA,EAAM,MAKjClC,EAAuB,OAAO,SAAaqC,GACzCxC,EAAYF,MACZ,IAAI4B,EAASM,EAASS,UAAUH,OAAS,EAAIG,UAAU,QAAK1C,EAAW,GACnE2C,EAAMT,EAAgBO,GAC1B,GAAIJ,EAA+C,OAAOP,EAAKK,EAAMpC,KAAM4C,EAAKhB,GAChF,IAAIY,EAASxC,KAAKwC,OACdK,EAAMZ,EAAkBW,GACxBE,EAAQ,EACZ,GAAID,EAAMjB,EAASY,EAAQ,MAAMd,EAAW,gBAC5C,KAAOoB,EAAQD,GAAK7C,KAAK4B,EAASkB,GAASF,EAAIE,QAC7CR,GAAiDG,I,kBC3CrD,IAAIM,EAAa,WACf/C,KAAKgD,MAAQ,IAAIC,MAAM,GACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIlD,KAAKgD,MAAMR,OAAQU,IACrClD,KAAKgD,MAAME,GAAK,IAIpBH,EAAWI,SAAW,EACtBJ,EAAWK,SAAW,EACtBL,EAAWM,cAAgB,EAC3BN,EAAWO,aAAe,EAC1BP,EAAWQ,UAAY,EACvBR,EAAWS,YAAc,EACzBT,EAAWU,YAAc,EACzBV,EAAWW,aAAe,EAE1BX,EAAW7E,UAAY,CACrByF,WAAY,SAAUC,GACpB5D,KAAKgD,MAAMY,GAAO,IAGpBC,SAAU,SAAUD,GAClB5D,KAAKgD,MAAMY,GAAO,KAItBnH,EAAOC,QAAUqG,G,sBC1BjB,IAAIe,EAAQC,EAAQ,OAEhBC,EAAM,SAAUC,GAClBjE,KAAKiE,IAAMA,EAGXjE,KAAKkE,IAAM,KACXlE,KAAKmE,QAAU,KACfnE,KAAKoE,MAAQ,KACbpE,KAAKqE,MAAQ,KACbrE,KAAKsE,OAAS,KACdtE,KAAKuE,OAAS,KACdvE,KAAKwE,WAAa,KAClBxE,KAAKyE,WAAa,KAClBzE,KAAK0E,QAAU,KACf1E,KAAK2E,UAAY,KACjB3E,KAAK4E,YAAc,KACnB5E,KAAK6E,gBAAkB,KACvB7E,KAAK8E,WAAa,KAClB9E,KAAK+E,OAAS,KACd/E,KAAKgF,OAAS,KACdhF,KAAKiF,UAAY,KACjBjF,KAAKkF,cAAgB,KACrBlF,KAAKmF,MAAQ,KACbnF,KAAKoF,UAAY,KACjBpF,KAAKqF,OAAS,KACdrF,KAAKsF,aAAe,KACpBtF,KAAKuF,MAAQ,KACbvF,KAAKwF,aAAe,KACpBxF,KAAKyF,QAAU,KAEfzF,KAAK0F,SAGP1B,EAAI9F,UAAY,CAEdyH,WAAY,EACZC,QAAS,EACTC,UAAW,EAEXH,MAAO,WAEL1F,KAAKkE,IAAM,IAAIjB,MAAM,OAErB,IAAK,IAAIC,EAAI,EAAGA,EAAI,KAAQA,IAC1BlD,KAAKkE,IAAIhB,GAAK,IAEhB,IAAK,IAAI4C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAQ,KAAJD,EACR9F,KAAKkE,IAAI6B,EAAI,GAAS,IACtB/F,KAAKkE,IAAI6B,EAAI,GAAS,IACtB/F,KAAKkE,IAAI6B,EAAI,IAAS,IACtB/F,KAAKkE,IAAI6B,EAAI,IAAS,IAExB,IAAK,IAAIC,EAAI,KAAQA,EAAIhG,KAAKkE,IAAI1B,OAAQwD,IACxChG,KAAKkE,IAAI8B,GAAK,EAIhBhG,KAAKmE,QAAU,EACfnE,KAAKoE,MAAQ,EACbpE,KAAKqE,MAAQ,EAEbrE,KAAKsE,OAAS,IAEdtE,KAAKuE,OAAS,MACdvE,KAAKwE,WAAa,MAElBxE,KAAKyE,WAAa,GAElBzE,KAAKiG,UAAU,IAGfjG,KAAK0E,QAAU,EACf1E,KAAK2E,UAAY,EACjB3E,KAAK4E,YAAc,EACnB5E,KAAK6E,gBAAkB,EACvB7E,KAAK8E,WAAa,EAClB9E,KAAK+E,OAAS,EACd/E,KAAKgF,OAAS,EAEdhF,KAAKiF,UAAY,EACjBjF,KAAKkF,cAAgB,EACrBlF,KAAKmF,MAAQ,EACbnF,KAAKoF,UAAY,EAEjBpF,KAAKqF,QAAS,IAAIa,GAASb,OAC3BrF,KAAKsF,aAAe,EAGpBtF,KAAKuF,OAAQ,EAGbvF,KAAKwF,cAAe,EACpBxF,KAAKyF,QAAU,MAIjBU,QAAS,WACP,IAAIC,EACAC,EAGJ,GAAIrG,KAAKwF,aAAc,CAarB,OAZAY,EACEpG,KAAK0E,SACa,IAAhB1E,KAAKgF,OAAe,EAAI,IAAM,EAC/BhF,KAAK4E,aAAe,EACpB5E,KAAK2E,WAAa,EAClB3E,KAAKmF,OAAS,EACdnF,KAAKiF,WAAa,EAClBjF,KAAK8E,YAAc,EACnB9E,KAAK+E,QAAU,EAElB/E,KAAKwE,WAAaxE,KAAKuE,OACvBvE,KAAK6E,gBAAkB7E,KAAK4E,YACpB5E,KAAKyF,SACX,KAAK,EAEH,GAAyB,IAArBzF,KAAK4E,YAEP,MAEF5E,KAAKsG,MAAMF,GAEX,MAEF,KAAK,EAEHpG,KAAKuG,uBAAuBH,GAC5B,MAEF,KAAK,EAEHpG,KAAKwG,mBAKTxG,KAAKuE,OAASvE,KAAKwE,WACnBxE,KAAK4E,YAAc5E,KAAK6E,gBACxB7E,KAAKmF,MAAQnF,KAAKoF,UAClBpF,KAAKwF,cAAe,EAGtB,IAAIiB,EAAQzG,KAAKqF,OAAOrF,KAAKiE,IAAIyC,KAAKC,KAAK3G,KAAKuE,OAAS,IACrDqC,EAAaH,GAAS,GACtBI,EAAW,EAGXC,EAAYL,GAAS,EAAK,IAG1BM,EAAS/G,KAAKuE,OAClBvE,KAAKuE,QAAWkC,GAAS,GAAM,IAE/B,IAAIO,EAAO,EACX,OAAQF,GACN,KAAK,EAGHE,EAAOhH,KAAK2G,KAAKI,EAAS,GAC1B,MAEF,KAAK,EAEHC,EAAOhH,KAAK2G,KAAKI,EAAS,GAExBC,GADEA,EAAO,IACDhH,KAAKuE,OAELvE,KAAKuE,OAAS,IAExB,MAEF,KAAK,EAEH,MAEF,KAAK,EAGHyC,EAAOhH,KAAKiH,UAAUF,EAAS,GAC/B,MAEF,KAAK,EAGHC,EAAOhH,KAAKmE,QACZ,MAEF,KAAK,EAEH6C,EAAOhH,KAAKuE,OACZ,MAEF,KAAK,EAIHyC,EAAQhH,KAAK2G,KAAKI,EAAS,GAAK/G,KAAKoE,MAAS,IAC9C,MAEF,KAAK,EAIH4C,EAAQhH,KAAK2G,KAAKI,EAAS,GAAK/G,KAAKqE,MAAS,IAC9C,MAEF,KAAK,GAIS,OADZ2C,EAAOhH,KAAKiH,UAAUF,EAAS,OACLC,EAAOhH,KAAKoE,MAAS,SAC7CyC,EAAW,GAEbG,GAAQhH,KAAKoE,MACb,MAEF,KAAK,GAIS,OADZ4C,EAAOhH,KAAKiH,UAAUF,EAAS,OACLC,EAAOhH,KAAKqE,MAAS,SAC7CwC,EAAW,GAEbG,GAAQhH,KAAKqE,MACb,MAEF,KAAK,IAMS,OADZ2C,EAAOhH,KAAK2G,KAAKI,EAAS,OACAC,EAAOhH,KAAKoE,MAAS,SAC7CyC,EAAW,GAEbG,GAAQhH,KAAKoE,MACb4C,GAAQ,IACRA,EAAOhH,KAAKiH,UAAUD,GACtB,MAEF,KAAK,IAOS,OADZA,EAAOhH,KAAKiH,UAAUjH,KAAK2G,KAAKI,EAAS,QACfC,EAAOhH,KAAKqE,MAAS,SAC7CwC,EAAW,GAEbG,GAAQhH,KAAKqE,MACb,MAEF,KAAK,GAKD2C,GAFFA,EAAOhH,KAAKiH,UAAUF,EAAS,IACpB,KAEP/G,KAAKkE,IAAI8C,IACRhH,KAAKkE,IAAY,MAAP8C,EAAmC,GAAR,IAAPA,GAAoB,MAAU,GAG7DhH,KAAKiE,IAAIyC,KAAKC,KAAKK,IAClBhH,KAAKiE,IAAIyC,KAAKC,KACL,MAAPK,EAAmC,GAAR,IAAPA,GAAoB,MAEzC,GAaV,OAPAA,GAAQ,MAOQ,IAARP,GACN,KAAK,EAMHL,EAAOpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,GAAQhH,KAAK0E,QAGG,IAAV,KAAlC1E,KAAKmE,QAAUnE,KAAK2G,KAAKK,MACQ,IAAV,KAAvBhH,KAAKmE,QAAUiC,IAEjBpG,KAAK8E,WAAa,EAElB9E,KAAK8E,WAAa,EAEpB9E,KAAK0E,QAAU0B,EAAO,IAAM,EAAI,EAChCpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EACdpG,KAAKmE,QAAiB,IAAPiC,EACfQ,GAAcC,EACd,MAEF,KAAK,EAMH7G,KAAKmE,QAAUnE,KAAKmE,QAAUnE,KAAK2G,KAAKK,GACxChH,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACF,KAAb2C,IAAiBF,GAAcC,GACnC,MAEF,KAAK,EAMc,IAAbC,GAGF9G,KAAK0E,QAAW1E,KAAKmE,SAAW,EAAK,EACrCnE,KAAKmE,QAAWnE,KAAKmE,SAAW,EAAK,IACrCnE,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,UAEnBiC,EAAOpG,KAAK2G,KAAKK,GACjBhH,KAAK0E,QAAW0B,GAAQ,EAAK,EAC7BA,EAAQA,GAAQ,EAAK,IACrBpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAASoB,EACdpG,KAAKkH,MAAMF,EAAMZ,IAEnB,MAEF,KAAK,EAMkB,IAAjBpG,KAAK0E,UACPkC,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,EAMkB,IAAjBhH,KAAK0E,UACPkC,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,EAMiB,IAAhBhH,KAAKgF,SACP4B,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,EAKHZ,EAAOpG,KAAK2G,KAAKK,GACjBhH,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAK8E,WAAcsB,GAAQ,EAAK,EAChCA,GAAQpG,KAAKmE,QACbnE,KAAKgF,OAASoB,EACd,MAEF,KAAK,EAMiB,IAAhBpG,KAAK+E,SACP6B,IACA5G,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,EAMiB,IAAhBhH,KAAKgF,SACP4B,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,EAMiB,IAAhBhH,KAAK+E,SACP6B,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,GAKHhH,KAAKuE,QAAU,EACfvE,KAAKmH,KAAMnH,KAAKuE,QAAU,EAAK,KAC/BvE,KAAKmH,KAAmB,IAAdnH,KAAKuE,QACfvE,KAAKmF,MAAQ,EAEbnF,KAAKmH,KACHnH,KAAK0E,SACe,IAAhB1E,KAAKgF,OAAe,EAAI,IAAM,EAC/BhF,KAAK4E,aAAe,EACpB5E,KAAK2E,WAAa,EAClB3E,KAAKmF,OAAS,EACdnF,KAAKiF,WAAa,EAClBjF,KAAK8E,YAAc,EACnB9E,KAAK+E,QAAU,GAGpB/E,KAAK4E,YAAc,EAEnB5E,KAAKuE,OAASvE,KAAKiH,UAAU,OAC7BjH,KAAKuE,SACL,MAEF,KAAK,GAMqB,IAApBvE,KAAK8E,aACP8B,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,GAMqB,IAApBhH,KAAK8E,aACP8B,IAAwB,MAATG,KAA6B,MAAPC,GAAiB,EAAI,EAC1DhH,KAAKuE,OAASyC,GAEhB,MAEF,KAAK,GAMHhH,KAAK0E,QAAU,EACf,MAEF,KAAK,GAMH1E,KAAK2E,UAAY,EACjB,MAEF,KAAK,GAMH3E,KAAK4E,YAAc,EACnB,MAEF,KAAK,GAMH5E,KAAK8E,WAAa,EAClB,MAEF,KAAK,GAMHsB,EAAOpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,GAChChH,KAAK0E,QAAU0B,GAAQ,EAAI,EAAI,EAC/BpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EACdQ,GAAcC,EACd,MAEF,KAAK,GAMHT,EAAOpG,KAAKoE,MAAQpE,KAAK2G,KAAKK,GAC9BhH,KAAK0E,QAAU0B,GAAQ,EAAI,EAAI,EAC/BpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EACd,MAEF,KAAK,GAMHA,EAAOpG,KAAKqE,MAAQrE,KAAK2G,KAAKK,GAC9BhH,KAAK0E,QAAU0B,GAAQ,EAAI,EAAI,EAC/BpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EACd,MAEF,KAAK,GAMHA,EAAQpG,KAAK2G,KAAKK,GAAQ,EAAK,IAC/BhH,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAASoB,EACdpG,KAAKkH,MAAMF,EAAMZ,GACjB,MAEF,KAAK,GAMHpG,KAAKoE,MAASpE,KAAKoE,MAAQ,EAAK,IAChCpE,KAAK+E,OAAU/E,KAAKoE,OAAS,EAAK,EAClCpE,KAAKgF,OAAShF,KAAKoE,MACnB,MAEF,KAAK,GAMHpE,KAAKqE,MAASrE,KAAKqE,MAAQ,EAAK,IAChCrE,KAAK+E,OAAU/E,KAAKqE,OAAS,EAAK,EAClCrE,KAAKgF,OAAShF,KAAKqE,MACnB,MAEF,KAAK,GAMHrE,KAAKmE,QAA6C,KAAlCnE,KAAK2G,KAAKK,GAAQhH,KAAKmE,SACvCnE,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACnByC,GAAcC,EACd,MAEF,KAAK,GAMHT,EAAQpG,KAAK2G,KAAKK,GAAQ,EAAK,IAC/BhH,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAASoB,EACdpG,KAAKkH,MAAMF,EAAa,IAAPZ,GACjB,MAEF,KAAK,GAMHpG,KAAKoE,MAASpE,KAAKoE,MAAQ,EAAK,IAChCpE,KAAK+E,OAAU/E,KAAKoE,OAAS,EAAK,EAClCpE,KAAKgF,OAAShF,KAAKoE,MACnB,MAEF,KAAK,GAMHpE,KAAKqE,QACLrE,KAAKqE,OAAS,IACdrE,KAAK+E,OAAU/E,KAAKqE,OAAS,EAAK,EAClCrE,KAAKgF,OAAShF,KAAKqE,MACnB,MAEF,KAAK,GAMHrE,KAAKuE,OAASyC,EAAO,EACrB,MAEF,KAAK,GAOHhH,KAAKmH,KAAMnH,KAAKuE,QAAU,EAAK,KAC/BvE,KAAKmH,KAAmB,IAAdnH,KAAKuE,QACfvE,KAAKuE,OAASyC,EAAO,EACrB,MAEF,KAAK,GAMHhH,KAAKmE,QAAUnE,KAAK2G,KAAKK,GACzBhH,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACnByC,GAAcC,EACd,MAEF,KAAK,GAMH7G,KAAKoE,MAAQpE,KAAK2G,KAAKK,GACvBhH,KAAK+E,OAAU/E,KAAKoE,OAAS,EAAK,EAClCpE,KAAKgF,OAAShF,KAAKoE,MACnBwC,GAAcC,EACd,MAEF,KAAK,GAMH7G,KAAKqE,MAAQrE,KAAK2G,KAAKK,GACvBhH,KAAK+E,OAAU/E,KAAKqE,OAAS,EAAK,EAClCrE,KAAKgF,OAAShF,KAAKqE,MACnBuC,GAAcC,EACd,MAEF,KAAK,GAMc,IAAbC,GAGFV,EAAsB,IAAfpG,KAAKmE,QACZnE,KAAK0E,QAAiB,EAAP0B,EACfA,IAAS,EACTpG,KAAKmE,QAAUiC,IAEfA,EAAyB,IAAlBpG,KAAK2G,KAAKK,GACjBhH,KAAK0E,QAAiB,EAAP0B,EACfA,IAAS,EACTpG,KAAKkH,MAAMF,EAAMZ,IAEnBpG,KAAK+E,OAAS,EACd/E,KAAKgF,OAASoB,EACd,MAEF,KAAK,GAkgBL,KAAK,GAMH,MA/fF,KAAK,GAMHA,EAA0C,KAAlCpG,KAAK2G,KAAKK,GAAQhH,KAAKmE,SAC/BnE,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAASoB,EACdpG,KAAKmE,QAAUiC,EACE,KAAbU,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMH7G,KAAKmH,KAAKnH,KAAKmE,SACf,MAEF,KAAK,GAMHnE,KAAKmF,MAAQ,EACbnF,KAAKmH,KACHnH,KAAK0E,SACe,IAAhB1E,KAAKgF,OAAe,EAAI,IAAM,EAC/BhF,KAAK4E,aAAe,EACpB5E,KAAK2E,WAAa,EAClB3E,KAAKmF,OAAS,EACdnF,KAAKiF,WAAa,EAClBjF,KAAK8E,YAAc,EACnB9E,KAAK+E,QAAU,GAEpB,MAEF,KAAK,GAMH/E,KAAKmE,QAAUnE,KAAKoH,OACpBpH,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACnB,MAEF,KAAK,GAMHiC,EAAOpG,KAAKoH,OACZpH,KAAK0E,QAAiB,EAAP0B,EACfpG,KAAKgF,OAA+B,IAApBoB,GAAQ,EAAK,GAAW,EAAI,EAC5CpG,KAAK4E,YAAewB,GAAQ,EAAK,EACjCpG,KAAK2E,UAAayB,GAAQ,EAAK,EAC/BpG,KAAKmF,MAASiB,GAAQ,EAAK,EAC3BpG,KAAKiF,UAAamB,GAAQ,EAAK,EAC/BpG,KAAK8E,WAAcsB,GAAQ,EAAK,EAChCpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAE5BpG,KAAKiF,UAAY,EACjB,MAEF,KAAK,GAMc,IAAb6B,GAGFV,EAAOpG,KAAKmE,QACZkC,EAAMrG,KAAK0E,QACX1E,KAAK0E,QAAW0B,GAAQ,EAAK,EAC7BA,GAASA,GAAQ,EAAK,KAAQC,EAC9BrG,KAAKmE,QAAUiC,IAEfA,EAAOpG,KAAK2G,KAAKK,GACjBX,EAAMrG,KAAK0E,QACX1E,KAAK0E,QAAW0B,GAAQ,EAAK,EAC7BA,GAASA,GAAQ,EAAK,KAAQC,EAC9BrG,KAAKkH,MAAMF,EAAMZ,IAEnBpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAASoB,EACd,MAEF,KAAK,GAMc,IAAbU,GAGFT,EAAMrG,KAAK0E,SAAW,EACtB1E,KAAK0E,QAAyB,EAAf1E,KAAKmE,QACpBiC,GAAQpG,KAAKmE,SAAW,GAAKkC,EAC7BrG,KAAKmE,QAAUiC,IAEfA,EAAOpG,KAAK2G,KAAKK,GACjBX,EAAMrG,KAAK0E,SAAW,EACtB1E,KAAK0E,QAAiB,EAAP0B,EACfA,GAAQA,GAAQ,GAAKC,EACrBrG,KAAKkH,MAAMF,EAAMZ,IAEnBpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAASoB,EACd,MAEF,KAAK,GAmBH,GAZAA,EAAOpG,KAAKoH,OACZpH,KAAK0E,QAAiB,EAAP0B,EACfpG,KAAKgF,OAA+B,IAApBoB,GAAQ,EAAK,GAAW,EAAI,EAC5CpG,KAAK4E,YAAewB,GAAQ,EAAK,EACjCpG,KAAK2E,UAAayB,GAAQ,EAAK,EAC/BpG,KAAKmF,MAASiB,GAAQ,EAAK,EAC3BpG,KAAKiF,UAAamB,GAAQ,EAAK,EAC/BpG,KAAK8E,WAAcsB,GAAQ,EAAK,EAChCpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAE5BpG,KAAKuE,OAASvE,KAAKoH,OACnBpH,KAAKuE,QAAUvE,KAAKoH,QAAU,EACV,QAAhBpH,KAAKuE,OACP,OAEFvE,KAAKuE,SACLvE,KAAKiF,UAAY,EACjB,MAEF,KAAK,GAUH,GAHAjF,KAAKuE,OAASvE,KAAKoH,OACnBpH,KAAKuE,QAAUvE,KAAKoH,QAAU,EAEV,QAAhBpH,KAAKuE,OACP,OAEF,MAEF,KAAK,GAKH6B,EAAOpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,IAAS,EAAIhH,KAAK0E,SAClD1E,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EAEuB,IAAV,KAAvBpG,KAAKmE,QAAUiC,KAC6B,IAAV,KAAlCpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,KAE3BhH,KAAK8E,WAAa,EAElB9E,KAAK8E,WAAa,EAEpB9E,KAAK0E,QAAU0B,EAAO,EAAI,EAAI,EAC9BpG,KAAKmE,QAAiB,IAAPiC,EACE,KAAbU,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMH7G,KAAK0E,QAAU,EACf,MAEF,KAAK,GAMH1E,KAAK2E,UAAY,EACjB,MAEF,KAAK,GAMH3E,KAAK4E,YAAc,EACnB,MAEF,KAAK,GAMH5E,KAAKkH,MAAMF,EAAMhH,KAAKmE,SACtB,MAEF,KAAK,GAMHnE,KAAKkH,MAAMF,EAAMhH,KAAKoE,OACtB,MAEF,KAAK,GAMHpE,KAAKkH,MAAMF,EAAMhH,KAAKqE,OACtB,MAEF,KAAK,GAMHrE,KAAKoE,MAAQpE,KAAKmE,QAClBnE,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACnB,MAEF,KAAK,GAMHnE,KAAKqE,MAAQrE,KAAKmE,QAClBnE,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACnB,MAEF,KAAK,GAMHnE,KAAKoE,MAAQpE,KAAKsE,OAAS,IAC3BtE,KAAK+E,OAAU/E,KAAKsE,QAAU,EAAK,EACnCtE,KAAKgF,OAAShF,KAAKoE,MACnB,MAEF,KAAK,GAMHpE,KAAKmE,QAAUnE,KAAKoE,MACpBpE,KAAK+E,OAAU/E,KAAKoE,OAAS,EAAK,EAClCpE,KAAKgF,OAAShF,KAAKoE,MACnB,MAEF,KAAK,GAMHpE,KAAKsE,OAAStE,KAAKoE,MAAQ,IAC3BpE,KAAKqH,YACL,MAEF,KAAK,GAMHrH,KAAKmE,QAAUnE,KAAKqE,MACpBrE,KAAK+E,OAAU/E,KAAKqE,OAAS,EAAK,EAClCrE,KAAKgF,OAAShF,KAAKqE,MACnB,MAEF,KAAK,GAMH+B,EAAOpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,GAChChH,KAAK0E,QAAiB,EAAP0B,EACfpG,KAAKmE,QAAUnE,KAAKgF,OAASoB,GAAQ,EACrCpG,KAAK+E,OAAS,EACd,MAEF,KAAK,GAMH/E,KAAKmE,QAAUnE,KAAKgF,OAAShF,KAAKmE,QAAUnE,KAAK2G,KAAKK,GACtDhH,KAAK0E,QAAU1E,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACnD,MAEF,KAAK,GAMHiC,EAAOpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,GAChChH,KAAKmE,QAAUnE,KAAKgF,QAAUoB,GAAQ,IAAMpG,KAAK0E,SAAW,GAC5D1E,KAAK+E,OAAS/E,KAAK0E,QACnB1E,KAAK0E,QAAW0B,GAAQ,EAAK,EAC7BpG,KAAK8E,WAA2C,GAA5BsB,GAAQ,EAAMA,GAAQ,GAC1C,MAEF,KAAK,GAMHA,GAAQpG,KAAKoE,MAAQpE,KAAKmE,SAAWnE,KAAK2G,KAAKK,GAC/ChH,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EAEqB,IAAV,KAArBpG,KAAKoE,MAAQgC,KAC6B,IAAV,KAAhCpG,KAAKoE,MAAQpE,KAAK2G,KAAKK,KAEzBhH,KAAK8E,WAAa,EAElB9E,KAAK8E,WAAa,EAEpB9E,KAAK0E,QAAU0B,EAAO,EAAI,EAAI,EAC9BpG,KAAKoE,MAAe,IAAPgC,EACb,MAEF,KAAK,GAMHpG,KAAKmE,QAAUnE,KAAKoE,MAAQpE,KAAKgF,OAAShF,KAAK2G,KAAKK,GACpDhH,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCyC,GAAcC,EACd,MAEF,KAAK,GAMH7G,KAAKkH,MAAMF,EAAMhH,KAAKmE,QAAUnE,KAAKoE,OACrC,MAEF,KAAK,GAMHgC,EAAQpG,KAAK2G,KAAKK,GAAQ,EAAK,IAC/BhH,KAAKkH,MAAMF,EAAMZ,GAGjBA,EAAOpG,KAAKmE,QAAUiC,EACtBpG,KAAK0E,QAAU0B,GAAQ,EAAI,EAAI,EAC/BpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EACG,KAAbU,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMHT,EAAQpG,KAAK2G,KAAKK,GAAQ,EAAK,IAC/BhH,KAAKkH,MAAMF,EAAMZ,GAGjBA,EAAOpG,KAAKmE,QAAUiC,GAAQ,EAAIpG,KAAK0E,SACvC1E,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EAEuB,IAAV,KAAvBpG,KAAKmE,QAAUiC,KAC6B,IAAV,KAAlCpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,KAE3BhH,KAAK8E,WAAa,EAElB9E,KAAK8E,WAAa,EAEpB9E,KAAK0E,QAAU0B,EAAO,EAAI,EAAI,EAC9BpG,KAAKmE,QAAiB,IAAPiC,EACE,KAAbU,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMHT,EAAOpG,KAAK2G,KAAKK,GACjBX,EAAMrG,KAAK0E,QACX1E,KAAK0E,QAAW0B,GAAQ,EAAK,EAC7BA,GAASA,GAAQ,EAAK,KAAQC,EAC9BrG,KAAKkH,MAAMF,EAAMZ,GAGjBpG,KAAKmE,QAAUnE,KAAKmE,QAAUiC,EAC9BpG,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACF,KAAb2C,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMHT,EAAOpG,KAAK2G,KAAKK,GACjBX,EAAMrG,KAAK0E,SAAW,EACtB1E,KAAK0E,QAAiB,EAAP0B,EACfA,GAAQA,GAAQ,GAAKC,EACrBrG,KAAKkH,MAAMF,EAAMZ,GAGjBA,EAAOpG,KAAKmE,QAAUnE,KAAK2G,KAAKK,GAAQhH,KAAK0E,QAGG,IAAV,KAAlC1E,KAAKmE,QAAUnE,KAAK2G,KAAKK,MACQ,IAAV,KAAvBhH,KAAKmE,QAAUiC,IAEjBpG,KAAK8E,WAAa,EAElB9E,KAAK8E,WAAa,EAEpB9E,KAAK0E,QAAU0B,EAAO,IAAM,EAAI,EAChCpG,KAAK+E,OAAUqB,GAAQ,EAAK,EAC5BpG,KAAKgF,OAAgB,IAAPoB,EACdpG,KAAKmE,QAAiB,IAAPiC,EACE,KAAbU,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMHT,EAAOpG,KAAK2G,KAAKK,GACjBhH,KAAK0E,QAAW0B,GAAQ,EAAK,EAC7BA,EAAQA,GAAQ,EAAK,IACrBpG,KAAKkH,MAAMF,EAAMZ,GAGjBpG,KAAKmE,QAAUnE,KAAKmE,QAAUiC,EAC9BpG,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACF,KAAb2C,IAAiBF,GAAcC,GACnC,MAEF,KAAK,GAMHT,EAAyB,IAAlBpG,KAAK2G,KAAKK,GACjBhH,KAAK0E,QAAiB,EAAP0B,EACfA,IAAS,EACTpG,KAAKkH,MAAMF,EAAMZ,GAGjBpG,KAAKmE,QAAUnE,KAAKmE,QAAUiC,EAC9BpG,KAAK+E,OAAU/E,KAAKmE,SAAW,EAAK,EACpCnE,KAAKgF,OAAShF,KAAKmE,QACF,KAAb2C,IAAiBF,GAAcC,GACnC,MAUF,KAAK,GAOH7G,KAAK2G,KAAKK,GACO,KAAbF,IAAiBF,GAAcC,GACnC,MAGF,QAKE7G,KAAKiE,IAAIqD,OACTtH,KAAKiE,IAAIsD,aACP,4CAA8CR,EAAOS,SAAS,IAKpE,OAAOZ,GAGTD,KAAM,SAAUK,GACd,OAAIA,EAAO,KACFhH,KAAKkE,IAAW,KAAP8C,GAEThH,KAAKiE,IAAIyC,KAAKC,KAAKK,IAI9BC,UAAW,SAAUD,GACnB,OAAIA,EAAO,KACFhH,KAAKkE,IAAW,KAAP8C,GAAiBhH,KAAKkE,IAAK8C,EAAO,EAAK,OAAU,EAE1DhH,KAAKiE,IAAIyC,KAAKC,KAAKK,GAAShH,KAAKiE,IAAIyC,KAAKC,KAAKK,EAAO,IAAM,GAIvEE,MAAO,SAAUF,EAAMS,GACjBT,EAAO,KACThH,KAAKkE,IAAW,KAAP8C,GAAgBS,EAEzBzH,KAAKiE,IAAIyC,KAAKQ,MAAMF,EAAMS,IAI9BC,WAAY,SAAUC,GAChB3H,KAAKwF,cACHmC,IAAS3H,KAAK2F,aAKpB3F,KAAKwF,cAAe,EACpBxF,KAAKyF,QAAUkC,IAGjBR,KAAM,SAAUS,GACd5H,KAAKiE,IAAIyC,KAAKQ,MAAMlH,KAAKsE,OAAQsD,GACjC5H,KAAKsE,SACLtE,KAAKsE,OAAS,IAAwB,IAAdtE,KAAKsE,QAG/B+C,UAAW,WACTrH,KAAKsE,OAAS,IAAwB,IAAdtE,KAAKsE,QAG/B8C,KAAM,WAGJ,OAFApH,KAAKsE,SACLtE,KAAKsE,OAAS,IAAwB,IAAdtE,KAAKsE,OACtBtE,KAAKiE,IAAIyC,KAAKC,KAAK3G,KAAKsE,SAGjCuD,YAAa,SAAUC,EAAOC,GAC5B,OAAgB,MAARD,KAA6B,MAARC,IAG/BC,WAAY,SAAUC,GACpBjI,KAAKsF,cAAgB2C,GAGvB1B,uBAAwB,SAAU2B,GACW,IAAT,IAA7BlI,KAAKiE,IAAIyC,KAAKC,KAAK,SAGtB3G,KAAKwE,aACLxE,KAAKmH,KAAMnH,KAAKwE,YAAc,EAAK,KACnCxE,KAAKmH,KAAuB,IAAlBnH,KAAKwE,YAEfxE,KAAKmH,KAAKe,GAEVlI,KAAKwE,WACHxE,KAAKiE,IAAIyC,KAAKC,KAAK,OAAW3G,KAAKiE,IAAIyC,KAAKC,KAAK,QAAW,EAC9D3G,KAAKwE,eAITgC,iBAAkB,WAChBxG,KAAKwE,WACHxE,KAAKiE,IAAIyC,KAAKC,KAAK,OAAW3G,KAAKiE,IAAIyC,KAAKC,KAAK,QAAW,EAC9D3G,KAAKwE,cAGP8B,MAAO,SAAU4B,GACflI,KAAKwE,aACLxE,KAAKmH,KAAMnH,KAAKwE,YAAc,EAAK,KACnCxE,KAAKmH,KAAuB,IAAlBnH,KAAKwE,YACfxE,KAAKmH,KAAKe,GACVlI,KAAK6E,gBAAkB,EACvB7E,KAAKoF,UAAY,EAEjBpF,KAAKwE,WACHxE,KAAKiE,IAAIyC,KAAKC,KAAK,OAAW3G,KAAKiE,IAAIyC,KAAKC,KAAK,QAAW,EAC9D3G,KAAKwE,cAGP2D,UAAW,WACT,OACEnI,KAAK0E,QACJ1E,KAAKgF,QAAU,EACfhF,KAAK4E,aAAe,EACpB5E,KAAK2E,WAAa,EAClB3E,KAAKmF,OAAS,EACdnF,KAAKiF,WAAa,EAClBjF,KAAK8E,YAAc,EACnB9E,KAAK+E,QAAU,GAIpBkB,UAAW,SAAUmC,GACnBpI,KAAK0E,QAAe,EAAL0D,EACfpI,KAAKgF,OAAUoD,GAAM,EAAK,EAC1BpI,KAAK4E,YAAewD,GAAM,EAAK,EAC/BpI,KAAK2E,UAAayD,GAAM,EAAK,EAC7BpI,KAAKmF,MAASiD,GAAM,EAAK,EACzBpI,KAAKiF,UAAamD,GAAM,EAAK,EAC7BpI,KAAK8E,WAAcsD,GAAM,EAAK,EAC9BpI,KAAK+E,OAAUqD,GAAM,EAAK,GAG5BC,gBAAiB,CACf,MACA,eACA,eACA,UAEA,UACA,QACA,QACA,SACA,SACA,aACA,aAEA,UACA,YACA,cACA,kBACA,aACA,SACA,SACA,YACA,gBACA,QACA,aAGFC,OAAQ,WACN,OAAOxE,EAAMwE,OAAOtI,OAGtBuI,SAAU,SAAUC,GAClB1E,EAAMyE,SAASvI,KAAMwI,KAKzB,IAAItC,EAAS,WACXlG,KAAKqF,OAAS,IAAIpC,MAAM,KAGxB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAKlD,KAAKqF,OAAOnC,GAAK,IAK/ClD,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAK0I,QAAS,GAAM1I,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAK0I,QAAS,IAAM1I,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKmJ,QAAS,GAAMnJ,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAKoJ,QAAS,GAAMpJ,KAAKqJ,SAAU,EAAG,GACjDrJ,KAAKyI,MAAMzI,KAAKoJ,QAAS,EAAMpJ,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKoJ,QAAS,GAAMpJ,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKoJ,QAAS,GAAMpJ,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKoJ,QAAS,GAAMpJ,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKsJ,QAAS,IAAMtJ,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAKwJ,QAAS,IAAMxJ,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAKyJ,QAAS,IAAMzJ,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAK0J,QAAS,GAAM1J,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK0J,QAAS,GAAM1J,KAAK8I,SAAU,EAAG,GAGjD9I,KAAKyI,MAAMzI,KAAK2J,QAAS,GAAM3J,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAK4J,QAAS,IAAM5J,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAK6J,QAAS,GAAM7J,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAK8J,QAAS,EAAM9J,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKgK,QAAS,GAAMhK,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAKiK,QAAS,IAAMjK,KAAKuJ,SAAU,EAAG,GAGjDvJ,KAAKyI,MAAMzI,KAAKkK,QAAS,GAAMlK,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKmK,QAAS,IAAMnK,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKoK,QAAS,GAAMpK,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKqK,QAAS,IAAMrK,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKsK,QAAS,IAAMtK,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAKuK,QAAS,IAAMvK,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKuK,QAAS,IAAMvK,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKuK,QAAS,IAAMvK,KAAK8I,SAAU,EAAG,GAGjD9I,KAAKyI,MAAMzI,KAAKwK,QAAS,IAAMxK,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKwK,QAAS,IAAMxK,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKwK,QAAS,IAAMxK,KAAK8I,SAAU,EAAG,GAGjD9I,KAAKyI,MAAMzI,KAAKyK,QAAS,IAAMzK,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKyK,QAAS,IAAMzK,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKyK,QAAS,IAAMzK,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKyK,QAAS,IAAMzK,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAK0K,QAAS,IAAM1K,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK2K,QAAS,IAAM3K,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAK4K,QAAS,GAAM5K,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAK6K,QAAS,IAAM7K,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK6K,QAAS,IAAM7K,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK6K,QAAS,IAAM7K,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK6K,QAAS,IAAM7K,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAK8K,QAAS,IAAM9K,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK+K,QAAS,IAAM/K,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKgL,QAAS,GAAMhL,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKgL,QAAS,IAAMhL,KAAKiL,YAAa,EAAG,GAGpDjL,KAAKyI,MAAMzI,KAAKkL,QAAS,GAAMlL,KAAK8I,SAAU,EAAG,GAGjD9I,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKmL,QAAS,IAAMnL,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAKoL,QAAS,IAAMpL,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKoL,QAAS,IAAMpL,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKoL,QAAS,IAAMpL,KAAKqL,SAAU,EAAG,GACjDrL,KAAKyI,MAAMzI,KAAKoL,QAAS,IAAMpL,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKoL,QAAS,IAAMpL,KAAKgJ,UAAW,EAAG,GAGlDhJ,KAAKyI,MAAMzI,KAAKsL,QAAS,IAAMtL,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKsL,QAAS,IAAMtL,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKsL,QAAS,IAAMtL,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKsL,QAAS,IAAMtL,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKsL,QAAS,IAAMtL,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKuL,QAAS,GAAMvL,KAAKqJ,SAAU,EAAG,GACjDrJ,KAAKyI,MAAMzI,KAAKuL,QAAS,GAAMvL,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKuL,QAAS,GAAMvL,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKuL,QAAS,GAAMvL,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKuL,QAAS,GAAMvL,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKwL,QAAS,GAAMxL,KAAK+J,SAAU,EAAG,GACjD/J,KAAKyI,MAAMzI,KAAKwL,QAAS,GAAMxL,KAAK+J,SAAU,EAAG,GACjD/J,KAAKyI,MAAMzI,KAAKwL,QAAS,GAAMxL,KAAK+J,SAAU,EAAG,GACjD/J,KAAKyI,MAAMzI,KAAKwL,QAAS,IAAMxL,KAAK+J,SAAU,EAAG,GACjD/J,KAAKyI,MAAMzI,KAAKwL,QAAS,IAAMxL,KAAK+J,SAAU,EAAG,GACjD/J,KAAKyI,MAAMzI,KAAKwL,QAAS,IAAMxL,KAAK+J,SAAU,EAAG,GACjD/J,KAAKyI,MAAMzI,KAAKwL,QAAS,IAAMxL,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKyL,QAAS,EAAMzL,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKyL,QAAS,EAAMzL,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKyL,QAAS,GAAMzL,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKyL,QAAS,GAAMzL,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKyL,QAAS,GAAMzL,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAKyL,QAAS,GAAMzL,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKyL,QAAS,EAAMzL,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKyL,QAAS,GAAMzL,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAK0L,QAAS,GAAM1L,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK2L,QAAS,EAAM3L,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK4L,QAAS,IAAM5L,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK6L,QAAS,GAAM7L,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK8L,QAAS,GAAM9L,KAAKqJ,SAAU,EAAG,GACjDrJ,KAAKyI,MAAMzI,KAAK8L,QAAS,GAAM9L,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK8L,QAAS,GAAM9L,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK8L,QAAS,GAAM9L,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK8L,QAAS,GAAM9L,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAK+L,QAAS,IAAM/L,KAAKqJ,SAAU,EAAG,GACjDrJ,KAAKyI,MAAMzI,KAAK+L,QAAS,IAAM/L,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK+L,QAAS,IAAM/L,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK+L,QAAS,IAAM/L,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK+L,QAAS,IAAM/L,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKgM,QAAS,GAAMhM,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKiM,QAAS,GAAMjM,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKkM,QAAS,IAAMlM,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAKmM,QAAS,GAAMnM,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKoM,QAAS,IAAMpM,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKqM,QAAS,IAAMrM,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKsM,QAAS,IAAMtM,KAAKkJ,gBAAiB,EAAG,GAGxDlJ,KAAKyI,MAAMzI,KAAKuM,QAAS,IAAMvM,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKuM,QAAS,IAAMvM,KAAKqL,SAAU,EAAG,GACjDrL,KAAKyI,MAAMzI,KAAKuM,QAAS,IAAMvM,KAAK8I,SAAU,EAAG,GAGjD9I,KAAKyI,MAAMzI,KAAKwM,QAAS,IAAMxM,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKwM,QAAS,IAAMxM,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKwM,QAAS,IAAMxM,KAAK8I,SAAU,EAAG,GAGjD9I,KAAKyI,MAAMzI,KAAKyM,QAAS,IAAMzM,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK0M,QAAS,IAAM1M,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK2M,QAAS,IAAM3M,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK4M,QAAS,IAAM5M,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK6M,QAAS,IAAM7M,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK8M,QAAS,IAAM9M,KAAK+J,SAAU,EAAG,GAGjD/J,KAAKyI,MAAMzI,KAAK+M,QAAS,GAAM/M,KAAK2I,SAAU,EAAG,GAGjD3I,KAAKyI,MAAMzI,KAAKgN,QAAS,GAAMhN,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAKgN,QAAS,GAAMhN,KAAK2I,SAAU,EAAG,GAGjD3I,KAAKyI,MAAMzI,KAAKiN,QAAS,IAAMjN,KAAK2I,SAAU,EAAG,GAGjD3I,KAAKyI,MAAMzI,KAAKkN,QAAS,IAAMlN,KAAK2I,SAAU,EAAG,GAGjD3I,KAAKyI,MAAMzI,KAAKmN,QAAS,IAAMnN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKmN,QAAS,IAAMnN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKmN,QAAS,IAAMnN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKmN,QAAS,IAAMnN,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAKmN,QAAS,IAAMnN,KAAKqL,SAAU,EAAG,GACjDrL,KAAKyI,MAAMzI,KAAKmN,QAAS,IAAMnN,KAAKgJ,UAAW,EAAG,GAGlDhJ,KAAKyI,MAAMzI,KAAKoN,QAAS,IAAMpN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKoN,QAAS,IAAMpN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKoN,QAAS,IAAMpN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKoN,QAAS,IAAMpN,KAAKqL,SAAU,EAAG,GAGjDrL,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKqN,QAAS,IAAMrN,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKsN,QAAS,IAAMtN,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKuN,QAAS,GAAMvN,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKwN,QAAS,GAAMxN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKwN,QAAS,IAAMxN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKwN,QAAS,IAAMxN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKwN,QAAS,IAAMxN,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAKwN,QAAS,IAAMxN,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKwN,QAAS,IAAMxN,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKwN,QAAS,IAAMxN,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAKyN,QAAS,EAAMzN,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAKyN,QAAS,EAAMzN,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAKyN,QAAS,GAAMzN,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAKyN,QAAS,GAAMzN,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAKyN,QAAS,GAAMzN,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAKyN,QAAS,GAAMzN,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAKyN,QAAS,GAAMzN,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAKiJ,eAAgB,EAAG,GACvDjJ,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAKkJ,gBAAiB,EAAG,GACxDlJ,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAKgJ,UAAW,EAAG,GAClDhJ,KAAKyI,MAAMzI,KAAK0N,QAAS,GAAM1N,KAAK+I,UAAW,EAAG,GAGlD/I,KAAKyI,MAAMzI,KAAK2N,QAAS,IAAM3N,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAK2N,QAAS,IAAM3N,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAK2N,QAAS,IAAM3N,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAK2N,QAAS,IAAM3N,KAAK2I,SAAU,EAAG,GACjD3I,KAAKyI,MAAMzI,KAAK2N,QAAS,IAAM3N,KAAK2I,SAAU,EAAG,GAGjD3I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK8I,SAAU,EAAG,GACjD9I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK+I,UAAW,EAAG,GAClD/I,KAAKyI,MAAMzI,KAAK4N,QAAS,EAAM5N,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK4I,QAAS,EAAG,GAChD5I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK4N,QAAS,GAAM5N,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK6I,SAAU,EAAG,GACjD7I,KAAKyI,MAAMzI,KAAK4N,QAAS,IAAM5N,KAAK6I,SAAU,EAAG,GAGjD7I,KAAK6N,SAAW,IAAI5K,MACT,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAGzCjD,KAAK8N,SAAW,IAAI7K,MAAM,IAG1BjD,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,GAAK,MACnB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MACpB9N,KAAK8N,SAAS,IAAM,MAEpB9N,KAAK+N,SAAW,IAAI9K,MAClB,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,yBAIJiD,EAAOhI,UAAY,CACjBwK,QAAS,EACTS,QAAS,EACTC,QAAS,EAETE,QAAS,EACTE,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,GACTE,QAAS,GACTC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GACTE,QAAS,GAETC,QAAS,GACTC,QAAS,GACTE,QAAS,GACTC,QAAS,GAETC,QAAS,GAETC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GAETI,UAAW,GAKXpF,QAAS,EACTW,SAAU,EACVQ,SAAU,EACVjB,SAAU,EACVO,SAAU,EACVV,SAAU,EACVE,SAAU,EACVwC,SAAU,EACVtC,UAAW,EACXC,UAAW,EACXC,eAAgB,GAChBC,gBAAiB,GACjB+B,YAAa,GAEbxC,MAAO,SAAUwF,EAAMC,EAAIlH,EAAMmH,EAAMlG,GACrCjI,KAAKqF,OAAO6I,GACF,IAAPD,GACQ,IAAPjH,IAAgB,GACT,IAAPmH,IAAgB,IACP,IAATlG,IAAkB,KAI1BxL,EAAOC,QAAUsH,G,qBCv+DjBvH,EAAOC,QAAU,CACfqG,WAAYgB,EAAQ,OACpBqK,IAAKrK,EAAQ,S,+BCFf,IAAID,EAAQC,EAAQ,OAEhBsK,EAAU,CAEdA,EAAa,SAAUpK,GACrBjE,KAAKiE,IAAMA,IAGboK,EAAQ,GAAGnQ,UAAY,CACrBwH,MAAO,WACL1F,KAAKsO,gBAAkB,EACvBtO,KAAKuO,gBAAkB,EACvBvO,KAAKwO,gBAAkB,EAEvBxO,KAAKyO,aAAc,EACnBzO,KAAK0O,QAAU,KACf1O,KAAK2O,QAAU,MAGjBzH,MAAO,SAAU0H,EAAShH,GACpBgH,EAAU,KAEZ5O,KAAKiE,IAAI4K,IAAI3K,IAAc,KAAV0K,GAAmBhH,EAC3BgH,EAAU,OACnB5O,KAAKiE,IAAI4K,IAAI3K,IAAI0K,GAAWhH,EACxBgH,GAAW,OAAUA,EAAU,OAEjC5O,KAAKiE,IAAI6K,KAAKC,kBAAkBH,EAAShH,IAElCgH,EAAU,MAAUA,EAAU,MACvC5O,KAAKgP,SAAS,MAAoB,EAAVJ,GAAgBhH,GAExC5H,KAAKgP,SAASJ,EAAShH,IAI3BqH,SAAU,SAAUL,EAAShH,GACvBgH,EAAU,KAEZ5O,KAAKiE,IAAI4K,IAAI3K,IAAc,KAAV0K,GAAmBhH,EAC3BgH,EAAU,MACnB5O,KAAKiE,IAAI4K,IAAI3K,IAAI0K,GAAWhH,EACnBgH,EAAU,MAAUA,EAAU,MACvC5O,KAAKgP,SAAS,MAAoB,EAAVJ,GAAgBhH,GAExC5H,KAAKgP,SAASJ,EAAShH,IAI3BjB,KAAM,SAAUiI,GAKd,OAHAA,GAAW,OAGG,MAEL5O,KAAKiE,IAAI4K,IAAI3K,IAAI0K,GACfA,GAAW,KAEb5O,KAAKkP,QAAQN,GAGb5O,KAAKiE,IAAI4K,IAAI3K,IAAc,KAAV0K,IAI5BM,QAAS,SAAUN,GACjB,OACEA,GAAW,IAEX,KAAK,EAGL,KAAK,EACH,MAEF,KAAK,EAEL,KAAK,EAEH,OAAkB,EAAVA,GACN,KAAK,EAOH,OAAO5O,KAAKiE,IAAI4K,IAAI3K,IAAI,MAE1B,KAAK,EAOH,OAAOlE,KAAKiE,IAAI4K,IAAI3K,IAAI,MAE1B,KAAK,EAOH,OAAOlE,KAAKiE,IAAIkL,IAAIC,qBAEtB,KAAK,EAOL,KAAK,EAGL,KAAK,EACH,OAAO,EART,KAAK,EAGH,OAAOpP,KAAKiE,IAAIkL,IAAIE,WAOtB,KAAK,EAGH,OAAOrP,KAAKiE,IAAIkL,IAAIG,WAExB,MACF,KAAK,EAEH,OAAQV,EAAU,OAChB,KAAK,EAGH,OAAO5O,KAAKiE,IAAIsL,KAAKC,QAAQZ,GAE/B,KAAK,EAGH,OAAO5O,KAAKyP,WAEd,KAAK,EAIH,IAAIC,EAeJ,OAREA,EAJiB,OAAjB1P,KAAK0O,SACY,OAAjB1O,KAAK2O,SACL3O,KAAKiE,IAAIkL,IAAIQ,aAAa3P,KAAK0O,QAAS1O,KAAK2O,SAEzC,EAEA,EAGF3O,KAAKyO,cACPiB,GAAK,IAEwB,OAAvB1P,KAAK4P,WAAaF,IAIlC,OAAO,GAGTV,SAAU,SAAUJ,EAAShH,GAC3B,OAAQgH,GACN,KAAK,KAEH5O,KAAKiE,IAAI4K,IAAI3K,IAAI0K,GAAWhH,EAC5B5H,KAAKiE,IAAIkL,IAAIU,kBAAkBjI,GAC/B,MAEF,KAAK,KAEH5H,KAAKiE,IAAI4K,IAAI3K,IAAI0K,GAAWhH,EAC5B5H,KAAKiE,IAAIkL,IAAIW,kBAAkBlI,GAC/B,MAEF,KAAK,KAEH5H,KAAKiE,IAAIkL,IAAIY,iBAAiBnI,GAC9B,MAEF,KAAK,KAEH5H,KAAKiE,IAAIkL,IAAIa,UAAUpI,GACvB,MAEF,KAAK,KAEH5H,KAAKiE,IAAIkL,IAAIc,YAAYrI,GACzB,MAEF,KAAK,KAEH5H,KAAKiE,IAAIkL,IAAIe,iBAAiBtI,GAC9B,MAEF,KAAK,KAEH5H,KAAKiE,IAAIkL,IAAIgB,UAAUvI,GACvB,MAEF,KAAK,MAEH5H,KAAKiE,IAAIkL,IAAIiB,QAAQxI,GACrB,MAEF,KAAK,MAcL,KAAK,MAEH5H,KAAKiE,IAAIsL,KAAKc,SAASzB,EAAShH,GAChC,MAZF,KAAK,MAEiB,IAAP,EAARA,IAAmD,IAAP,EAAvB5H,KAAKwO,mBAC7BxO,KAAKsO,gBAAkB,EACvBtO,KAAKuO,gBAAkB,GAEzBvO,KAAKwO,gBAAkB5G,EACvB,MAOF,QAGMgH,GAAW,OAAUA,GAAW,OAClC5O,KAAKiE,IAAIsL,KAAKc,SAASzB,EAAShH,KAKxC6H,SAAU,WACR,IAAIa,EAEJ,OAAQtQ,KAAKsO,iBACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACHgC,EAAMtQ,KAAKiE,IAAIsM,YAAY,GAAGvN,MAAMhD,KAAKsO,iBACzC,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAML,QACEgC,EAAM,QAJR,KAAK,GACHA,EAAM,EAWV,OALAtQ,KAAKsO,kBACwB,KAAzBtO,KAAKsO,kBACPtO,KAAKsO,gBAAkB,GAGlBgC,GAGTV,SAAU,WACR,IAAIU,EAEJ,OAAQtQ,KAAKuO,iBACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH+B,EAAMtQ,KAAKiE,IAAIsM,YAAY,GAAGvN,MAAMhD,KAAKuO,iBACzC,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAML,QACE+B,EAAM,QAJR,KAAK,GACHA,EAAM,EAWV,OALAtQ,KAAKuO,kBACwB,KAAzBvO,KAAKuO,kBACPvO,KAAKuO,gBAAkB,GAGlB+B,GAGTE,QAAS,WACP,IAAKxQ,KAAKiE,IAAIwM,IAAIC,OAAS1Q,KAAKiE,IAAIwM,IAAIE,SAAW,EACjD,MAAM,IAAIC,MAAM,0CAIlB5Q,KAAK6Q,aAGL7Q,KAAK8Q,aAGL9Q,KAAK+Q,iBAIL/Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAGvCgL,WAAY,WACN7Q,KAAKiE,IAAIwM,IAAIE,SAAW,GAE1B3Q,KAAKgR,YAAY,EAAG,OACpBhR,KAAKgR,YAAY,EAAG,SAGpBhR,KAAKgR,YAAY,EAAG,OACpBhR,KAAKgR,YAAY,EAAG,SAIxBF,WAAY,WAEN9Q,KAAKiE,IAAIwM,IAAIQ,UAAY,IACI,IAA3BjR,KAAKiE,IAAIwM,IAAIQ,WACfjR,KAAKkR,aAAa,EAAG,GACrBlR,KAAKkR,aAAa,EAAG,QAErBlR,KAAKkR,aAAa,EAAG,GACrBlR,KAAKkR,aAAa,EAAG,SAO3BH,eAAgB,WACd,GAAI/Q,KAAKiE,IAAIwM,IAAIU,WAAY,CAC3B,IAAIC,EAAMpR,KAAKiE,IAAIwM,IAAIU,WACX,OAARC,GAA+B,OAAfA,EAAI5O,QAEtBsB,EAAMuN,kBAAkBD,EAAK,EAAGpR,KAAKiE,IAAI4K,IAAI3K,IAAK,MAAQ,QAKhE8M,YAAa,SAAUM,EAAM1C,GAE3B0C,GAAQtR,KAAKiE,IAAIwM,IAAIE,SAGrB7M,EAAMuN,kBACJrR,KAAKiE,IAAIwM,IAAIA,IAAIa,GACjB,EACAtR,KAAKiE,IAAI4K,IAAI3K,IACb0K,EACA,QAIJsC,aAAc,SAAUI,EAAM1C,GAC5B,GAA+B,IAA3B5O,KAAKiE,IAAIwM,IAAIQ,UAAjB,CAGAjR,KAAKiE,IAAIkL,IAAIoC,mBAEbzN,EAAMuN,kBACJrR,KAAKiE,IAAIwM,IAAIe,KAAKF,EAAOtR,KAAKiE,IAAIwM,IAAIQ,WACtC,EACAjR,KAAKiE,IAAIkL,IAAIsC,QACb7C,EACA,MAGF,IAAI8C,EAAW1R,KAAKiE,IAAIwM,IAAIiB,SAASJ,EAAOtR,KAAKiE,IAAIwM,IAAIQ,WACzDnN,EAAMuN,kBACJK,EACA,EACA1R,KAAKiE,IAAIkL,IAAIwC,OACb/C,GAAW,EACX,OAIJgD,eAAgB,SAAUN,EAAM1C,GAC9B5O,KAAKgR,YAAoB,EAAPM,EAAYtR,KAAKiE,IAAIwM,IAAIE,SAAU/B,GACrD5O,KAAKgR,aAAoB,EAAPM,EAAW,GAAKtR,KAAKiE,IAAIwM,IAAIE,SAAU/B,EAAU,QAGrEiD,eAAgB,SAAUC,EAAalD,GACN,IAA3B5O,KAAKiE,IAAIwM,IAAIQ,YAGjBjR,KAAKiE,IAAIkL,IAAIoC,mBAEbvR,KAAKkR,aAAaY,EAAc9R,KAAKiE,IAAIwM,IAAIQ,UAAWrC,GACxD5O,KAAKkR,cACFY,EAAc,GAAK9R,KAAKiE,IAAIwM,IAAIQ,UACjCrC,EAAU,QAIdmD,eAAgB,SAAUC,EAAQpD,GAChC,GAA+B,IAA3B5O,KAAKiE,IAAIwM,IAAIQ,UAAjB,CAGAjR,KAAKiE,IAAIkL,IAAIoC,mBAEb,IAAIU,EAASC,KAAKC,MAAMH,EAAS,GAAKhS,KAAKiE,IAAIwM,IAAIQ,UAC/CmB,EAAcJ,EAAS,EAAK,KAChClO,EAAMuN,kBACJrR,KAAKiE,IAAIwM,IAAIe,KAAKS,GAClBG,EACApS,KAAKiE,IAAIkL,IAAIsC,QACb7C,EACA,MAMF,IAFA,IAAI8C,EAAW1R,KAAKiE,IAAIwM,IAAIiB,SAASO,GACjCI,EAAYzD,GAAW,EAClB1L,EAAI,EAAGA,EAAI,GAAIA,IACtBlD,KAAKiE,IAAIkL,IAAIwC,OAAOU,EAAYnP,GAAKwO,GAAUM,EAAS,GAAK,GAAK9O,KAItEoP,eAAgB,SAAUC,EAAQ3D,GAChC,GAA+B,IAA3B5O,KAAKiE,IAAIwM,IAAIQ,UAAjB,CAGAjR,KAAKiE,IAAIkL,IAAIoC,mBAEb,IAAIU,EAASC,KAAKC,MAAMI,EAAS,GAAKvS,KAAKiE,IAAIwM,IAAIQ,UAC/CmB,EAAcG,EAAS,EAAK,KAChCzO,EAAMuN,kBACJrR,KAAKiE,IAAIwM,IAAIe,KAAKS,GAClBG,EACApS,KAAKiE,IAAIkL,IAAIsC,QACb7C,EACA,MAMF,IAFA,IAAI8C,EAAW1R,KAAKiE,IAAIwM,IAAIiB,SAASO,GACjCI,EAAYzD,GAAW,EAClB1L,EAAI,EAAGA,EAAI,IAAKA,IACvBlD,KAAKiE,IAAIkL,IAAIwC,OAAOU,EAAYnP,GAAKwO,GAAUa,EAAS,GAAK,GAAKrP,KAItEsP,cAAe,SAAUC,EAAQ7D,GAC/B,IAAI8D,EAAUR,KAAKC,MAAMM,EAAS,GAAKzS,KAAKiE,IAAIwM,IAAIE,SAChD/O,EAAU6Q,EAAS,EAAK,KAG5B3O,EAAMuN,kBACJrR,KAAKiE,IAAIwM,IAAIA,IAAIiC,GACjB9Q,EACA5B,KAAKiE,IAAI4K,IAAI3K,IACb0K,EACA,OAIJ+D,gBAAiB,aAKjBC,YAAa,SAAUhE,KAIvBtG,OAAQ,WACN,MAAO,CACLgG,gBAAiBtO,KAAKsO,gBACtBC,gBAAiBvO,KAAKuO,gBACtBC,gBAAiBxO,KAAKwO,kBAI1BjG,SAAU,SAAUC,GAClBxI,KAAKsO,gBAAkB9F,EAAE8F,gBACzBtO,KAAKuO,gBAAkB/F,EAAE+F,gBACzBvO,KAAKwO,gBAAkBhG,EAAEgG,kBAI7BH,EAAQ,GAAK,SAAUpK,GACrBjE,KAAKiE,IAAMA,GAGboK,EAAQ,GAAGnQ,UAAY,IAAImQ,EAAQ,GAEnCA,EAAQ,GAAGnQ,UAAUwH,MAAQ,WAC3B2I,EAAQ,GAAGnQ,UAAUwH,MAAMmN,MAAM7S,MAGjCA,KAAK8S,UAAY,EACjB9S,KAAK+S,iBAAmB,EAGxB/S,KAAKgT,UAAY,EACjBhT,KAAKiT,mBAAqB,EAC1BjT,KAAKkT,iBAAmB,EACxBlT,KAAKmT,iBAAmB,EACxBnT,KAAKoT,kBAAoB,EAGzBpT,KAAKqT,iBAAmB,EAGxBrT,KAAKsT,iBAAmB,EAGxBtT,KAAKuT,cAAgB,GAGvBlF,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE1CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,WAKnB,IAAT,IAARiF,IAEH5H,KAAK+S,iBAAmB,EACxB/S,KAAK8S,UAAY,EAGkB,IAA/B9S,KAAKwT,aAAa5E,KACpB5O,KAAKkT,iBAAmB,EACxBlT,KAAKmT,iBAAmB,KAK1BnT,KAAK8S,UACF9S,KAAK8S,UAAa,KAAQ,GAAK9S,KAAK+S,mBAC3B,EAARnL,IAAc5H,KAAK+S,iBACvB/S,KAAK+S,mBAEyB,IAA1B/S,KAAK+S,mBAEP/S,KAAKyT,OAAOzT,KAAKwT,aAAa5E,GAAU5O,KAAK8S,WAG7C9S,KAAK8S,UAAY,EACjB9S,KAAK+S,iBAAmB,KAK9B1E,EAAQ,GAAGnQ,UAAUuV,OAAS,SAAUC,EAAK9L,GAC3C,IAAI+L,EAEJ,OAAQD,GACN,KAAK,GAEHC,EAAc,EAAR/L,KACM5H,KAAKgT,YAEfhT,KAAKgT,UAAYW,EACY,IAAP,EAAjB3T,KAAKgT,WAERhT,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIoD,wBACL,IAAP,EAAjB7T,KAAKgT,WAEfhT,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIqD,sBAEvC9T,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIsD,qBAK3C/T,KAAKkT,iBAAoBtL,GAAS,EAAK,EAGvC5H,KAAKmT,iBAAoBvL,GAAS,EAAK,EAGvC5H,KAAKoT,kBAAqBxL,GAAS,EAAK,EAExC,MAEF,KAAK,EAEH5H,KAAKqT,iBAAoBzL,GAAS,EAAK,EAGnC5H,KAAKiE,IAAIwM,IAAIQ,UAAY,IAEI,IAA3BjR,KAAKoT,kBAEuB,IAA1BpT,KAAKqT,iBACPrT,KAAK6R,eAAuB,GAARjK,EAAa,GAEjC5H,KAAK6R,eACHK,KAAKC,MAAMnS,KAAKiE,IAAIwM,IAAIQ,UAAY,IAAc,GAARrJ,GAC1C,GAK0B,IAA1B5H,KAAKqT,iBACPrT,KAAKkR,aAAqB,GAARtJ,EAAa,GAE/B5H,KAAKkR,aACHgB,KAAKC,MAAMnS,KAAKiE,IAAIwM,IAAIQ,UAAY,IAAc,GAARrJ,GAC1C,IAMR,MAEF,KAAK,EAEH5H,KAAKsT,iBAAoB1L,GAAS,EAAK,EAGnC5H,KAAKiE,IAAIwM,IAAIQ,UAAY,GAEI,IAA3BjR,KAAKoT,oBAEuB,IAA1BpT,KAAKsT,iBACPtT,KAAKkR,aAAqB,GAARtJ,EAAa,MAE/B5H,KAAKkR,aACHgB,KAAKC,MAAMnS,KAAKiE,IAAIwM,IAAIQ,UAAY,IAAc,GAARrJ,GAC1C,OAKR,MAEF,QAIE,IAAI0J,EADJqC,EAAc,GAAR/L,EAEN,IAAIoM,EAAW,EAEXhU,KAAKiE,IAAIwM,IAAIE,UAAY,GAEI,IAA3B3Q,KAAKoT,kBACuB,IAA1BpT,KAAKqT,mBACPW,EAAW,IAGbA,GACGhU,KAAKqT,iBAAoBrT,KAAKsT,kBAAoB,IAAO,EAErDtT,KAAKiE,IAAIwM,IAAIE,UAAY,IAEJ,IAA1B3Q,KAAKqT,mBACPW,EAAW,GAIe,IAA1BhU,KAAKmT,kBAEP7B,EAAO0C,GAAoB,GAARpM,GACnB5H,KAAK4R,eAAeN,EAAM,SAG1BA,EAAkB,EAAX0C,GAAwB,GAARpM,GACO,IAA1B5H,KAAKkT,iBACPlT,KAAKgR,YAAYM,EAAM,OAEvBtR,KAAKgR,YAAYM,EAAM,UAOjCjD,EAAQ,GAAGnQ,UAAUsV,aAAe,SAAU5E,GAC5C,OAAIA,GAAW,OAAUA,GAAW,MAC3B,EACEA,GAAW,OAAUA,GAAW,MAClC,EACEA,GAAW,OAAUA,GAAW,MAClC,EAEA,GAIXP,EAAQ,GAAGnQ,UAAUsS,QAAU,WAC7B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,sCAIlB5Q,KAAKgR,YAAY,EAAG,OACpBhR,KAAKgR,YAAYhR,KAAKiE,IAAIwM,IAAIE,SAAW,EAAG,OAG5C3Q,KAAK8Q,aAGL9Q,KAAK+Q,iBAGL/Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAIvCwI,EAAQ,GAAGnQ,UAAU+V,oBAAsB,SAAUC,KAIrD7F,EAAQ,GAAGnQ,UAAUiW,aAAe,aAIpC9F,EAAQ,GAAGnQ,UAAUkW,aAAe,aAIpC/F,EAAQ,GAAGnQ,UAAUoK,OAAS,WAC5B,IAAIE,EAAI6F,EAAQ,GAAGnQ,UAAUoK,OAAOuK,MAAM7S,MAW1C,OAVAwI,EAAEwK,UAAYhT,KAAKgT,UACnBxK,EAAEyK,mBAAqBjT,KAAKiT,mBAC5BzK,EAAE0K,iBAAmBlT,KAAKkT,iBAC1B1K,EAAE2K,iBAAmBnT,KAAKmT,iBAC1B3K,EAAE4K,kBAAoBpT,KAAKoT,kBAC3B5K,EAAE6K,iBAAmBrT,KAAKqT,iBAC1B7K,EAAE8K,iBAAmBtT,KAAKsT,iBAC1B9K,EAAE+K,cAAgBvT,KAAKuT,cACvB/K,EAAEsK,UAAY9S,KAAK8S,UACnBtK,EAAEuK,iBAAmB/S,KAAK+S,iBACnBvK,GAGT6F,EAAQ,GAAGnQ,UAAUqK,SAAW,SAAUC,GACxC6F,EAAQ,GAAGnQ,UAAUqK,SAASsK,MAAM7S,KAAM2C,WAC1C3C,KAAKgT,UAAYxK,EAAEwK,UACnBhT,KAAKiT,mBAAqBzK,EAAEyK,mBAC5BjT,KAAKkT,iBAAmB1K,EAAE0K,iBAC1BlT,KAAKmT,iBAAmB3K,EAAE2K,iBAC1BnT,KAAKoT,kBAAoB5K,EAAE4K,kBAC3BpT,KAAKqT,iBAAmB7K,EAAE6K,iBAC1BrT,KAAKsT,iBAAmB9K,EAAE8K,iBAC1BtT,KAAKuT,cAAgB/K,EAAE+K,cACvBvT,KAAK8S,UAAYtK,EAAEsK,UACnB9S,KAAK+S,iBAAmBvK,EAAEuK,kBAG5B1E,EAAQ,GAAK,SAAUpK,GACrBjE,KAAKiE,IAAMA,GAGboK,EAAQ,GAAGnQ,UAAY,IAAImQ,EAAQ,GAEnCA,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE1CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,WAKvC3C,KAAKgR,YAAYpJ,EAAO,QAI5ByG,EAAQ,GAAGnQ,UAAUsS,QAAU,WAC7B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,uCAIlB5Q,KAAKgR,YAAY,EAAG,OACpBhR,KAAKgR,YAAYhR,KAAKiE,IAAIwM,IAAIE,SAAW,EAAG,OAG5C3Q,KAAK8Q,aAGL9Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAUvCwI,EAAQ,GAAK,SAAUpK,GACrBjE,KAAKiE,IAAMA,GAGboK,EAAQ,GAAGnQ,UAAY,IAAImQ,EAAQ,GAEnCA,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE9C,GAAIgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,eADzC,CAQE,IAAI2O,EAAQ1J,GAAS5H,KAAKiE,IAAIwM,IAAIQ,UAAY,GAAM,EACpDjR,KAAKkR,aAAaI,EAAM,GACxBtR,KAAKkR,aAAaI,EAAO,EAAG,MAC5BtR,KAAK6R,eAAuB,EAARjK,EAAW,KAInCyG,EAAQ,GAAK,SAAUpK,GACrBjE,KAAKiE,IAAMA,EAEXjE,KAAKqU,uBAAyB,EAC9BrU,KAAKsU,uBAAyB,EAC9BtU,KAAKuU,qBAAuB,EAC5BvU,KAAKwU,qBAAuB,EAC5BxU,KAAKyU,qBAAuB,EAC5BzU,KAAK0U,qBAAuB,EAC5B1U,KAAK2U,kBAAoB,EACzB3U,KAAK4U,kBAAoB,EAEzB5U,KAAK6U,QAAU,KACf7U,KAAK8U,iBAAmB,KACxB9U,KAAK+U,iBAAmB,KACxB/U,KAAKgV,WAAa,KAClBhV,KAAKiV,WAAa,KAClBjV,KAAKkV,cAAgB,KACrBlV,KAAKmV,UAAY,KACjBnV,KAAKoV,mBAAoB,GAG3B/G,EAAQ,GAAGnQ,UAAY,IAAImQ,EAAQ,GAEnCA,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE9C,GAAIgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,gBAIzC,OAAQiM,GACN,KAAK,MAEH5O,KAAK6U,QAAkB,EAARjN,EACf,IAAI+L,EAAO/L,GAAS,EAAK,EACrB+L,IAAQ3T,KAAK8U,mBACf9U,KAAKoV,mBAAoB,GAE3BpV,KAAK8U,iBAAmBnB,EACxB3T,KAAK+U,iBAAoBnN,GAAS,EAAK,EACvC,MAEF,KAAK,MAEH5H,KAAKqV,eAAerV,KAAK6U,QAASjN,GAClC,MAEF,KAAK,MAEiB,IAAP,EAARA,GACH5H,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIqD,sBAEvC9T,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIsD,oBAEzC,MAEF,KAAK,MAIH,MAEF,KAAK,MAEH/T,KAAKiV,WAAarN,EAElB,MAEF,KAAK,MAEH5H,KAAKkV,cAAgBtN,EACrB,MAEF,KAAK,MAGH5H,KAAKmV,UAAY,EACjB,MAEF,KAAK,MAEHnV,KAAKmV,UAAY,IAWvB9G,EAAQ,GAAGnQ,UAAUmX,eAAiB,SAAUC,EAAKC,GACnD,OAAQD,GACN,KAAKtV,KAAKqU,uBAEsB,IAA1BrU,KAAK+U,kBACP/U,KAAK+R,eAAewD,EAAK,GACzBvV,KAAK+R,eAAewD,EAAM,EAAG,QAE7BvV,KAAK+R,eAAewD,EAAK,MACzBvV,KAAK+R,eAAewD,EAAM,EAAG,OAE/B,MAEF,KAAKvV,KAAKsU,uBAEsB,IAA1BtU,KAAK+U,kBACP/U,KAAK+R,eAAewD,EAAK,MACzBvV,KAAK+R,eAAewD,EAAM,EAAG,QAE7BvV,KAAK+R,eAAewD,EAAK,MACzBvV,KAAK+R,eAAewD,EAAM,EAAG,OAE/B,MAEF,KAAKvV,KAAKuU,qBAEsB,IAA1BvU,KAAK+U,iBACP/U,KAAK+R,eAAewD,EAAK,MAEzBvV,KAAK+R,eAAewD,EAAK,GAE3B,MAEF,KAAKvV,KAAKwU,qBAEsB,IAA1BxU,KAAK+U,iBACP/U,KAAK+R,eAAewD,EAAK,MAEzBvV,KAAK+R,eAAewD,EAAK,MAE3B,MAEF,KAAKvV,KAAKyU,qBAEsB,IAA1BzU,KAAK+U,iBACP/U,KAAK+R,eAAewD,EAAK,MAEzBvV,KAAK+R,eAAewD,EAAK,MAE3B,MAEF,KAAKvV,KAAK0U,qBAEsB,IAA1B1U,KAAK+U,iBACP/U,KAAK+R,eAAewD,EAAK,MAEzBvV,KAAK+R,eAAewD,EAAK,MAE3B,MAEF,KAAKvV,KAAK2U,kBACJ3U,KAAKoV,oBAEuB,IAA1BpV,KAAK8U,iBACP9U,KAAKwS,cAA4C,GAA7BxS,KAAKiE,IAAIwM,IAAIE,SAAW,GAAQ,OAEpD3Q,KAAKwS,cAA4C,GAA7BxS,KAAKiE,IAAIwM,IAAIE,SAAW,GAAQ,OAEtD3Q,KAAKoV,mBAAoB,GAIG,IAA1BpV,KAAK8U,iBACP9U,KAAKwS,cAAc+C,EAAK,OAExBvV,KAAKwS,cAAc+C,EAAK,OAE1B,MAEF,KAAKvV,KAAK4U,kBAER5U,KAAKwS,cAAc+C,EAAK,OAGpBvV,KAAKoV,oBAEuB,IAA1BpV,KAAK8U,iBACP9U,KAAKwS,cAA4C,GAA7BxS,KAAKiE,IAAIwM,IAAIE,SAAW,GAAQ,OAEpD3Q,KAAKwS,cAA4C,GAA7BxS,KAAKiE,IAAIwM,IAAIE,SAAW,GAAQ,OAEtD3Q,KAAKoV,mBAAoB,KAKjC/G,EAAQ,GAAGnQ,UAAUsS,QAAU,WAC7B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,sCAIlB5Q,KAAKwS,cAA4C,GAA7BxS,KAAKiE,IAAIwM,IAAIE,SAAW,GAAQ,OACpD3Q,KAAKwS,cAA4C,GAA7BxS,KAAKiE,IAAIwM,IAAIE,SAAW,GAAS,EAAG,OAGxD3Q,KAAKwS,cAAc,EAAG,OACtBxS,KAAKwS,cAAc,EAAG,OAGtBxS,KAAK8Q,aAGL9Q,KAAK+Q,iBAGL/Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAGvCwI,EAAQ,GAAGnQ,UAAUyU,gBAAkB,WACd,IAAnB3S,KAAKmV,YACPnV,KAAKiV,aACDjV,KAAKiV,WAAa,IAGpBjV,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIlJ,YACrC3F,KAAKiV,WAAajV,KAAKkV,iBAK7B7G,EAAQ,GAAGnQ,UAAUoK,OAAS,WAC5B,IAAIE,EAAI6F,EAAQ,GAAGnQ,UAAUoK,OAAOuK,MAAM7S,MAS1C,OARAwI,EAAEqM,QAAU7U,KAAK6U,QACjBrM,EAAEsM,iBAAmB9U,KAAK8U,iBAC1BtM,EAAEuM,iBAAmB/U,KAAK+U,iBAC1BvM,EAAEwM,WAAahV,KAAKgV,WACpBxM,EAAEyM,WAAajV,KAAKiV,WACpBzM,EAAE0M,cAAgBlV,KAAKkV,cACvB1M,EAAE2M,UAAYnV,KAAKmV,UACnB3M,EAAE4M,kBAAoBpV,KAAKoV,kBACpB5M,GAGT6F,EAAQ,GAAGnQ,UAAUqK,SAAW,SAAUC,GACxC6F,EAAQ,GAAGnQ,UAAUqK,SAASsK,MAAM7S,KAAM2C,WAC1C3C,KAAK6U,QAAUrM,EAAEqM,QACjB7U,KAAK8U,iBAAmBtM,EAAEsM,iBAC1B9U,KAAK+U,iBAAmBvM,EAAEuM,iBAC1B/U,KAAKgV,WAAaxM,EAAEwM,WACpBhV,KAAKiV,WAAazM,EAAEyM,WACpBjV,KAAKkV,cAAgB1M,EAAE0M,cACvBlV,KAAKmV,UAAY3M,EAAE2M,UACnBnV,KAAKoV,kBAAoB5M,EAAE4M,mBAU7B/G,EAAQ,GAAK,SAAUpK,GACrBjE,KAAKiE,IAAMA,GAGboK,EAAQ,GAAGnQ,UAAY,IAAImQ,EAAQ,GAEnCA,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE1CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,WAEvC3C,KAAK6R,eAAejK,EAAO,IAI/ByG,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE9C,GAAIgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,gBAIzC,OAAQiM,GACN,KAAK,MACH5O,KAAKwV,SAAmB,EAAR5N,EAChB,MACF,KAAK,MACH5H,KAAKyV,SAAmB,EAAR7N,EAChB,MACF,KAAK,MACH5H,KAAK0V,UAAoB,EAAR9N,EACjB,MACF,KAAK,MACH5H,KAAK2V,UAAoB,EAAR/N,EACjB,MACF,KAAK,MACH5H,KAAK4V,aAAuB,EAARhO,EACpB,MACF,KAAK,MACH5H,KAAK6V,eAAiBjO,EACtB5H,KAAK8V,eAAe,GAAa,EAARlO,EACzB5H,KAAK+R,eAAuB,EAARnK,EAAW,MAC/BA,IAAU,EACV5H,KAAK8V,eAAe,GAAa,EAARlO,EACzB5H,KAAK+R,eAAuB,EAARnK,EAAW,MAC/BA,IAAU,EACV5H,KAAK8V,eAAe,GAAa,EAARlO,EACzB5H,KAAK+R,eAAuB,EAARnK,EAAW,OAC/BA,IAAU,EACV5H,KAAK8V,eAAe,GAAa,EAARlO,EACzB5H,KAAK+R,eAAuB,EAARnK,EAAW,OAC/B,MACF,KAAK,MACH5H,KAAK+V,SAAWnO,EAChB,MACF,KAAK,MACH5H,KAAKgW,SAAmB,EAARpO,EAChB,MACF,KAAK,MACH5H,KAAKiW,aAAa,EAAW,EAARrO,GACrB,MACF,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACH5H,KAAKkW,YAAYtH,EAAShH,GAC1B,MACF,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACH5H,KAAKmW,SAAW,EAChBnW,KAAKoW,SAAS,GAAa,EAAVxH,GAAehH,EAChC5H,KAAKqW,cACL,MACF,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACHrW,KAAKmW,SAAW,EAChBnW,KAAKoW,SAAS,GAAmB,GAAL,EAAVxH,IAAoBhH,EACtC5H,KAAKoW,SAAS,GAAmB,GAAL,EAAVxH,IAAoBhH,EACtC5H,KAAKqW,cACL,MACF,KAAK,MACHrW,KAAKsW,cAAgB1O,EACrB,MACF,KAAK,MACH5H,KAAKuW,aAAe3O,EACpB,MACF,KAAK,MACH5H,KAAKwW,WAAqB,GAAR5O,EAClB,MACF,KAAK,MACH5H,KAAKyW,SAAW7O,EAChB5H,KAAKiE,IAAI4K,IAAI6H,WACb,MACF,KAAK,MACH1W,KAAK2W,WAAa/O,EAClB5H,KAAKiE,IAAI4K,IAAI6H,WACb,MACF,KAAK,MACH1W,KAAK4W,OAAShP,EACd,MACF,KAAK,MACH5H,KAAK6W,OAASjP,EACd,MACF,QACMgH,GAAW,OAAUA,GAAW,MAClC5O,KAAKiE,IAAIsL,KAAKuH,QAAQlI,EAAShH,GACtBgH,GAAW,OAAUA,GAAW,MACf,IAAtB5O,KAAK4V,cAGwB,IAAtB5V,KAAK4V,cAEV5V,KAAK+W,WAMFnI,GAAW,OAAUA,GAAW,OAClB,IAAnB5O,KAAK0V,WAAmB1V,KAAK2V,YAQzCtH,EAAQ,GAAGnQ,UAAUsS,QAAU,WAC7B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,uCAIlB5Q,KAAKwS,cAAsC,EAAxBxS,KAAKiE,IAAIwM,IAAIE,SAAe,EAAG,OAClD3Q,KAAKwS,cAAsC,EAAxBxS,KAAKiE,IAAIwM,IAAIE,SAAe,EAAG,OAClD3Q,KAAKwS,cAAsC,EAAxBxS,KAAKiE,IAAIwM,IAAIE,SAAe,EAAG,OAClD3Q,KAAKwS,cAAsC,EAAxBxS,KAAKiE,IAAIwM,IAAIE,SAAe,EAAG,OAGlD3Q,KAAK8Q,aAGL9Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YASvCwI,EAAQ,GAAK,SAAUpK,GACrBjE,KAAKiE,IAAMA,GAGboK,EAAQ,GAAGnQ,UAAY,IAAImQ,EAAQ,GAEnCA,EAAQ,GAAGnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE1CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,YAEvC3C,KAAK4R,eAAuB,EAARhK,EAAa,OACrB,GAARA,EACF5H,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIuG,yBAEvChX,KAAKiE,IAAIkL,IAAIyE,aAAa5T,KAAKiE,IAAIwM,IAAIoD,0BAK7CxF,EAAQ,GAAGnQ,UAAUsS,QAAU,WAC7B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,uCAIlB5Q,KAAK6Q,aAGL7Q,KAAK8Q,aAGL9Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAUvCwI,EAAQ,IAAM,SAAUpK,GACtBjE,KAAKiE,IAAMA,GAGboK,EAAQ,IAAInQ,UAAY,IAAImQ,EAAQ,GAEpCA,EAAQ,IAAInQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAC/C,GAAIgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,eADzC,CAKE,IAAIsU,EAA4B,GAAP,GAARrP,GAAoB5H,KAAKiE,IAAIwM,IAAIE,SAC9CuG,GAA4B,GAAP,GAARtP,GAAmB,GAAK5H,KAAKiE,IAAIwM,IAAIE,SAKtD,GAHA3Q,KAAKgR,YAAYiG,EAAU,OAC3BjX,KAAKgR,YAAYkG,EAAU,OAEvBlX,KAAKiE,IAAIwM,IAAIQ,UAAY,EAAG,CAE9B,IAAIK,EAAuB,GAAd1J,GAAS,GAAU5H,KAAKiE,IAAIwM,IAAIQ,UAC7CjR,KAAKkR,aAAaI,EAAM,GACxBtR,KAAKkR,aAAaI,EAAO,EAAG,SAYlCjD,EAAQ,IAAM,SAAUpK,GACtBjE,KAAKiE,IAAMA,GAGboK,EAAQ,IAAInQ,UAAY,IAAImQ,EAAQ,GAEpCA,EAAQ,IAAInQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAC3CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,WAGvC3C,KAAK4R,eAAehK,EAAO,QAW/ByG,EAAQ,IAAM,SAAUpK,GACtBjE,KAAKiE,IAAMA,GAGboK,EAAQ,IAAInQ,UAAY,IAAImQ,EAAQ,GAEpCA,EAAQ,IAAInQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAC3CgH,EAAU,OAAUA,EAAU,MAChCP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,YAIvC3C,KAAK4R,eAAuB,EAARhK,EAAW,OAG/B5H,KAAK6R,eAAoC,GAAnBjK,GAAS,EAAK,GAAQ,KAYhDyG,EAAQ,IAAM,SAAUpK,GACtBjE,KAAKiE,IAAMA,GAGboK,EAAQ,IAAInQ,UAAY,IAAImQ,EAAQ,GAEpCA,EAAQ,IAAInQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAC3CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,YAIvC3C,KAAK4R,eAAgBhK,GAAS,EAAK,EAAG,OAGtC5H,KAAK6R,eAA6B,GAAL,EAARjK,GAAgB,KAWzCyG,EAAQ,IAAM,SAAUpK,GACtBjE,KAAKiE,IAAMA,GAGboK,EAAQ,IAAInQ,UAAY,IAAImQ,EAAQ,GAEpCA,EAAQ,IAAInQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE3CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,WAKvC3C,KAAKgR,YAAYpJ,GAAS,EAAG,QAIjCyG,EAAQ,IAAInQ,UAAUsS,QAAU,WAC9B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,wCAIlB5Q,KAAKgR,YAAY,EAAG,OACpBhR,KAAKgR,YAAYhR,KAAKiE,IAAIwM,IAAIE,SAAW,EAAG,OAG5C3Q,KAAK8Q,aAGL9Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAUvCwI,EAAQ,KAAO,SAAUpK,GACvBjE,KAAKiE,IAAMA,GAGboK,EAAQ,KAAKnQ,UAAY,IAAImQ,EAAQ,GAErCA,EAAQ,KAAKnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAC5CgH,EAAU,OAAUA,EAAU,MAChCP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,YAIvC3C,KAAK4R,eAAgBhK,GAAS,EAAK,EAAG,OAGtC5H,KAAK6R,eAA+B,GAAP,GAARjK,GAAkB,KAW3CyG,EAAQ,KAAO,SAAUpK,GACvBjE,KAAKiE,IAAMA,GAGboK,EAAQ,KAAKnQ,UAAY,IAAImQ,EAAQ,GAErCA,EAAQ,KAAKnQ,UAAUgJ,MAAQ,SAAU0H,EAAShH,GAE5CgH,EAAU,MACZP,EAAQ,GAAGnQ,UAAUgJ,MAAM2L,MAAM7S,KAAM2C,WAKvC3C,KAAKgR,YAAYpJ,EAAO,QAI5ByG,EAAQ,KAAKnQ,UAAUsS,QAAU,WAC/B,IAAKxQ,KAAKiE,IAAIwM,IAAIC,MAChB,MAAM,IAAIE,MAAM,4CAIlB5Q,KAAKgR,YAAY,EAAG,OACpBhR,KAAKgR,YAAYhR,KAAKiE,IAAIwM,IAAIE,SAAW,EAAG,OAG5C3Q,KAAK8Q,aAGL9Q,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIhJ,YAGvCpJ,EAAOC,QAAU2R,G,sBC7+CjB,IAAIrK,EAAMD,EAAQ,OACdhB,EAAagB,EAAQ,OACrBoT,EAAMpT,EAAQ,OACdqT,EAAOrT,EAAQ,OACfsT,EAAMtT,EAAQ,OAEdqK,EAAM,SAAUU,GAchB,IAAIlL,EADN,GAZA5D,KAAK8O,KAAO,CACVwI,QAAS,aACTC,cAAe,KACfC,eAAgB,aAChBzI,kBAAmB,aAGnB0I,mBAAoB,GAEpBC,cAAc,EACdC,WAAY,WAEM,IAAT7I,EAET,IAAKlL,KAAO5D,KAAK8O,UACU,IAAdA,EAAKlL,KACd5D,KAAK8O,KAAKlL,GAAOkL,EAAKlL,IAK5B5D,KAAK4X,UAAY,IAAO5X,KAAK8O,KAAK2I,mBAElCzX,KAAK6X,GAAK,CACRC,WAAY9X,KAAK8O,KAAKwI,QACtBS,aAAc/X,KAAK8O,KAAK0I,gBAE1BxX,KAAK6O,IAAM,IAAI7K,EAAIhE,MACnBA,KAAKmP,IAAM,IAAIgI,EAAInX,MACnBA,KAAKuP,KAAO,IAAI6H,EAAKpX,MACrBA,KAAK0G,KAAO,KACZ1G,KAAKuQ,YAAc,CACjB,EAAG,IAAIxN,EACP,EAAG,IAAIA,GAGT/C,KAAK6X,GAAGE,aAAa,wBAErB/X,KAAKgY,MAAQhY,KAAKgY,MAAMC,KAAKjY,MAC7BA,KAAK2D,WAAa3D,KAAK2D,WAAWsU,KAAKjY,MACvCA,KAAK6D,SAAW7D,KAAK6D,SAASoU,KAAKjY,MACnCA,KAAKkY,WAAalY,KAAKkY,WAAWD,KAAKjY,MACvCA,KAAKmY,eAAiBnY,KAAKmY,eAAeF,KAAKjY,MAC/CA,KAAKoY,aAAepY,KAAKoY,aAAaH,KAAKjY,OAG7CoO,EAAIlQ,UAAY,CACdma,cAAe,EACfC,QAAS,KAGT5S,MAAO,WACa,OAAd1F,KAAK0G,MACP1G,KAAK0G,KAAKhB,QAGZ1F,KAAK6O,IAAInJ,QACT1F,KAAKmP,IAAIzJ,QACT1F,KAAKuP,KAAK7J,QAEV1F,KAAKuY,YAAc,KACnBvY,KAAKqY,cAAgB,GAGvBL,MAAO,WACLhY,KAAKmP,IAAIqJ,aACT,IAAIvQ,EAAS,EACTyP,EAAe1X,KAAK8O,KAAK4I,aACzB7I,EAAM7O,KAAK6O,IACXM,EAAMnP,KAAKmP,IACXI,EAAOvP,KAAKuP,KAChBkJ,EAAW,OAwBT,IAvByB,IAArB5J,EAAIvJ,cAEN2C,EAAS4G,EAAI1I,UACTuR,GACFnI,EAAKmJ,kBAAkBzQ,GAEzBA,GAAU,GAEN4G,EAAIvJ,aAAe,GACrB2C,EAAS,GACLyP,GACFnI,EAAKmJ,kBAAkB,GAEzB7J,EAAIvJ,cAAgB,IAEpB2C,EAA4B,EAAnB4G,EAAIvJ,aACToS,GACFnI,EAAKmJ,kBAAkB7J,EAAIvJ,cAE7BuJ,EAAIvJ,aAAe,GAIhB2C,EAAS,EAAGA,IAAU,CAU3B,GAREkH,EAAIwJ,OAASxJ,EAAIyJ,UACM,IAAvBzJ,EAAI0J,gBACJ1J,EAAI2J,SAAW,KAAO3J,EAAI4J,UAG1B5J,EAAI6J,cAAc7J,EAAI8J,mBAAmB,GAGvC9J,EAAI+J,kBACN/J,EAAIgK,aACmB,IAAnBhK,EAAIgK,YAAkB,CACxBhK,EAAI+J,iBAAkB,EACtB/J,EAAIiK,cACJ,MAAMX,EAIVtJ,EAAIwJ,OACa,MAAbxJ,EAAIwJ,OACNxJ,EAAIwJ,KAAO,EACXxJ,EAAIkK,eAIVrZ,KAAKqY,iBAGP1U,WAAY,SAAU2V,EAAYC,GAChCvZ,KAAKuQ,YAAY+I,GAAY3V,WAAW4V,IAG1C1V,SAAU,SAAUyV,EAAYC,GAC9BvZ,KAAKuQ,YAAY+I,GAAYzV,SAAS0V,IAGxCrB,WAAY,SAAUsB,EAAGC,GAClBzZ,KAAK0G,OACV1G,KAAK0G,KAAKgI,QAAU8K,EACpBxZ,KAAK0G,KAAKiI,QAAU8K,IAGtBtB,eAAgB,WACTnY,KAAK0G,OACV1G,KAAK0G,KAAK+H,aAAc,IAG1B2J,aAAc,WACPpY,KAAK0G,OACV1G,KAAK0G,KAAK+H,aAAc,IAG1BiL,OAAQ,WACN,IAAIC,GAAO,IAAIC,KACXC,EAAM,KAMV,OALI7Z,KAAKuY,cACPsB,EAAM7Z,KAAKqY,gBAAkBsB,EAAM3Z,KAAKuY,aAAe,MAEzDvY,KAAKqY,cAAgB,EACrBrY,KAAKuY,YAAcoB,EACZE,GAGTC,UAAW,WACY,OAAjB9Z,KAAKsY,SACPtY,KAAKwQ,QAAQxQ,KAAKsY,UAMtB9H,QAAS,SAAUuJ,GAEjB/Z,KAAKyQ,IAAM,IAAI4G,EAAIrX,MACnBA,KAAKyQ,IAAI9J,KAAKoT,GAEd/Z,KAAK0F,QACL1F,KAAK0G,KAAO1G,KAAKyQ,IAAIuJ,eACrBha,KAAK0G,KAAK8J,UACVxQ,KAAKmP,IAAIyE,aAAa5T,KAAKyQ,IAAIwJ,oBAC/Bja,KAAKsY,QAAUyB,GAGjBG,aAAc,SAAUC,GACtBna,KAAK8O,KAAK2I,mBAAqB0C,EAC/Bna,KAAK4X,UAAY,IAAOuC,EACxBna,KAAKuP,KAAK6K,cAAcpa,KAAK8O,KAAK6I,YAAY,IAGhDrP,OAAQ,WACN,MAAO,CACLgQ,QAAStY,KAAKsY,QACdzJ,IAAK7O,KAAK6O,IAAIvG,SACd5B,KAAM1G,KAAK0G,KAAK4B,SAChB6G,IAAKnP,KAAKmP,IAAI7G,WAIlBC,SAAU,SAAUC,GAClBxI,KAAK0F,QACL1F,KAAKsY,QAAU9P,EAAE8P,QACjBtY,KAAK6O,IAAItG,SAASC,EAAEqG,KACpB7O,KAAK0G,KAAK6B,SAASC,EAAE9B,MACrB1G,KAAKmP,IAAI5G,SAASC,EAAE2G,OAIxB1S,EAAOC,QAAU0R,G,kBClNjB,IAGIgJ,EAAO,SAAUnT,GACnBjE,KAAKiE,IAAMA,EAEXjE,KAAKqa,QAAU,IAAIC,EAActa,MAAM,GACvCA,KAAKua,QAAU,IAAID,EAActa,MAAM,GACvCA,KAAKwa,SAAW,IAAIC,EAAgBza,MACpCA,KAAK0a,MAAQ,IAAIC,EAAa3a,MAC9BA,KAAK4a,IAAM,IAAIC,EAAU7a,MAEzBA,KAAK8a,gBAAkB,KACvB9a,KAAK+a,mBAAqB,EAC1B/a,KAAKgb,YAAc,KACnBhb,KAAKib,mBAAqB,KAE1Bjb,KAAK2X,WAAa,MAElB3X,KAAKkb,aAAe,KACpBlb,KAAKmb,cAAgB,KACrBnb,KAAKob,sBAAwB,KAC7Bpb,KAAKqb,aAAe,KACpBrb,KAAKsb,UAAY,KAEjBtb,KAAKub,iBAAkB,EACvBvb,KAAKwb,eAAiB,KACtBxb,KAAKyb,cAAgB,KACrBzb,KAAK0b,gBAAiB,EACtB1b,KAAK2b,cAAe,EACpB3b,KAAK4b,iBAAkB,EAEvB5b,KAAK6b,mBAAqB,KAC1B7b,KAAK8b,oBAAsB,KAC3B9b,KAAK+b,cAAgB,KACrB/b,KAAKgc,YAAc,KACnBhc,KAAK4X,UAAY,KACjB5X,KAAKic,eAAiB,KACtBjc,KAAKkc,YAAc,KACnBlc,KAAKmc,SAAW,EAEhBnc,KAAKoc,WAAa,KAClBpc,KAAKqc,WAAa,KAClBrc,KAAKsc,YAAc,KACnBtc,KAAKuc,OAAS,KACdvc,KAAKwc,SAAW,KAGhBxc,KAAKyc,YAAc,EACnBzc,KAAK0c,YAAc,EACnB1c,KAAK2c,UAAY,EACjB3c,KAAK4c,UAAY,EAGjB5c,KAAK6c,SAAW,EAChB7c,KAAK8c,QAAU,EAGf9c,KAAK+c,aAAe,IAGpB/c,KAAKgd,kBAAoB,KACzBhd,KAAKid,kBAAoB,KACzBjd,KAAKkd,mBAAqB,KAC1Bld,KAAKmd,gBAAkB,KACvBnd,KAAKod,cAAgB,KACrBpd,KAAKqd,kBAAoB,KACzBrd,KAAKsd,kBAAoB,KACzBtd,KAAKud,mBAAqB,KAC1Bvd,KAAKwd,gBAAkB,KACvBxd,KAAKyd,cAAgB,KAErBzd,KAAK0d,YAAc,KAEnB1d,KAAK2d,UAAY,KACjB3d,KAAK4d,UAAY,KAGjB5d,KAAK6d,QAAU,CAAC,GAAI,IAAK,IAAK,IAAK,KACnC7d,KAAK8d,WAAW9d,KAAK6d,SAGrB7d,KAAK+d,mBACL/d,KAAKge,yBACLhe,KAAKie,4BACLje,KAAKke,gBAGL,IAAK,IAAIhb,EAAI,EAAGA,EAAI,GAAMA,IACd,KAANA,EACFlD,KAAKqQ,SAAS,MAAQ,IAEtBrQ,KAAKqQ,SAAS,MAASnN,EAAG,GAI9BlD,KAAK0F,SAGP0R,EAAKlZ,UAAY,CACfwH,MAAO,WACL1F,KAAK2X,WAAa3X,KAAKiE,IAAI6K,KAAK6I,WAChC3X,KAAKic,eAAiB/J,KAAKC,MACxB,WAAyBnS,KAAKiE,IAAI6K,KAAK2I,oBACnB,GAAlBzX,KAAK2X,aAGV3X,KAAK4X,UAAY1F,KAAKC,MACnB,MAAUnS,KAAKiE,IAAI6K,KAAK2I,mBAAsB,IAGjDzX,KAAKgc,YAAc,EAEnBhc,KAAKme,oBAAoB,GACzBne,KAAK6b,mBAAqB,EAC1B7b,KAAK8b,oBAAsB,EAC3B9b,KAAK+b,cAAgB,EACrB/b,KAAKkc,YAAc,EACnBlc,KAAKgb,YAAc,KACnBhb,KAAKub,iBAAkB,EACvBvb,KAAK4b,iBAAkB,EAEvB5b,KAAKoe,eAELpe,KAAKqa,QAAQ3U,QACb1F,KAAKua,QAAQ7U,QACb1F,KAAKwa,SAAS9U,QACd1F,KAAK0a,MAAMhV,QACX1F,KAAK4a,IAAIlV,QAET1F,KAAKwc,SAAW,EAChBxc,KAAKoc,WAAa,EAClBpc,KAAKqc,WAAa,EAClBrc,KAAKsc,YAAc,EACnBtc,KAAKuc,OAAS,EAEdvc,KAAKub,iBAAkB,EACvBvb,KAAK+a,mBAAqB,EAE1B/a,KAAKib,mBAAqB,IAC1Bjb,KAAK0b,gBAAiB,EACtB1b,KAAKyc,YAAc,EACnBzc,KAAK0c,YAAc,EACnB1c,KAAK2c,UAAY,EACjB3c,KAAK4c,UAAY,EAEjB5c,KAAK2d,WAAa,IAClB3d,KAAK4d,UAAY,KAInBpO,QAAS,SAAUZ,GAEjB,IAAI+E,EAAM,EAYV,OAXAA,GAAO3T,KAAKqa,QAAQgE,kBACpB1K,GAAO3T,KAAKua,QAAQ8D,mBAAqB,EACzC1K,GAAO3T,KAAKwa,SAAS6D,mBAAqB,EAC1C1K,GAAO3T,KAAK0a,MAAM2D,mBAAqB,EACvC1K,GAAO3T,KAAK4a,IAAIyD,mBAAqB,EACrC1K,IAAQ3T,KAAKwb,gBAAkBxb,KAAKub,gBAAkB,EAAI,IAAM,EAChE5H,GAAO3T,KAAK4a,IAAI0D,gBAAkB,EAElCte,KAAKwb,gBAAiB,EACtBxb,KAAK4a,IAAI2D,cAAe,EAEX,MAAN5K,GAGTtD,SAAU,SAAUzB,EAAShH,GACvBgH,GAAW,OAAUA,EAAU,MAEjC5O,KAAKqa,QAAQhK,SAASzB,EAAShH,GAEtBgH,GAAW,OAAUA,EAAU,MAExC5O,KAAKua,QAAQlK,SAASzB,EAAShH,GACtBgH,GAAW,OAAUA,EAAU,MAExC5O,KAAKwa,SAASnK,SAASzB,EAAShH,GACvBgH,GAAW,OAAUA,GAAW,MAEzC5O,KAAK0a,MAAMrK,SAASzB,EAAShH,GACR,QAAZgH,GAGY,QAAZA,GAGY,QAAZA,GAGY,QAAZA,EAPT5O,KAAK4a,IAAIvK,SAASzB,EAAShH,GAUN,QAAZgH,GAET5O,KAAKme,oBAAoBvW,GAEX,IAAVA,GAAe5H,KAAKgb,YAAc,IAEpChb,KAAK4b,iBAAkB,GAIzB5b,KAAK4a,IAAIvK,SAASzB,EAAShH,IACN,QAAZgH,IAET5O,KAAK+b,cAAiBnU,GAAS,EAAK,EACpC5H,KAAK6b,mBAAqB,EAC1B7b,KAAKwb,gBAAiB,EAGpBxb,KAAKub,gBADsB,IAAvB3T,GAAS,EAAK,GAMO,IAAvB5H,KAAK+b,eAEP/b,KAAK+a,mBAAqB,EAC1B/a,KAAK8b,oBAAsB,IAG3B9b,KAAK+a,mBAAqB,EAC1B/a,KAAK8b,oBAAsB,EAC3B9b,KAAKwe,sBAKXJ,aAAc,WACe,IAAvBpe,KAAK+b,cACP/b,KAAK8b,oBAAsB,EAE3B9b,KAAK8b,oBAAsB,GAS/BqC,oBAAqB,SAAUvW,GAC7B5H,KAAKib,mBAA6B,MAARrT,EAC1B5H,KAAKqa,QAAQoE,WAA2B,IAAP,EAAR7W,IACzB5H,KAAKua,QAAQkE,WAA2B,IAAP,EAAR7W,IACzB5H,KAAKwa,SAASiE,WAA2B,IAAP,EAAR7W,IAC1B5H,KAAK0a,MAAM+D,WAA2B,IAAP,EAAR7W,IACvB5H,KAAK4a,IAAI6D,WAA4B,IAAR,GAAR7W,KAOvB8Q,kBAAmB,SAAUgG,GAC3B,GAAI1e,KAAKgb,YAAc,GACjBhb,KAAK4b,gBAKP,OAJA5b,KAAKgb,aAAe0D,OAChB1e,KAAKgb,aAAe,IACtBhb,KAAK4b,iBAAkB,IAO7B8C,GAAW1e,KAAK0d,YAChB,IAAIiB,EAAY3e,KAAKic,eAAiBjc,KAAKgc,YACvC0C,GAAW,GAAKC,GAClB3e,KAAK0d,aAAgBgB,GAAW,IAAMC,GAAc,GACpDD,GAAW1e,KAAK0d,aAEhB1d,KAAK0d,YAAc,EAGrB,IAAI9C,EAAM5a,KAAK4a,IACXJ,EAAWxa,KAAKwa,SAChBH,EAAUra,KAAKqa,QACfE,EAAUva,KAAKua,QACfG,EAAQ1a,KAAK0a,MAGjB,GAAIE,EAAIgE,UAEN,IADAhE,EAAIiE,cAAgBH,GAAW,EACxB9D,EAAIiE,cAAgB,GAAKjE,EAAIkE,aAAe,GACjDlE,EAAIiE,cAAgBjE,EAAIkE,aACxBlE,EAAImE,WAKR,GAAIvE,EAASwE,aAAe,EAE1B,IADAxE,EAASyE,gBAAkBP,EACpBlE,EAASyE,gBAAkB,GAChCzE,EAASyE,gBAAkBzE,EAASwE,aAAe,EAC/CxE,EAAS0E,cAAgB,GAAK1E,EAAS2E,cAAgB,IACzD3E,EAAS4E,kBACT5E,EAAS4E,iBAAmB,GAExB5E,EAASoE,YACPpE,EAAS4E,iBAAmB,GAE9B5E,EAAS6E,YAAyC,GAA3B7E,EAAS4E,gBAGhC5E,EAAS6E,YAAc,IAAkC,GAA3B7E,EAAS4E,iBAEzC5E,EAAS6E,cAAgB,IAOjChF,EAAQ4E,gBAAkBP,EACtBrE,EAAQ4E,gBAAkB,IAC5B5E,EAAQ4E,gBAAmB5E,EAAQ2E,aAAe,GAAM,EAExD3E,EAAQiF,gBACRjF,EAAQiF,eAAiB,EACzBjF,EAAQkF,qBAIVhF,EAAQ0E,gBAAkBP,EACtBnE,EAAQ0E,gBAAkB,IAC5B1E,EAAQ0E,gBAAmB1E,EAAQyE,aAAe,GAAM,EAExDzE,EAAQ+E,gBACR/E,EAAQ+E,eAAiB,EACzB/E,EAAQgF,qBAIV,IAAIC,EAAQd,EACZ,GAAIhE,EAAMuE,eAAiBO,EAAQ,EAEjC9E,EAAMuE,gBAAkBO,EACxB9E,EAAM8B,UAAYgD,EAClB9E,EAAM+E,UAAYD,EAAQ9E,EAAM2E,iBAGhC,KAAOG,KAAU,KACT9E,EAAMuE,gBAAkB,GAAKvE,EAAMsE,aAAe,IAEtDtE,EAAMgF,WAAa,EACnBhF,EAAM/G,IAGJ,OAFE+G,EAAMgF,WAAkC,IAArBhF,EAAMiF,WAAmB,EAAI,GAChDjF,EAAMgF,UAEQ,IAAdhF,EAAM/G,KAER+G,EAAMgF,UAAY,EAClBhF,EAAMkF,UAAY,EAClBlF,EAAM2E,YAAc,IAGpB3E,EAAMkF,UAAY,EACdlF,EAAMkE,WAAalE,EAAMyE,cAAgB,EAC3CzE,EAAM2E,YAAc3E,EAAMqC,aAE1BrC,EAAM2E,YAAc,GAIxB3E,EAAMuE,gBAAkBvE,EAAMsE,cAGhCtE,EAAM+E,UAAY/E,EAAM2E,YACxB3E,EAAM8B,WAKNxc,KAAKub,iBAAmBvb,KAAKwb,gBAC/Bxb,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIlJ,YAIvC3F,KAAK6b,oBAAsB6C,GAAW,EAClC1e,KAAK6b,oBAAsB7b,KAAK4X,YAElC5X,KAAK6b,oBAAsB7b,KAAK4X,UAChC5X,KAAKwe,oBAIPxe,KAAK6f,UAAUnB,GAGf1e,KAAKgc,aAAe0C,GAAW,GAC3B1e,KAAKgc,aAAehc,KAAKic,iBAE3Bjc,KAAK8f,SACL9f,KAAKgc,aAAehc,KAAKic,iBAI7B4D,UAAW,SAAU5X,GAEfjI,KAAKwa,SAASuF,kBAChB/f,KAAKmc,SAAWjK,KAAKC,OAClBnS,KAAKwa,SAASyE,gBAAkB,IAAMjf,KAAKwa,SAASwE,aAAe,IAElEhf,KAAKmc,SAAW,KAClBnc,KAAKmc,SAAW,IAEdnc,KAAKwa,SAAS4E,iBAAmB,KACnCpf,KAAKmc,SAAW,GAAKnc,KAAKmc,UAI5Bnc,KAAKmc,UAAYnc,KAAKwa,SAAS6E,aAIlB,IAAXpX,GACFjI,KAAKsc,aAAetc,KAAKmc,UAAY,EACrCnc,KAAKuc,QAAUvc,KAAK4a,IAAIkF,QAAU,EAClC9f,KAAKoc,YAAcpc,KAAKqa,QAAQgF,aAAe,EAC/Crf,KAAKqc,YAAcrc,KAAKua,QAAQ8E,aAAe,EAC/Crf,KAAKwc,UAAY,GACG,IAAXvU,GACTjI,KAAKsc,aAAetc,KAAKmc,UAAY,EACrCnc,KAAKuc,QAAUvc,KAAK4a,IAAIkF,QAAU,EAClC9f,KAAKoc,YAAcpc,KAAKqa,QAAQgF,aAAe,EAC/Crf,KAAKqc,YAAcrc,KAAKua,QAAQ8E,aAAe,EAC/Crf,KAAKwc,UAAY,IAEjBxc,KAAKsc,aAAerU,EAASjI,KAAKmc,SAClCnc,KAAKuc,QAAUtU,EAASjI,KAAK4a,IAAIkF,OACjC9f,KAAKoc,YAAcnU,EAASjI,KAAKqa,QAAQgF,YACzCrf,KAAKqc,YAAcpU,EAASjI,KAAKua,QAAQ8E,YACzCrf,KAAKwc,UAAYvU,IAIrBuW,iBAAkB,WAChBxe,KAAK8b,sBACD9b,KAAK8b,qBAAuB9b,KAAK+a,qBACnC/a,KAAK8b,oBAAsB,GAGI,IAA7B9b,KAAK8b,qBAA0D,IAA7B9b,KAAK8b,sBAEzC9b,KAAKwa,SAASwF,qBACdhgB,KAAKqa,QAAQ2F,qBACbhgB,KAAKua,QAAQyF,qBACbhgB,KAAK0a,MAAMsF,qBACXhgB,KAAKqa,QAAQ4F,aACbjgB,KAAKua,QAAQ0F,cAGXjgB,KAAK8b,qBAAuB,GAAK9b,KAAK8b,oBAAsB,IAE9D9b,KAAKqa,QAAQ6F,gBACblgB,KAAKua,QAAQ2F,gBACblgB,KAAK0a,MAAMwF,gBACXlgB,KAAKwa,SAAS2F,sBAGiB,IAA7BngB,KAAK8b,qBAAoD,IAAvB9b,KAAK+b,gBAEzC/b,KAAKwb,gBAAiB,IAO1BsE,OAAQ,WACN,IAAIM,EAAUC,EAEVrgB,KAAKwc,SAAW,GAClBxc,KAAKoc,aAAe,EACpBpc,KAAKoc,WAAalK,KAAKC,MAAMnS,KAAKoc,WAAapc,KAAKwc,UAEpDxc,KAAKqc,aAAe,EACpBrc,KAAKqc,WAAanK,KAAKC,MAAMnS,KAAKqc,WAAarc,KAAKwc,UAEpDxc,KAAKsc,YAAcpK,KAAKC,MAAMnS,KAAKsc,YAActc,KAAKwc,UAEtDxc,KAAKuc,SAAW,EAChBvc,KAAKuc,OAASrK,KAAKC,MAAMnS,KAAKuc,OAASvc,KAAKwc,UAE5Cxc,KAAKwc,SAAW,IAEhBxc,KAAKoc,WAAapc,KAAKqa,QAAQgF,aAAe,EAC9Crf,KAAKqc,WAAarc,KAAKua,QAAQ8E,aAAe,EAC9Crf,KAAKsc,YAActc,KAAKwa,SAAS6E,YACjCrf,KAAKuc,OAASvc,KAAK4a,IAAIkF,QAAU,GAGnC,IAAIQ,EAAWpO,KAAKC,OAAOnS,KAAK0a,MAAM+E,UAAY,GAAKzf,KAAK0a,MAAM8B,UAClExc,KAAK0a,MAAM+E,SAAWa,GAAY,EAClCtgB,KAAK0a,MAAM8B,SAAW,EAKtB4D,EACGpgB,KAAKoc,WAAapc,KAAKgd,kBACtBhd,KAAKqc,WAAarc,KAAKid,mBACzB,EACFoD,EACG,EAAIrgB,KAAKsc,YAActc,KAAKkd,oBAC1BoD,GAAY,GAAKtgB,KAAKmd,gBACvBnd,KAAKuc,OAASvc,KAAKod,eACrB,EACEgD,GAAYpgB,KAAKqb,aAAa7Y,SAChC4d,EAAWpgB,KAAKqb,aAAa7Y,OAAS,GAEpC6d,GAAargB,KAAKsb,UAAU9Y,SAC9B6d,EAAYrgB,KAAKsb,UAAU9Y,OAAS,GAEtC,IAAI+d,EACFvgB,KAAKqb,aAAa+E,GAAYpgB,KAAKsb,UAAU+E,GAAargB,KAAK8c,QAGjEsD,EACGpgB,KAAKoc,WAAapc,KAAKqd,kBACtBrd,KAAKqc,WAAarc,KAAKsd,mBACzB,EACF+C,EACG,EAAIrgB,KAAKsc,YAActc,KAAKud,oBAC1B+C,GAAY,GAAKtgB,KAAKwd,gBACvBxd,KAAKuc,OAASvc,KAAKyd,eACrB,EACE2C,GAAYpgB,KAAKqb,aAAa7Y,SAChC4d,EAAWpgB,KAAKqb,aAAa7Y,OAAS,GAEpC6d,GAAargB,KAAKsb,UAAU9Y,SAC9B6d,EAAYrgB,KAAKsb,UAAU9Y,OAAS,GAEtC,IAAIge,EACFxgB,KAAKqb,aAAa+E,GAAYpgB,KAAKsb,UAAU+E,GAAargB,KAAK8c,QAG7D2D,EAAWF,EAAevgB,KAAKyc,YACnCzc,KAAKyc,aAAegE,EACpBzgB,KAAK2c,WAAa8D,GAAYzgB,KAAK2c,WAAa,IAChD4D,EAAevgB,KAAK2c,UAGpB,IAAI+D,EAAWF,EAAexgB,KAAK0c,YACnC1c,KAAK0c,aAAegE,EACpB1gB,KAAK4c,WAAa8D,GAAY1gB,KAAK4c,WAAa,IAChD4D,EAAexgB,KAAK4c,UAGhB2D,EAAevgB,KAAK2d,YACtB3d,KAAK2d,UAAY4C,GAEfA,EAAevgB,KAAK4d,YACtB5d,KAAK4d,UAAY2C,GAGfvgB,KAAKiE,IAAI6K,KAAKyI,eAChBvX,KAAKiE,IAAI6K,KAAKyI,cAAcgJ,EAAe,MAAOC,EAAe,OAInExgB,KAAKoc,WAAa,EAClBpc,KAAKqc,WAAa,EAClBrc,KAAKsc,YAAc,EACnBtc,KAAKuc,OAAS,GAGhBoE,aAAc,SAAU/Y,GACtB,OAAO5H,KAAKkb,aAAatT,GAAS,IAGpCgZ,gBAAiB,SAAUhZ,GACzB,OAAIA,GAAS,GAAKA,EAAQ,GACjB5H,KAAKmb,cAAcvT,GAErB,GAGTiZ,mBAAoB,SAAUjZ,GAC5B,OAAIA,GAAS,GAAKA,EAAQ,GACjB5H,KAAKob,sBAAsBxT,GAE7B,GAGTkW,WAAY,SAAUgD,GACpB,IAAK,IAAI5d,EAAI,EAAGA,EAAI,EAAGA,IACrBlD,KAAK6d,QAAQ3a,GAAK4d,EAAI5d,GAExBlD,KAAK+gB,mBAGPC,gBAAiB,SAAUpZ,GACrBA,EAAQ,IACVA,EAAQ,GAENA,EAAQ,MACVA,EAAQ,KAEV5H,KAAK+c,aAAenV,EACpB5H,KAAK+gB,mBAGPA,gBAAiB,WACf/gB,KAAKgd,kBAAqBhd,KAAK6d,QAAQ,GAAK7d,KAAK+c,cAAiB,EAClE/c,KAAKid,kBAAqBjd,KAAK6d,QAAQ,GAAK7d,KAAK+c,cAAiB,EAClE/c,KAAKkd,mBAAsBld,KAAK6d,QAAQ,GAAK7d,KAAK+c,cAAiB,EACnE/c,KAAKmd,gBAAmBnd,KAAK6d,QAAQ,GAAK7d,KAAK+c,cAAiB,EAChE/c,KAAKod,cAAiBpd,KAAK6d,QAAQ,GAAK7d,KAAK+c,cAAiB,EAE9D/c,KAAKqd,kBAAoBrd,KAAK+c,aAAe/c,KAAKgd,kBAClDhd,KAAKsd,kBAAoBtd,KAAK+c,aAAe/c,KAAKid,kBAClDjd,KAAKud,mBAAqBvd,KAAK+c,aAAe/c,KAAKkd,mBACnDld,KAAKwd,gBAAkBxd,KAAK+c,aAAe/c,KAAKmd,gBAChDnd,KAAKyd,cAAgBzd,KAAK+c,aAAe/c,KAAKod,eAGhDW,iBAAkB,WAEhB/d,KAAKkb,aAAe,CACZ,GAAM,IACN,GAAM,EACN,GAAM,EACN,GAAM,EACN,IAAM,EACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,IAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,KAIhB8C,uBAAwB,WACtBhe,KAAKmb,cAAgB,IAAIlY,MAAM,IAE/BjD,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,GAAO,KAC1Bnb,KAAKmb,cAAc,IAAO,KAC1Bnb,KAAKmb,cAAc,IAAO,KAC1Bnb,KAAKmb,cAAc,IAAO,IAC1Bnb,KAAKmb,cAAc,IAAO,IAC1Bnb,KAAKmb,cAAc,IAAO,IAC1Bnb,KAAKmb,cAAc,IAAO,KAI5B8C,0BAA2B,WACzBje,KAAKob,sBAAwB,IAAInY,MAAM,IAEvCjD,KAAKob,sBAAsB,GAAO,EAClCpb,KAAKob,sBAAsB,GAAO,EAClCpb,KAAKob,sBAAsB,GAAO,GAClCpb,KAAKob,sBAAsB,GAAO,GAClCpb,KAAKob,sBAAsB,GAAO,GAClCpb,KAAKob,sBAAsB,GAAO,GAClCpb,KAAKob,sBAAsB,GAAO,IAClCpb,KAAKob,sBAAsB,GAAO,IAClCpb,KAAKob,sBAAsB,GAAO,IAClCpb,KAAKob,sBAAsB,GAAO,IAClCpb,KAAKob,sBAAsB,IAAO,IAClCpb,KAAKob,sBAAsB,IAAO,IAClCpb,KAAKob,sBAAsB,IAAO,IAClCpb,KAAKob,sBAAsB,IAAO,KAClCpb,KAAKob,sBAAsB,IAAO,KAClCpb,KAAKob,sBAAsB,IAAO,MAGpC8C,cAAe,WACb,IAAItW,EAAOqZ,EAAM/d,EACbge,EAAU,EACVC,EAAU,EAKd,IAHAnhB,KAAKqb,aAAe,IAAIpY,MAAM,KAC9BjD,KAAKsb,UAAY,IAAIrY,MAAM,MAEtBC,EAAI,EAAGA,EAAI,IAASA,IACvB0E,EAAQ,OAAS,MAAU1E,EAAI,IAAQ,KACvC0E,GAAS,OACTA,GAAS,IACTqZ,EAAO/O,KAAKC,MAAMvK,GAElB5H,KAAKqb,aAAanY,GAAK+d,EACnBA,EAAOC,IACTA,EAAUD,GAId,IAAK/d,EAAI,EAAGA,EAAI,KAAUA,IACxB0E,EAAQ,QAAU,OAAW1E,EAAI,IAAQ,KACzC0E,GAAS,OACTA,GAAS,IACTqZ,EAAO/O,KAAKC,MAAMvK,GAElB5H,KAAKsb,UAAUpY,GAAK+d,EAChBA,EAAOE,IACTA,EAAUF,GAIdjhB,KAAK6c,SAAWqE,EAAUC,EAC1BnhB,KAAK8c,QAAU9c,KAAK6c,SAAW,IAInC,IAAIhC,EAAY,SAAUtL,GACxBvP,KAAKuP,KAAOA,EAEZvP,KAAKohB,YAAc,EACnBphB,KAAKqhB,UAAY,EACjBrhB,KAAKshB,SAAW,EAEhBthB,KAAK4e,UAAY,KACjB5e,KAAKuhB,UAAY,KACjBvhB,KAAKue,cAAe,EAEpBve,KAAKwhB,SAAW,KAChBxhB,KAAK8e,aAAe,KACpB9e,KAAKyhB,WAAa,KAClBzhB,KAAK0hB,aAAe,KACpB1hB,KAAK2hB,iBAAmB,KACxB3hB,KAAK4hB,YAAc,KACnB5hB,KAAK6hB,WAAa,KAClB7hB,KAAK8hB,kBAAoB,KACzB9hB,KAAK6e,aAAe,KACpB7e,KAAK+hB,QAAU,KACf/hB,KAAKgiB,QAAU,KACfhiB,KAAK8f,OAAS,KACd9f,KAAKiiB,OAAS,KACdjiB,KAAK+Z,KAAO,KAEZ/Z,KAAK0F,SAGPmV,EAAU3c,UAAY,CACpB6gB,SAAU,WAEJ/e,KAAKuhB,YACiB,IAAP,EAAZvhB,KAAK+Z,MAEJ/Z,KAAK0hB,aAAe,GACtB1hB,KAAK0hB,eAIH1hB,KAAK0hB,aAAe,IACtB1hB,KAAK0hB,eAKT1hB,KAAK8f,OAAS9f,KAAK4e,WAAa5e,KAAK0hB,cAAgB,GAAK1hB,KAAKiiB,OAAS,EAGxEjiB,KAAK+Z,OAAS,GAGhB/Z,KAAKyhB,aACDzhB,KAAKyhB,YAAc,IAErBzhB,KAAKuhB,WAAY,EACjBvhB,KAAKkiB,cACLliB,KAAKyhB,WAAa,GAGhBzhB,KAAKue,cACPve,KAAKuP,KAAKtL,IAAI4K,IAAInH,WAAW1H,KAAKuP,KAAKtL,IAAI4K,IAAIlJ,aAInDuc,YAAa,WACoB,IAA3BliB,KAAK8hB,mBAA2B9hB,KAAKwhB,WAAaxhB,KAAKqhB,YAEzDrhB,KAAK4hB,YAAc5hB,KAAK2hB,iBACxB3hB,KAAK8hB,kBAAoB9hB,KAAK6hB,YAG5B7hB,KAAK8hB,kBAAoB,IAE3B9hB,KAAKmiB,aAE0B,IAA3BniB,KAAK8hB,mBAEH9hB,KAAKwhB,WAAaxhB,KAAKshB,WAEzBthB,KAAKue,cAAe,KAM5B4D,WAAY,WAEVniB,KAAK+Z,KAAO/Z,KAAKuP,KAAKtL,IAAIyC,KAAKC,KAAK3G,KAAK4hB,aACzC5hB,KAAKuP,KAAKtL,IAAI4K,IAAI7G,WAAW,GAE7BhI,KAAK8hB,oBACL9hB,KAAK4hB,cACD5hB,KAAK4hB,YAAc,QACrB5hB,KAAK4hB,YAAc,OAGrB5hB,KAAKuhB,WAAY,GAGnBlR,SAAU,SAAUzB,EAAShH,GACX,QAAZgH,GAEEhH,GAAS,GAAM,EACjB5H,KAAKwhB,SAAWxhB,KAAKohB,YACW,IAArBxZ,GAAS,EAAK,GACzB5H,KAAKwhB,SAAWxhB,KAAKqhB,UACZzZ,GAAS,GAAM,IACxB5H,KAAKwhB,SAAWxhB,KAAKshB,UAGA,IAAV,IAAR1Z,KACH5H,KAAKue,cAAe,GAGtBve,KAAK8e,aAAe9e,KAAKuP,KAAKqR,gBAAwB,GAARhZ,IACzB,QAAZgH,GAET5O,KAAK0hB,aAAgB9Z,GAAS,EAAK,GACnC5H,KAAKiiB,OAAiB,EAARra,EACd5H,KAAK8f,QAAU9f,KAAK0hB,cAAgB,GAAK1hB,KAAKiiB,QACzB,QAAZrT,GAET5O,KAAK2hB,iBAAoB/Z,GAAS,EAAK,MACvC5H,KAAK4hB,YAAc5hB,KAAK2hB,iBACxB3hB,KAAK+hB,QAAUna,GACM,QAAZgH,GAET5O,KAAK6hB,WAA4B,GAAdja,GAAS,GAC5B5H,KAAK8hB,kBAAoB9hB,KAAK6hB,WAC9B7hB,KAAKgiB,QAAUpa,GACM,QAAZgH,IAEkB,IAArBhH,GAAS,EAAK,GAElB5H,KAAK8hB,kBAAoB,GAGzB9hB,KAAK4hB,YAAc5hB,KAAK2hB,iBACxB3hB,KAAK8hB,kBAAoB9hB,KAAK6hB,YAEhC7hB,KAAKue,cAAe,IAIxBE,WAAY,SAAU7W,IACf5H,KAAK4e,WAAahX,IACrB5H,KAAK8hB,kBAAoB9hB,KAAK6hB,YAEhC7hB,KAAK4e,UAAYhX,GAGnByW,gBAAiB,WACf,OAAkC,IAA3Bre,KAAK8hB,mBAA4B9hB,KAAK4e,UAAgB,EAAJ,GAG3DN,aAAc,WACZ,OAAOte,KAAKue,aAAe,EAAI,GAGjC7Y,MAAO,WACL1F,KAAK4e,WAAY,EACjB5e,KAAKue,cAAe,EACpBve,KAAKwhB,SAAWxhB,KAAKohB,YACrBphB,KAAK8e,aAAe,EACpB9e,KAAKyhB,WAAa,EAClBzhB,KAAK0hB,aAAe,EACpB1hB,KAAK2hB,iBAAmB,EACxB3hB,KAAK4hB,YAAc,EACnB5hB,KAAK6hB,WAAa,EAClB7hB,KAAK8hB,kBAAoB,EACzB9hB,KAAK8f,OAAS,EACd9f,KAAKiiB,OAAS,EACdjiB,KAAK6e,aAAe,EACpB7e,KAAK+hB,QAAU,EACf/hB,KAAKgiB,QAAU,EACfhiB,KAAK+Z,KAAO,IAIhB,IAAIY,EAAe,SAAUpL,GAC3BvP,KAAKuP,KAAOA,EAEZvP,KAAK4e,UAAY,KACjB5e,KAAKoiB,gBAAkB,KACvBpiB,KAAKqiB,mBAAqB,KAC1BriB,KAAKsiB,oBAAsB,KAC3BtiB,KAAKuiB,SAAW,KAChBviB,KAAKwiB,SAAW,KAEhBxiB,KAAKmf,cAAgB,KACrBnf,KAAKif,eAAiB,KACtBjf,KAAKgf,aAAe,KACpBhf,KAAKyiB,aAAe,KACpBziB,KAAK0iB,gBAAkB,KACvB1iB,KAAK2iB,UAAY,KACjB3iB,KAAK+c,aAAe,KACpB/c,KAAK0f,SAAW,MAChB1f,KAAK4f,UAAY,KACjB5f,KAAK2f,WAAa,KAClB3f,KAAKqf,YAAc,KACnBrf,KAAKyf,SAAW,EAChBzf,KAAKwc,SAAW,EAChBxc,KAAK2T,IAAM,KAEX3T,KAAK0F,SAGPiV,EAAazc,UAAY,CACvBwH,MAAO,WACL1F,KAAKif,eAAiB,EACtBjf,KAAKgf,aAAe,EACpBhf,KAAK4e,WAAY,EACjB5e,KAAKmf,cAAgB,EACrBnf,KAAKsiB,qBAAsB,EAC3BtiB,KAAKoiB,iBAAkB,EACvBpiB,KAAKqiB,oBAAqB,EAC1BriB,KAAKwiB,UAAW,EAChBxiB,KAAKyiB,aAAe,EACpBziB,KAAK0iB,gBAAkB,EACvB1iB,KAAK2iB,UAAY,EACjB3iB,KAAK+c,aAAe,EACpB/c,KAAK0f,SAAW,EAChB1f,KAAK4f,UAAY,EACjB5f,KAAK2f,WAAa,EAClB3f,KAAKqf,YAAc,EACnBrf,KAAK2T,IAAM,GAGbqM,mBAAoB,WACdhgB,KAAKsiB,qBAAuBtiB,KAAKmf,cAAgB,IACnDnf,KAAKmf,gBACsB,IAAvBnf,KAAKmf,eACPnf,KAAKuf,sBAKXW,cAAe,WACTlgB,KAAKuiB,UAEPviB,KAAKuiB,UAAW,EAChBviB,KAAK0iB,gBAAkB1iB,KAAKyiB,aAAe,EAC3CziB,KAAK2iB,UAAY,MACN3iB,KAAK0iB,iBAAmB,IAEnC1iB,KAAK0iB,gBAAkB1iB,KAAKyiB,aAAe,EACvCziB,KAAK2iB,UAAY,EACnB3iB,KAAK2iB,YAEL3iB,KAAK2iB,UAAY3iB,KAAKqiB,mBAAqB,GAAM,GAGjDriB,KAAKoiB,gBACPpiB,KAAK+c,aAAe/c,KAAKyiB,aAEzBziB,KAAK+c,aAAe/c,KAAK2iB,UAE3B3iB,KAAKuf,qBAGPA,kBAAmB,WACbvf,KAAK4e,WAAa5e,KAAKmf,cAAgB,IACzCnf,KAAKqf,YAAcrf,KAAK4f,UAAY5f,KAAK+c,eAI7C1M,SAAU,SAAUzB,EAAShH,GACX,QAAZgH,GAEF5O,KAAKoiB,gBAAqC,IAAV,GAARxa,GACxB5H,KAAKyiB,aAAuB,GAAR7a,EACpB5H,KAAKqiB,mBAAwC,IAAV,GAARza,GAC3B5H,KAAKsiB,oBAAyC,IAAV,GAAR1a,GACxB5H,KAAKoiB,gBACPpiB,KAAK+c,aAAe/c,KAAKyiB,aAEzBziB,KAAK+c,aAAe/c,KAAK2iB,WAEN,QAAZ/T,GAET5O,KAAKgf,aAAehf,KAAKuP,KAAKsR,mBAA2B,GAARjZ,GACjD5H,KAAK2f,WAAa/X,GAAS,GACN,QAAZgH,IAET5O,KAAKmf,cAAgBnf,KAAKuP,KAAKoR,aAAqB,IAAR/Y,GAC5C5H,KAAKuiB,UAAW,IAMpB9D,WAAY,SAAU7W,GACpB5H,KAAK4e,UAAYhX,EACZA,IACH5H,KAAKmf,cAAgB,GAEvBnf,KAAKuf,qBAGPlB,gBAAiB,WACf,OAA8B,IAAvBre,KAAKmf,eAAwBnf,KAAK4e,UAAgB,EAAJ,IAIzD,IAAItE,EAAgB,SAAU/K,EAAM8K,GAClCra,KAAKuP,KAAOA,EAGZvP,KAAK4iB,WAAa,CACX,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACrB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACrB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACrB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG5B5iB,KAAK6iB,UAAY,CACV,GAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACrB,EAAG,GAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACrB,EAAG,EAAG,EAAG,GAAG,EAAG,EAAG,EAAG,GACrB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG5B7iB,KAAK8iB,KAAOzI,EACZra,KAAK4e,UAAY,KACjB5e,KAAKsiB,oBAAsB,KAC3BtiB,KAAK+iB,YAAc,KACnB/iB,KAAKoiB,gBAAkB,KACvBpiB,KAAKqiB,mBAAqB,KAC1BriB,KAAKuiB,SAAW,KAChBviB,KAAKgjB,WAAa,KAClBhjB,KAAKijB,kBAAoB,KAEzBjjB,KAAKif,eAAiB,KACtBjf,KAAKgf,aAAe,KACpBhf,KAAKmf,cAAgB,KACrBnf,KAAKsf,cAAgB,KACrBtf,KAAKkjB,aAAe,KACpBljB,KAAKmjB,gBAAkB,KACvBnjB,KAAKojB,UAAY,KACjBpjB,KAAKqjB,iBAAmB,KACxBrjB,KAAKyiB,aAAe,KACpBziB,KAAK0iB,gBAAkB,KACvB1iB,KAAK2iB,UAAY,KACjB3iB,KAAK+c,aAAe,KACpB/c,KAAKsjB,SAAW,KAChBtjB,KAAKujB,YAAc,KACnBvjB,KAAKqf,YAAc,KACnBrf,KAAKwjB,IAAM,KAEXxjB,KAAK0F,SAGP4U,EAAcpc,UAAY,CACxBwH,MAAO,WACL1F,KAAKif,eAAiB,EACtBjf,KAAKgf,aAAe,EACpBhf,KAAKmf,cAAgB,EACrBnf,KAAKsf,cAAgB,EACrBtf,KAAKkjB,aAAe,EACpBljB,KAAKmjB,gBAAkB,EACvBnjB,KAAKojB,UAAY,EACjBpjB,KAAKqjB,iBAAmB,EACxBrjB,KAAKyiB,aAAe,EACpBziB,KAAK0iB,gBAAkB,EACvB1iB,KAAK2iB,UAAY,EACjB3iB,KAAK+c,aAAe,EACpB/c,KAAKsjB,SAAW,EAChBtjB,KAAKwjB,IAAM,EAEXxjB,KAAK4e,WAAY,EACjB5e,KAAKsiB,qBAAsB,EAC3BtiB,KAAK+iB,aAAc,EACnB/iB,KAAKgjB,YAAa,EAClBhjB,KAAKoiB,iBAAkB,EACvBpiB,KAAKqiB,oBAAqB,GAG5BrC,mBAAoB,WACdhgB,KAAKsiB,qBAAuBtiB,KAAKmf,cAAgB,IACnDnf,KAAKmf,gBACsB,IAAvBnf,KAAKmf,eACPnf,KAAKuf,sBAKXW,cAAe,WACTlgB,KAAKuiB,UAEPviB,KAAKuiB,UAAW,EAChBviB,KAAK0iB,gBAAkB1iB,KAAKyiB,aAAe,EAC3CziB,KAAK2iB,UAAY,MACN3iB,KAAK0iB,iBAAmB,IAEnC1iB,KAAK0iB,gBAAkB1iB,KAAKyiB,aAAe,EACvCziB,KAAK2iB,UAAY,EACnB3iB,KAAK2iB,YAEL3iB,KAAK2iB,UAAY3iB,KAAKqiB,mBAAqB,GAAM,GAIjDriB,KAAKoiB,gBACPpiB,KAAK+c,aAAe/c,KAAKyiB,aAEzBziB,KAAK+c,aAAe/c,KAAK2iB,UAE3B3iB,KAAKuf,qBAGPU,WAAY,aACJjgB,KAAKkjB,cAAgB,IACzBljB,KAAKkjB,aAAeljB,KAAKmjB,gBAAkB,EAEzCnjB,KAAK+iB,aACL/iB,KAAKqjB,iBAAmB,GACxBrjB,KAAKgf,aAAe,IAGpBhf,KAAKgjB,YAAa,EACK,IAAnBhjB,KAAKojB,WACPpjB,KAAKgf,cAAgBhf,KAAKgf,cAAgBhf,KAAKqjB,iBAC3CrjB,KAAKgf,aAAe,OACtBhf,KAAKgf,aAAe,KACpBhf,KAAKgjB,YAAa,IAGpBhjB,KAAKgf,aACHhf,KAAKgf,eACHhf,KAAKgf,cAAgBhf,KAAKqjB,mBACzBrjB,KAAK8iB,KAAO,EAAI,MAKvB9iB,KAAKijB,oBACPjjB,KAAKijB,mBAAoB,EACzBjjB,KAAKkjB,aAAeljB,KAAKmjB,gBAAkB,IAI/C5D,kBAAmB,WACbvf,KAAK4e,WAAa5e,KAAKmf,cAAgB,GAAKnf,KAAKgf,aAAe,EAE7C,IAAnBhf,KAAKojB,WACLpjB,KAAKgf,cAAgBhf,KAAKgf,cAAgBhf,KAAKqjB,kBAAoB,KAGnErjB,KAAKqf,YAAc,EAEnBrf,KAAKqf,YACHrf,KAAK+c,aACL/c,KAAK4iB,YAAY5iB,KAAKsjB,UAAY,GAAKtjB,KAAKsf,eAGhDtf,KAAKqf,YAAc,GAIvBhP,SAAU,SAAUzB,EAAShH,GAC3B,IAAI6b,EAAUzjB,KAAK8iB,KAAO,EAAI,EAC1BlU,IAAY,MAAS6U,GAEvBzjB,KAAKoiB,gBAAqC,IAAV,GAARxa,GACxB5H,KAAKyiB,aAAuB,GAAR7a,EACpB5H,KAAKqiB,mBAAwC,IAAV,GAARza,GAC3B5H,KAAKsjB,SAAY1b,GAAS,EAAK,EAC/B5H,KAAKsiB,oBAAyC,IAAV,GAAR1a,GACxB5H,KAAKoiB,gBACPpiB,KAAK+c,aAAe/c,KAAKyiB,aAEzBziB,KAAK+c,aAAe/c,KAAK2iB,UAE3B3iB,KAAKuf,qBACI3Q,IAAY,MAAS6U,GAE9BzjB,KAAK+iB,YAAiC,IAAV,IAARnb,GACpB5H,KAAKmjB,gBAAmBvb,GAAS,EAAK,EACtC5H,KAAKojB,UAAaxb,GAAS,EAAK,EAChC5H,KAAKqjB,iBAA2B,EAARzb,EACxB5H,KAAKijB,mBAAoB,GAChBrU,IAAY,MAAS6U,GAE9BzjB,KAAKgf,cAAgB,KACrBhf,KAAKgf,cAAgBpX,GACZgH,IAAY,MAAS6U,IAE9BzjB,KAAKgf,cAAgB,IACrBhf,KAAKgf,eAAyB,EAARpX,IAAgB,EAElC5H,KAAK4e,YACP5e,KAAKmf,cAAgBnf,KAAKuP,KAAKoR,aAAqB,IAAR/Y,IAG9C5H,KAAKuiB,UAAW,IAIpB9D,WAAY,SAAU7W,GACpB5H,KAAK4e,UAAYhX,EACZA,IACH5H,KAAKmf,cAAgB,GAEvBnf,KAAKuf,qBAGPlB,gBAAiB,WACf,OAA8B,IAAvBre,KAAKmf,eAAwBnf,KAAK4e,UAAgB,EAAJ,IAIzD,IAAInE,EAAkB,SAAUlL,GAC9BvP,KAAKuP,KAAOA,EAEZvP,KAAK4e,UAAY,KACjB5e,KAAK+f,gBAAkB,KACvB/f,KAAKsiB,oBAAsB,KAC3BtiB,KAAK0jB,OAAS,KACd1jB,KAAK2jB,UAAY,KAEjB3jB,KAAKif,eAAiB,KACtBjf,KAAKgf,aAAe,KACpBhf,KAAKof,gBAAkB,KACvBpf,KAAKmf,cAAgB,KACrBnf,KAAKkf,cAAgB,KACrBlf,KAAK4jB,YAAc,KACnB5jB,KAAKqf,YAAc,KACnBrf,KAAK2T,IAAM,KAEX3T,KAAK0F,SAGP+U,EAAgBvc,UAAY,CAC1BwH,MAAO,WACL1F,KAAKif,eAAiB,EACtBjf,KAAKgf,aAAe,EACpBhf,KAAKof,gBAAkB,EACvBpf,KAAK4e,WAAY,EACjB5e,KAAK+f,iBAAkB,EACvB/f,KAAKmf,cAAgB,EACrBnf,KAAKsiB,qBAAsB,EAC3BtiB,KAAKkf,cAAgB,EACrBlf,KAAK4jB,YAAc,EACnB5jB,KAAK0jB,QAAS,EACd1jB,KAAK2jB,WAAY,EACjB3jB,KAAK2T,IAAM,EACX3T,KAAKqf,YAAc,IAGrBW,mBAAoB,WACdhgB,KAAKsiB,qBAAuBtiB,KAAKmf,cAAgB,IACnDnf,KAAKmf,gBACsB,IAAvBnf,KAAKmf,eACPnf,KAAK6jB,0BAKX1D,mBAAoB,WACdngB,KAAK0jB,QAEP1jB,KAAKkf,cAAgBlf,KAAK4jB,YAC1B5jB,KAAK6jB,yBACI7jB,KAAKkf,cAAgB,IAE9Blf,KAAKkf,gBACLlf,KAAK6jB,yBAEF7jB,KAAK2jB,YAER3jB,KAAK0jB,QAAS,IAIlBrF,gBAAiB,WACf,OAA8B,IAAvBre,KAAKmf,eAAwBnf,KAAK4e,UAAgB,EAAJ,GAIvDpP,QAAS,SAAUZ,GACjB,OAAO,GAGTyB,SAAU,SAAUzB,EAAShH,GACX,QAAZgH,GAEF5O,KAAK2jB,UAA+B,IAAV,IAAR/b,GAClB5H,KAAK4jB,YAAsB,IAARhc,EAGnB5H,KAAKsiB,qBAAuBtiB,KAAK2jB,WACZ,QAAZ/U,GAET5O,KAAKgf,cAAgB,KACrBhf,KAAKgf,cAAgBpX,GACA,QAAZgH,IAET5O,KAAKgf,cAAgB,IACrBhf,KAAKgf,eAAyB,EAARpX,IAAiB,EACvC5H,KAAKmf,cAAgBnf,KAAKuP,KAAKoR,aAAqB,IAAR/Y,GAC5C5H,KAAK0jB,QAAS,GAGhB1jB,KAAK6jB,yBAGPC,uBAAwB,SAAUpF,GAChC,GAAI1e,KAAKgf,aAAe,EAEtB,IADAhf,KAAKif,gBAAkBP,EAErB1e,KAAKgf,aAAe,GACpBhf,KAAKif,gBAAkBjf,KAAKgf,cAE5Bhf,KAAKif,gBAAkBjf,KAAKgf,aAE1Bhf,KAAK4e,WACL5e,KAAKmf,cAAgB,GACrBnf,KAAKkf,cAAgB,GAErBlf,KAAK+jB,0BAMbA,uBAAwB,WACtB/jB,KAAKof,kBACLpf,KAAKof,iBAAmB,IAG1BX,WAAY,SAAU7W,GACpB5H,KAAK4e,UAAYhX,EACZA,IACH5H,KAAKmf,cAAgB,GAEvBnf,KAAK6jB,yBAGPA,sBAAuB,WACrB7jB,KAAK+f,gBACH/f,KAAK4e,WACL5e,KAAKgf,aAAe,GACpBhf,KAAKkf,cAAgB,GACrBlf,KAAKmf,cAAgB,IAI3B1iB,EAAOC,QAAU0a,G,+BC11CjB,IAAI4M,EAAOjgB,EAAQ,OACfD,EAAQC,EAAQ,OAEhBoT,EAAM,SAAUlT,GAClBjE,KAAKiE,IAAMA,EAGXjE,KAAKyR,QAAU,KACfzR,KAAKikB,UAAY,KACjBjkB,KAAKkkB,YAAc,KACnBlkB,KAAKmkB,eAAiB,KACtBnkB,KAAKokB,sBAAwB,KAC7BpkB,KAAKqkB,WAAa,KAClBrkB,KAAKskB,YAAc,KACnBtkB,KAAKukB,iBAAmB,KACxBvkB,KAAKkZ,gBAAkB,KACvBlZ,KAAKwkB,MAAQ,KACbxkB,KAAKykB,iBAAmB,KACxBzkB,KAAK0kB,cAAgB,KACrB1kB,KAAKmZ,WAAa,KAClBnZ,KAAK2kB,wBAA0B,KAC/B3kB,KAAK4kB,cAAgB,KACrB5kB,KAAK6kB,aAAe,KACpB7kB,KAAK8kB,iBAAmB,KACxB9kB,KAAK+kB,iBAAmB,KACxB/kB,KAAKglB,UAAY,KACjBhlB,KAAKilB,cAAgB,KACrBjlB,KAAKklB,QAAU,KACfllB,KAAK6Y,eAAiB,KACtB7Y,KAAKmlB,eAAiB,KACtBnlB,KAAKolB,aAAe,KACpBplB,KAAKqlB,aAAe,KACpBrlB,KAAKslB,WAAa,KAClBtlB,KAAKulB,MAAQ,KACbvlB,KAAKwlB,KAAO,KACZxlB,KAAKylB,KAAO,KACZzlB,KAAK0lB,MAAQ,KACb1lB,KAAK2lB,MAAQ,KACb3lB,KAAK4lB,MAAQ,KACb5lB,KAAK6lB,KAAO,KACZ7lB,KAAK8lB,KAAO,KACZ9lB,KAAK+lB,MAAQ,KACb/lB,KAAKgmB,MAAQ,KACbhmB,KAAKimB,MAAQ,KACbjmB,KAAKkmB,KAAO,KACZlmB,KAAKmmB,MAAQ,KACbnmB,KAAKomB,OAAS,KACdpmB,KAAKqmB,OAAS,KACdrmB,KAAKsmB,SAAW,KAChBtmB,KAAKumB,YAAc,KAEnBvmB,KAAK0kB,cAAgB,KACrB1kB,KAAKwmB,SAAW,KAChBxmB,KAAK8Y,SAAW,KAChB9Y,KAAKymB,qBAAuB,KAC5BzmB,KAAK2Y,KAAO,KACZ3Y,KAAK0mB,KAAO,KACZ1mB,KAAK2mB,KAAO,KACZ3mB,KAAK4mB,QAAU,KACf5mB,KAAK6mB,OAAS,KACd7mB,KAAK8mB,SAAW,KAChB9mB,KAAK+mB,SAAW,KAChB/mB,KAAKgnB,WAAa,KAClBhnB,KAAK4Y,SAAW,KAChB5Y,KAAK+Y,SAAW,KAChB/Y,KAAKinB,QAAU,KACfjnB,KAAKknB,WAAa,KAClBlnB,KAAKmnB,WAAa,KAClBnnB,KAAK2R,OAAS,KACd3R,KAAKonB,QAAU,KACfpnB,KAAKukB,iBAAmB,KACxBvkB,KAAKqnB,UAAY,KACjBrnB,KAAKsnB,gBAAkB,KACvBtnB,KAAKunB,SAAW,KAGhBvnB,KAAKwnB,aAAc,EACnBxnB,KAAKynB,cAAe,EAEpBznB,KAAK0F,SAGPyR,EAAIjZ,UAAY,CAEdwpB,iBAAkB,EAClBC,qBAAsB,EACtB1O,kBAAmB,EACnB2O,cAAe,EAEfliB,MAAO,WACL,IAAIxC,EAKJ,IAFAlD,KAAKyR,QAAU,IAAIxO,MAAM,OACzBjD,KAAKikB,UAAY,IAAIhhB,MAAM,KACtBC,EAAI,EAAGA,EAAIlD,KAAKyR,QAAQjP,OAAQU,IACnClD,KAAKyR,QAAQvO,GAAK,EAEpB,IAAKA,EAAI,EAAGA,EAAIlD,KAAKikB,UAAUzhB,OAAQU,IACrClD,KAAKikB,UAAU/gB,GAAK,EA0FtB,IAtFAlD,KAAKkkB,YAAc,KACnBlkB,KAAKmkB,eAAiB,KACtBnkB,KAAKokB,sBAAwB,EAC7BpkB,KAAKqkB,YAAa,EAGlBrkB,KAAKskB,YAAc,EAEnBtkB,KAAKukB,kBAAoB,EACzBvkB,KAAKkZ,iBAAkB,EACvBlZ,KAAKwkB,OAAQ,EACbxkB,KAAKykB,kBAAmB,EACxBzkB,KAAK0kB,eAAgB,EACrB1kB,KAAKmZ,WAAa,EAClBnZ,KAAK2kB,wBAA0B,KAG/B3kB,KAAK4kB,cAAgB,EACrB5kB,KAAK6kB,aAAe,EACpB7kB,KAAK8kB,iBAAmB,EACxB9kB,KAAK+kB,iBAAmB,EACxB/kB,KAAKglB,UAAY,EACjBhlB,KAAKilB,cAAgB,EAGrBjlB,KAAKklB,QAAU,EACfllB,KAAK6Y,eAAiB,EACtB7Y,KAAKmlB,eAAiB,EACtBnlB,KAAKolB,aAAe,EACpBplB,KAAKqlB,aAAe,EACpBrlB,KAAKslB,WAAa,EAGlBtlB,KAAKulB,MAAQ,EACbvlB,KAAKwlB,KAAO,EACZxlB,KAAKylB,KAAO,EACZzlB,KAAK0lB,MAAQ,EACb1lB,KAAK2lB,MAAQ,EAGb3lB,KAAK4lB,MAAQ,EACb5lB,KAAK6lB,KAAO,EACZ7lB,KAAK8lB,KAAO,EACZ9lB,KAAK+lB,MAAQ,EACb/lB,KAAKgmB,MAAQ,EACbhmB,KAAKimB,MAAQ,EACbjmB,KAAKkmB,KAAO,EAKZlmB,KAAKmmB,MAAQ,KAGbnmB,KAAKomB,OAAS,IAAInjB,MAAM,IACxBjD,KAAKqmB,OAAS,IAAIpjB,MAAM,OACxBjD,KAAKsmB,SAAW,IAAIrjB,MAAM,OAC1BjD,KAAKumB,YAAc,IAAItjB,MAAM,OAE7BjD,KAAK0kB,cAAgB,KAErB1kB,KAAKwmB,SAAW,IAAIvjB,MAAM,IAG1BjD,KAAK8Y,SAAW,EAChB9Y,KAAKymB,sBAAwB,EAC7BzmB,KAAK2Y,KAAO,EAGZ3Y,KAAK0mB,KAAO,IAAIzjB,MAAM,IACtBjD,KAAK2mB,KAAO,IAAI1jB,MAAM,IACtBjD,KAAK4mB,QAAU,IAAI3jB,MAAM,IACzBjD,KAAK6mB,OAAS,IAAI5jB,MAAM,IACxBjD,KAAK8mB,SAAW,IAAI7jB,MAAM,IAC1BjD,KAAK+mB,SAAW,IAAI9jB,MAAM,IAC1BjD,KAAKgnB,WAAa,IAAI/jB,MAAM,IAC5BjD,KAAK4Y,SAAW,EAChB5Y,KAAK+Y,SAAW,EAChB/Y,KAAKinB,SAAU,EAGfjnB,KAAKknB,WAAa,IAAIjkB,MAAM,IAC5BjD,KAAKmnB,WAAa,IAAIlkB,MAAM,IAG5BjD,KAAK2R,OAAS,IAAI1O,MAAM,KACnBC,EAAI,EAAGA,EAAI,IAAKA,IACnBlD,KAAK2R,OAAOzO,GAAK,IAAI8gB,EAQvB,IAHAhkB,KAAKonB,QAAU,IAAInkB,MAAM,GACzBjD,KAAKukB,kBAAoB,EACzBvkB,KAAKqnB,UAAY,IAAIpkB,MAAM,GACtBC,EAAI,EAAGA,EAAI,EAAGA,IACjBlD,KAAKqnB,UAAUnkB,GAAK,IAAI2kB,EAAU,GAAI,GAAI,KAAO3kB,GAKnD,IADAlD,KAAKsnB,gBAAkB,IAAIrkB,MAAM,OAC5BC,EAAI,EAAGA,EAAI,MAAQA,IACtBlD,KAAKsnB,gBAAgBpkB,GAAKA,EAG5BlD,KAAKunB,SAAW,IAAIO,EACpB9nB,KAAKunB,SAASQ,kBAGd/nB,KAAK6P,kBAAkB,GACvB7P,KAAK8P,kBAAkB,IAIzB8D,aAAc,SAAUZ,GACtB,GAAIA,IAAchT,KAAKukB,iBAAvB,CAIAvkB,KAAKukB,iBAAmBvR,EACxBhT,KAAKuR,mBAGwB,OAAzBvR,KAAKsnB,kBACPtnB,KAAKsnB,gBAAkB,IAAIrkB,MAAM,QAEnC,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAQA,IAC1BlD,KAAKsnB,gBAAgBpkB,GAAKA,EAI5BlD,KAAKgoB,mBAAmB,MAAQ,MAAQ,IACxChoB,KAAKgoB,mBAAmB,MAAQ,MAAQ,IACxChoB,KAAKgoB,mBAAmB,MAAQ,MAAQ,IACxChoB,KAAKgoB,mBAAmB,MAAQ,MAAQ,IAGxChoB,KAAKgoB,mBAAmB,MAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,EAAQ,OAEpChV,IAAchT,KAAKiE,IAAIwM,IAAIqD,sBAG7B9T,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAElBpnB,KAAKgoB,mBAAmB,KAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,MAAQ,OAC/BhV,IAAchT,KAAKiE,IAAIwM,IAAIsD,oBAGpC/T,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAElBpnB,KAAKgoB,mBAAmB,MAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,KAAQ,OAC/BhV,IAAchT,KAAKiE,IAAIwM,IAAIoD,wBAGpC7T,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAElBpnB,KAAKgoB,mBAAmB,KAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,KAAQ,OAC/BhV,IAAchT,KAAKiE,IAAIwM,IAAIuG,yBACpChX,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAElBpnB,KAAKgoB,mBAAmB,KAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,KAAQ,MACxChoB,KAAKgoB,mBAAmB,MAAQ,KAAQ,QAIxChoB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,EAClBpnB,KAAKonB,QAAQ,GAAK,KAOtBY,mBAAoB,SAAUC,EAAWC,EAAS/Z,GAChD,IAAK,IAAIjL,EAAI,EAAGA,EAAIiL,EAAMjL,IACxBlD,KAAKsnB,gBAAgBW,EAAY/kB,GAAKglB,EAAUhlB,GAIpDkW,YAAa,WAEXpZ,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIjJ,SAGjC5F,KAAKymB,qBAAuB,KAC9BzmB,KAAKmoB,qBACHnoB,KAAKymB,qBAAuB,EAC5B,IAAMzmB,KAAKymB,sBAKfzmB,KAAKooB,WAGLpoB,KAAKymB,sBAAwB,GAG/BpN,YAAa,WACX,OAAQrZ,KAAK8Y,UACX,KAAK,GAGC9Y,KAAKykB,mBAGPzkB,KAAK2Y,KAAO,EACZ3Y,KAAKykB,kBAAoBzkB,KAAKykB,kBAEhC,MAEF,KAAK,GAEHzkB,KAAKgZ,cAAchZ,KAAK4nB,eAAe,GAGvC5nB,KAAKgZ,cAAchZ,KAAKiZ,mBAAmB,GAC3CjZ,KAAKinB,SAAU,EACfjnB,KAAK4Y,UAAY,EACjB5Y,KAAK+Y,UAAY,EAEW,IAAxB/Y,KAAKmlB,gBAAgD,IAAxBnlB,KAAK6Y,iBAEpC7Y,KAAKulB,MAAQvlB,KAAK4lB,MAClB5lB,KAAKwlB,KAAOxlB,KAAK6lB,KACjB7lB,KAAKylB,KAAOzlB,KAAK8lB,KACjB9lB,KAAK0lB,MAAQ1lB,KAAK+lB,MAClB/lB,KAAK2lB,MAAQ3lB,KAAKgmB,MAEU,IAAxBhmB,KAAKmlB,gBAEPnlB,KAAKqoB,kBAAiB,EAAO,IAIL,IAAxBroB,KAAKmlB,gBAAgD,IAAxBnlB,KAAK6Y,gBAEpC7Y,KAAKsoB,aAAa,GAGQ,IAAxBtoB,KAAKmlB,gBAAgD,IAAxBnlB,KAAK6Y,gBAEpC7Y,KAAKiE,IAAIyC,KAAKiM,kBAEhB,MAEF,KAAK,IAGH3S,KAAKgZ,cAAchZ,KAAK4nB,eAAe,GACvC5nB,KAAKkZ,iBAAkB,EACvBlZ,KAAKmZ,WAAa,EAGlBnZ,KAAK8Y,UAAY,EAEjB,MAEF,QACM9Y,KAAK8Y,UAAY,IAAM9Y,KAAK8Y,UAAY,MAEd,IAAxB9Y,KAAKmlB,iBACFnlB,KAAK2kB,0BAER3kB,KAAK2lB,MAAQ3lB,KAAKgmB,MAClBhmB,KAAKylB,KAAOzlB,KAAK8lB,KACjB9lB,KAAKqoB,kBAAiB,EAAMroB,KAAK8Y,SAAW,EAAI,KAElD9Y,KAAK2kB,yBAA0B,EAG1B3kB,KAAKinB,SAAmC,IAAxBjnB,KAAK6Y,gBAEtB7Y,KAAK0mB,KAAK,KAAO,GACjB1mB,KAAK0mB,KAAK,GAAK,KACf1mB,KAAK2mB,KAAK,GAAK,GAAK3mB,KAAK8Y,SAAW,IACpC9Y,KAAK2mB,KAAK,GAAK,GAA2B,IAAtB3mB,KAAK6kB,aAAqB,EAAI,KAChD7kB,KAAK8Y,SAAW,IAEd9Y,KAAKsoB,aAAatoB,KAAK8Y,SAAW,MACpC9Y,KAAKinB,SAAU,IAMK,IAAxBjnB,KAAKmlB,gBAAgD,IAAxBnlB,KAAK6Y,gBAEpC7Y,KAAKiE,IAAIyC,KAAKiM,mBAKtB3S,KAAK8Y,WACL9Y,KAAKuoB,gBACLvoB,KAAKwoB,iBAGPhQ,WAAY,WAEV,IAAIiQ,EAAU,EAEd,GAAwB,IAApBzoB,KAAKslB,WAIPmD,EAAUzoB,KAAKmnB,WAAW,QAI1B,OAAQnnB,KAAKklB,SACX,KAAK,EAYL,KAAK,EAQL,QAEEuD,EAAU,QAlBZ,KAAK,EAEHA,EAAU,MACV,MACF,KAAK,EAEHA,EAAU,SACV,MAKF,KAAK,EAEHA,EAAU,IAQhB,IACIvlB,EADAmjB,EAASrmB,KAAKqmB,OAElB,IAAKnjB,EAAI,EAAGA,EAAI,MAAWA,IACzBmjB,EAAOnjB,GAAKulB,EAEd,IAAIlC,EAAcvmB,KAAKumB,YACvB,IAAKrjB,EAAI,EAAGA,EAAIqjB,EAAY/jB,OAAQU,IAClCqjB,EAAYrjB,GAAK,IAIrBklB,SAAU,WACR,IAAIllB,EAAGsW,EAAGC,EACN4M,EAASrmB,KAAKqmB,OAGlB,GAAIrmB,KAAKwnB,YAAa,CAEpB,GACExnB,KAAK0mB,KAAK,IAAM,GAChB1mB,KAAK0mB,KAAK,GAAK,KACf1mB,KAAK2mB,KAAK,IAAM,GAChB3mB,KAAK2mB,KAAK,GAAK,IACf,CACA,IAAKzjB,EAAI,EAAGA,EAAI,IAAKA,IACnBmjB,GAAQrmB,KAAK2mB,KAAK,IAAM,GAAKzjB,GAAK,SAEpC,IAAKA,EAAI,EAAGA,EAAI,IAAKA,IACnBmjB,GAAQnjB,GAAK,GAAKlD,KAAK0mB,KAAK,IAAM,SAItC,GACE1mB,KAAK4Y,UAAY,GACjB5Y,KAAK4Y,SAAW,KAChB5Y,KAAK+Y,UAAY,GACjB/Y,KAAK+Y,SAAW,IAChB,CACA,IAAK7V,EAAI,EAAGA,EAAI,IAAKA,IACnBmjB,GAAQrmB,KAAK+Y,UAAY,GAAK7V,GAAK,QAErC,IAAKA,EAAI,EAAGA,EAAI,IAAKA,IACnBmjB,GAAQnjB,GAAK,GAAKlD,KAAK4Y,UAAY,SAQzC,GACE5Y,KAAKynB,cACiB,IAAtBznB,KAAKqlB,cACiB,IAAtBrlB,KAAKolB,aAGL,IAAK3L,EAAI,EAAGA,EAAI,IAAKA,IACnB,IAAKD,EAAI,EAAGA,EAAI,EAAGA,IACjB6M,GAAQ5M,GAAK,GAAKD,GAAK,EAK7B,GAAIxZ,KAAKynB,aAEP,IAAKhO,EAAI,EAAGA,EAAI,IAAKA,IACnB,IAAKD,EAAI,EAAGA,EAAI,EAAGA,IACjB6M,EAAkB,KAAV5M,GAAK,GAAWD,GAAK,EAMnC,GAAIxZ,KAAKynB,aACP,IAAKhO,EAAI,EAAGA,EAAI,EAAGA,IACjB,IAAKD,EAAI,EAAGA,EAAI,IAAKA,IACnB6M,GAAQ5M,GAAK,GAAKD,GAAK,EACvB6M,GAAS,IAAM5M,GAAM,GAAKD,GAAK,EAKrCxZ,KAAKiE,IAAI4T,GAAGC,WAAWuO,IAGzBxW,kBAAmB,SAAUjI,GAC3B5H,KAAKuR,mBAELvR,KAAK4kB,cAAiBhd,GAAS,EAAK,EACpC5H,KAAK6kB,aAAgBjd,GAAS,EAAK,EACnC5H,KAAK8kB,iBAAoBld,GAAS,EAAK,EACvC5H,KAAK+kB,iBAAoBnd,GAAS,EAAK,EACvC5H,KAAKglB,UAAapd,GAAS,EAAK,EAChC5H,KAAKilB,cAAwB,EAARrd,EAErB5H,KAAK6lB,KAAQje,GAAS,EAAK,EAC3B5H,KAAK8lB,KAAe,EAARle,EACZ5H,KAAKkmB,KAAQte,GAAS,EAAK,GAG7BkI,kBAAmB,SAAUlI,GAC3B5H,KAAKuR,mBAELvR,KAAKklB,QAAWtd,GAAS,EAAK,EAC9B5H,KAAK6Y,eAAkBjR,GAAS,EAAK,EACrC5H,KAAKmlB,eAAkBvd,GAAS,EAAK,EACrC5H,KAAKolB,aAAgBxd,GAAS,EAAK,EACnC5H,KAAKqlB,aAAgBzd,GAAS,EAAK,EACnC5H,KAAKslB,WAAqB,EAAR1d,EAEM,IAApB5H,KAAKslB,YACPtlB,KAAKunB,SAASmB,YAAY1oB,KAAKklB,SAEjCllB,KAAK2oB,kBAGP3P,cAAe,SAAU4P,EAAMhhB,GAC7B,IAAIihB,EAAI,GAAKD,EACb5oB,KAAKiE,IAAI4K,IAAI3K,IAAI,MACdlE,KAAKiE,IAAI4K,IAAI3K,IAAI,MAAW,IAAM2kB,GAAOjhB,EAAQihB,EAAI,IAK1DzZ,mBAAoB,WAClB,IAAIuE,EAAM3T,KAAKiE,IAAI4K,IAAI3K,IAAI,MAS3B,OANAlE,KAAKqkB,YAAa,EAGlBrkB,KAAKgZ,cAAchZ,KAAK4nB,eAAe,GAGhCjU,GAKT5D,iBAAkB,SAAUnB,GAC1B5O,KAAKskB,YAAc1V,GAMrBS,SAAU,WAKR,OAAOrP,KAAKikB,UAAUjkB,KAAKskB,cAM7BtU,UAAW,SAAUpI,GACnB5H,KAAKikB,UAAUjkB,KAAKskB,aAAe1c,EACnC5H,KAAK8oB,qBAAqB9oB,KAAKskB,YAAa1c,GAC5C5H,KAAKskB,cACLtkB,KAAKskB,aAAe,KAOtBrU,YAAa,SAAUrI,GACrB5H,KAAKuR,mBAEDvR,KAAKqkB,YAEPrkB,KAAKgmB,MAASpe,GAAS,EAAK,GAC5B5H,KAAKimB,MAAgB,EAARre,IAGb5H,KAAK4lB,MAAgB,EAARhe,EACb5H,KAAK+lB,MAASne,GAAS,EAAK,IAE9B5H,KAAKqkB,YAAcrkB,KAAKqkB,YAM1BnU,iBAAkB,SAAUtB,GACtB5O,KAAKqkB,YACPrkB,KAAK4lB,MAAShX,GAAW,EAAK,EAC9B5O,KAAK6lB,KAAQjX,GAAW,EAAK,EAC7B5O,KAAK8lB,KAAQlX,GAAW,EAAK,EAC7B5O,KAAK+lB,MAAsB,EAAb/lB,KAAK+lB,OAAyB,EAAVnX,IAAgB,IAElD5O,KAAKuR,mBAELvR,KAAK+lB,MAAsB,GAAb/lB,KAAK+lB,MAAgBnX,GAAW,EAAK,EACnD5O,KAAKgmB,MAAkB,GAAVpX,EAEb5O,KAAKulB,MAAQvlB,KAAK4lB,MAClB5lB,KAAKwlB,KAAOxlB,KAAK6lB,KACjB7lB,KAAKylB,KAAOzlB,KAAK8lB,KACjB9lB,KAAK0lB,MAAQ1lB,KAAK+lB,MAClB/lB,KAAK2lB,MAAQ3lB,KAAKgmB,MAElBhmB,KAAKsoB,aAAatoB,KAAK8Y,SAAW,KAGpC9Y,KAAKqkB,YAAcrkB,KAAKqkB,WAGxBrkB,KAAKwoB,gBACDxoB,KAAKkkB,YAAc,MACrBlkB,KAAKiE,IAAIyC,KAAKkM,YAAY5S,KAAKkkB,cAMnC5U,SAAU,WACR,IAAIqE,EAMJ,OAJA3T,KAAKwoB,gBACLxoB,KAAKuoB,gBAGDvoB,KAAKkkB,aAAe,OACtBvQ,EAAM3T,KAAKokB,sBAGPpkB,KAAKkkB,YAAc,KACrBlkB,KAAKokB,sBAAwBpkB,KAAKyR,QAAQzR,KAAKkkB,aAE/ClkB,KAAKokB,sBAAwBpkB,KAAK+oB,aAAa/oB,KAAKkkB,aAIlDlkB,KAAKkkB,YAAc,MACrBlkB,KAAKiE,IAAIyC,KAAKkM,YAAY5S,KAAKkkB,aAIjClkB,KAAKkkB,aAAkC,IAAnBlkB,KAAKglB,UAAkB,GAAK,EAEhDhlB,KAAKgpB,kBACLhpB,KAAKipB,kBAEEtV,IAITA,EAAM3T,KAAK+oB,aAAa/oB,KAAKkkB,aAG7BlkB,KAAKkkB,aAAkC,IAAnBlkB,KAAKglB,UAAkB,GAAK,EAEhDhlB,KAAKgpB,kBACLhpB,KAAKipB,kBAEEtV,IAKTxD,UAAW,SAAUvI,GACnB5H,KAAKuR,mBACLvR,KAAKwoB,gBACLxoB,KAAKuoB,gBAEDvoB,KAAKkkB,aAAe,KAEtBlkB,KAAKkpB,cAAclpB,KAAKkkB,YAAatc,IAGrC5H,KAAKmpB,SAASnpB,KAAKkkB,YAAatc,GAGhC5H,KAAKiE,IAAIyC,KAAKkM,YAAY5S,KAAKkkB,cAIjClkB,KAAKkkB,aAAkC,IAAnBlkB,KAAKglB,UAAkB,GAAK,EAChDhlB,KAAKipB,kBACLjpB,KAAKgpB,mBAMP5Y,QAAS,SAAUxI,GAGjB,IAFA,IACImS,EADAqP,EAAsB,IAARxhB,EAET1E,EAAIlD,KAAKskB,YAAaphB,EAAI,IAAKA,IACtC6W,EAAO/Z,KAAKiE,IAAI4K,IAAI3K,IAAIklB,EAAclmB,GACtClD,KAAKikB,UAAU/gB,GAAK6W,EACpB/Z,KAAK8oB,qBAAqB5lB,EAAG6W,GAG/B/Z,KAAKiE,IAAI4K,IAAI7G,WAAW,MAI1BihB,gBAAiB,WACf,IAAIra,EAAW5O,KAAKmkB,gBAAkB,EAAK,IAC3CnkB,KAAK4lB,MAAShX,GAAW,EAAK,EAC9B5O,KAAK6lB,KAAQjX,GAAW,EAAK,EAC7B5O,KAAK8lB,KAAQlX,GAAW,EAAK,EAC7B5O,KAAK+lB,MAAsB,EAAb/lB,KAAK+lB,OAAyB,EAAVnX,IAAgB,EAElDA,EAAgC,IAAtB5O,KAAKmkB,eACfnkB,KAAK+lB,MAAsB,GAAb/lB,KAAK+lB,MAAgBnX,GAAW,EAAK,EACnD5O,KAAKgmB,MAAkB,GAAVpX,GAIfoa,gBAAiB,WACf,IAAIpa,EAAW5O,KAAKkkB,aAAe,EAAK,IACxClkB,KAAKulB,MAAS3W,GAAW,EAAK,EAC9B5O,KAAKwlB,KAAQ5W,GAAW,EAAK,EAC7B5O,KAAKylB,KAAQ7W,GAAW,EAAK,EAC7B5O,KAAK0lB,MAAsB,EAAb1lB,KAAK0lB,OAAyB,EAAV9W,IAAgB,EAElDA,EAA6B,IAAnB5O,KAAKkkB,YACflkB,KAAK0lB,MAAsB,GAAb1lB,KAAK0lB,MAAgB9W,GAAW,EAAK,EACnD5O,KAAK2lB,MAAkB,GAAV/W,GAGf2Z,cAAe,WACb,IAAIc,GAAmB,EAAbrpB,KAAK4lB,QAAc,EAC7ByD,IAAmB,EAAZrpB,KAAK6lB,OAAa,EACzBwD,IAAmB,EAAZrpB,KAAK8lB,OAAa,EACzBuD,GAAOrpB,KAAK+lB,OAAS,EAAK,EAE1B,IAAIuD,GAAmB,EAAbtpB,KAAK+lB,QAAc,EAC7BuD,GAAmB,GAAbtpB,KAAKgmB,MAEXhmB,KAAKmkB,eAAoC,OAAjBkF,GAAM,EAAKC,IAGrCd,cAAe,WACb,IAAIa,GAAmB,EAAbrpB,KAAKulB,QAAc,EAC7B8D,IAAmB,EAAZrpB,KAAKwlB,OAAa,EACzB6D,IAAmB,EAAZrpB,KAAKylB,OAAa,EACzB4D,GAAOrpB,KAAK0lB,OAAS,EAAK,EAE1B,IAAI4D,GAAmB,EAAbtpB,KAAK0lB,QAAc,EAC7B4D,GAAmB,GAAbtpB,KAAK2lB,MAEX3lB,KAAKkkB,YAAiC,OAAjBmF,GAAM,EAAKC,IAGlCC,eAAgB,SAAUC,GACxB,IAAK,IAAItmB,EAAIsmB,EAAa,IAANtmB,EAASA,IAC3BlD,KAAK2lB,QACc,KAAf3lB,KAAK2lB,QACP3lB,KAAK2lB,MAAQ,EACb3lB,KAAK0lB,QACD1lB,KAAK0lB,OAAS,KAChB1lB,KAAKylB,OACa,IAAdzlB,KAAKylB,OACPzlB,KAAKylB,KAAO,EACZzlB,KAAKwlB,OACa,IAAdxlB,KAAKwlB,OACPxlB,KAAKwlB,KAAO,EACZxlB,KAAKulB,QACLvlB,KAAKulB,OAAS,OAU1BwD,aAAc,SAAUna,GACtB,OAAO5O,KAAKyR,QAAQzR,KAAKsnB,gBAAgB1Y,KAK3Csa,cAAe,SAAUta,EAAShH,GAChC,GAAIgH,GAAW,OAAUA,EAAU,MAEjB,QAAZA,GAAkC,QAAZA,GACxB5O,KAAKmpB,SAAS,MAAQvhB,GACtB5H,KAAKmpB,SAAS,MAAQvhB,IACD,QAAZgH,GAAkC,QAAZA,GAC/B5O,KAAKmpB,SAAS,MAAQvhB,GACtB5H,KAAKmpB,SAAS,MAAQvhB,IACD,QAAZgH,GAAkC,QAAZA,GAC/B5O,KAAKmpB,SAAS,MAAQvhB,GACtB5H,KAAKmpB,SAAS,MAAQvhB,IACD,QAAZgH,GAAkC,QAAZA,GAC/B5O,KAAKmpB,SAAS,MAAQvhB,GACtB5H,KAAKmpB,SAAS,MAAQvhB,IAEtB5H,KAAKmpB,SAASva,EAAShH,OAEpB,CAEL,KAAIgH,EAAU5O,KAAKsnB,gBAAgB9kB,QAGjC,MAAM,IAAIoO,MAAM,yBAA2BhC,EAAQpH,SAAS,KAF5DxH,KAAKmpB,SAASnpB,KAAKsnB,gBAAgB1Y,GAAUhH,KAOnD2J,iBAAkB,WACZvR,KAAK8Y,UAAY,IAAM9Y,KAAK8Y,UAAY,MAE1C9Y,KAAKmoB,qBACHnoB,KAAKymB,qBAAuB,EAC5BzmB,KAAK8Y,SAAW,GAAK9Y,KAAKymB,sBAI5BzmB,KAAKymB,qBAAuBzmB,KAAK8Y,SAAW,KAIhDqP,qBAAsB,SAAUsB,EAAWC,GAKzC,GAJ4B,IAAxB1pB,KAAK6Y,gBACP7Y,KAAK2pB,uBAAuBF,EAAWC,GAAW,GAGxB,IAAxB1pB,KAAKmlB,eAAsB,CAC7B,IAAIyE,EAAKH,GAAa,EAClBI,EAAMJ,EAAYC,GAAc,EAChCG,EAAK,QACPA,EAAK,OAKP,IAHA,IAAIxD,EAASrmB,KAAKqmB,OACdC,EAAWtmB,KAAKsmB,SAChBC,EAAcvmB,KAAKumB,YACduD,EAAYF,EAAIE,EAAYD,EAAIC,IACnCvD,EAAYuD,GAAa,MAC3BzD,EAAOyD,GAAaxD,EAASwD,IAKP,IAAxB9pB,KAAK6Y,gBACP7Y,KAAK2pB,uBAAuBF,EAAWC,GAAW,GAGpD1pB,KAAK0kB,eAAgB,GAGvB2D,iBAAkB,SAAU/B,EAAUyD,GACpC,IAAIC,EAAyB,IAAdhqB,KAAKkmB,KAAa,EAAI,IACjC4D,GAAaC,GAAQ,GAAK/pB,KAAKimB,MAQnC,GANAjmB,KAAKmmB,MAAQnmB,KAAKonB,QAAQpnB,KAAKwlB,KAAOxlB,KAAKwlB,KAAOxlB,KAAKylB,MAEvDzlB,KAAK2lB,MAAQ3lB,KAAKgmB,MAClBhmB,KAAKylB,KAAOzlB,KAAK8lB,KACjB9lB,KAAKmmB,MAAQnmB,KAAKonB,QAAQpnB,KAAKwlB,KAAOxlB,KAAKwlB,KAAOxlB,KAAKylB,MAEnDsE,EAAO,KAAOA,EAAO/pB,KAAKulB,OAAS,EAAG,CAYxC,IAXA,IASI0E,EAAGC,EAAMC,EAAKC,EATdC,EAAcrqB,KAAKulB,OAAS,EAC5BiB,EAAWxmB,KAAKwmB,SAChBJ,EAASpmB,KAAKomB,OACdzU,EAAS3R,KAAK2R,OACd0V,EAAYrnB,KAAKqnB,UACjBF,EAAannB,KAAKmnB,WAClBZ,EAAcvmB,KAAKumB,YACnB+D,EAAehE,EAAWtmB,KAAKsmB,SAAWtmB,KAAKqmB,OAI1CkE,EAAO,EAAGA,EAAO,GAAIA,IAAQ,CACpC,GAAIR,GAAQ,EAAG,CAEb,GAAI/pB,KAAK0kB,cAAe,CAGtB,QAAiB,KADjBuF,EAAIzD,EAAS+D,IAEX,SAEFL,EAAOD,EAAEO,IACTL,EAAM/D,EAAOmE,OACR,CAOL,QAAiB,KALjBN,EACEtY,EACEqY,EACE3C,EAAUrnB,KAAKmmB,OAAOsE,aAAazqB,KAAK2lB,MAAO3lB,KAAK0lB,SAGxD,SAEFwE,EAAOD,EAAEO,IACTL,EAAM9C,EAAUrnB,KAAKmmB,OAAOuE,UAAU1qB,KAAK2lB,MAAO3lB,KAAK0lB,OACvDc,EAAS+D,GAAQN,EACjB7D,EAAOmE,GAAQJ,EAIjB,IAAIQ,EAAK,EACLnR,GAAK+Q,GAAQ,GAAKvqB,KAAKimB,MAE3B,GAAIzM,GAAK,EAKP,GAJIA,EAAI,IACNsQ,GAAatQ,EACbmR,GAAMnR,GAEJyQ,EAAEW,OAAO5qB,KAAKulB,OAChB,KAAOoF,EAAK,EAAGA,IACbL,EAAaR,GACX3C,EAAW+C,EAAKG,EAAcM,GAAMR,GACtC5D,EAAYuD,IAAc,IAC1BA,SAGF,KAAOa,EAAK,EAAGA,IAED,KADZP,EAAMF,EAAKG,EAAcM,MAEvBL,EAAaR,GAAa3C,EAAWiD,EAAMD,GAC3C5D,EAAYuD,IAAc,KAE5BA,IAOa,MAAf9pB,KAAK2lB,QACT3lB,KAAK2lB,MAAQ,EACb3lB,KAAKylB,OACLzlB,KAAKylB,MAAQ,EACbzlB,KAAKmmB,MAAQnmB,KAAKonB,SAASpnB,KAAKwlB,MAAQ,GAAKxlB,KAAKylB,OAMtDzlB,KAAK0kB,eAAgB,EAIvB1kB,KAAKulB,QACc,IAAfvlB,KAAKulB,QACPvlB,KAAKulB,MAAQ,EACbvlB,KAAK0lB,QACc,KAAf1lB,KAAK0lB,OACP1lB,KAAK0lB,MAAQ,EACb1lB,KAAKwlB,OACLxlB,KAAKwlB,MAAQ,EACbxlB,KAAKmmB,MAAQnmB,KAAKonB,SAASpnB,KAAKwlB,MAAQ,GAAKxlB,KAAKylB,OAC1B,KAAfzlB,KAAK0lB,QACd1lB,KAAK0lB,MAAQ,GAIf1lB,KAAK0kB,eAAgB,IAIzBiF,uBAAwB,SAAUkB,EAAWC,EAAWC,GACtD,GAA4B,IAAxB/qB,KAAK6Y,eACP,IAAK,IAAI3V,EAAI,EAAGA,EAAI,GAAIA,IACtB,GACElD,KAAKgnB,WAAW9jB,KAAO6nB,GACvB/qB,KAAK0mB,KAAKxjB,IAAM,GAChBlD,KAAK0mB,KAAKxjB,GAAK,KACflD,KAAK2mB,KAAKzjB,GAAK,GAAK2nB,GACpB7qB,KAAK2mB,KAAKzjB,GAAK2nB,EAAYC,EAG3B,GAA0B,IAAtB9qB,KAAK6kB,aAGP7kB,KAAKgrB,MAAQ,EACbhrB,KAAKirB,MAAQ,EAETjrB,KAAK2mB,KAAKzjB,GAAK2nB,IACjB7qB,KAAKgrB,MAAQH,EAAY7qB,KAAK2mB,KAAKzjB,GAAK,GAGtClD,KAAK2mB,KAAKzjB,GAAK,EAAI2nB,EAAYC,IACjC9qB,KAAKirB,MAAQJ,EAAYC,EAAY9qB,KAAK2mB,KAAKzjB,GAAK,GAGxB,IAA1BlD,KAAK+kB,iBACP/kB,KAAK2R,OAAO3R,KAAK4mB,QAAQ1jB,IAAIgoB,OAC3BlrB,KAAKqmB,OACL,EACArmB,KAAKgrB,MACL,EACAhrB,KAAKirB,MACLjrB,KAAK0mB,KAAKxjB,GACVlD,KAAK2mB,KAAKzjB,GAAK,EACflD,KAAK6mB,OAAO3jB,GACZlD,KAAKknB,WACLlnB,KAAK+mB,SAAS7jB,GACdlD,KAAK8mB,SAAS5jB,GACdA,EACAlD,KAAKumB,aAGPvmB,KAAK2R,OAAO3R,KAAK4mB,QAAQ1jB,GAAK,KAAKgoB,OACjClrB,KAAKqmB,OACL,EACArmB,KAAKgrB,MACL,EACAhrB,KAAKirB,MACLjrB,KAAK0mB,KAAKxjB,GACVlD,KAAK2mB,KAAKzjB,GAAK,EACflD,KAAK6mB,OAAO3jB,GACZlD,KAAKknB,WACLlnB,KAAK+mB,SAAS7jB,GACdlD,KAAK8mB,SAAS5jB,GACdA,EACAlD,KAAKumB,iBAGJ,CAEL,IAAI4E,EAAMnrB,KAAK4mB,QAAQ1jB,GACL,IAAP,EAANioB,KACHA,EAAMnrB,KAAK4mB,QAAQ1jB,GAAK,EAAI,KAG9B,IAAI8nB,EAAQ,EACRC,EAAQ,EAERjrB,KAAK2mB,KAAKzjB,GAAK2nB,IACjBG,EAAQH,EAAY7qB,KAAK2mB,KAAKzjB,GAAK,GAGjClD,KAAK2mB,KAAKzjB,GAAK,EAAI2nB,EAAYC,IACjCG,EAAQJ,EAAYC,EAAY9qB,KAAK2mB,KAAKzjB,IAG5ClD,KAAK2R,OAAOwZ,GAAOnrB,KAAK8mB,SAAS5jB,GAAK,EAAI,IAAIgoB,OAC5ClrB,KAAKqmB,OACL,EACA2E,EACA,EACAC,EACAjrB,KAAK0mB,KAAKxjB,GACVlD,KAAK2mB,KAAKzjB,GAAK,EACflD,KAAK6mB,OAAO3jB,GACZlD,KAAKknB,WACLlnB,KAAK+mB,SAAS7jB,GACdlD,KAAK8mB,SAAS5jB,GACdA,EACAlD,KAAKumB,aAGPyE,EAAQ,EACRC,EAAQ,EAEJjrB,KAAK2mB,KAAKzjB,GAAK,EAAI2nB,IACrBG,EAAQH,GAAa7qB,KAAK2mB,KAAKzjB,GAAK,EAAI,IAGtClD,KAAK2mB,KAAKzjB,GAAK,GAAK2nB,EAAYC,IAClCG,EAAQJ,EAAYC,GAAa9qB,KAAK2mB,KAAKzjB,GAAK,IAGlDlD,KAAK2R,OAAOwZ,GAAOnrB,KAAK8mB,SAAS5jB,GAAK,EAAI,IAAIgoB,OAC5ClrB,KAAKqmB,OACL,EACA2E,EACA,EACAC,EACAjrB,KAAK0mB,KAAKxjB,GACVlD,KAAK2mB,KAAKzjB,GAAK,EAAI,EACnBlD,KAAK6mB,OAAO3jB,GACZlD,KAAKknB,WACLlnB,KAAK+mB,SAAS7jB,GACdlD,KAAK8mB,SAAS5jB,GACdA,EACAlD,KAAKumB,eAQjB+B,aAAc,SAAUyB,GAItB,IAAIqB,EAHJprB,KAAK4Y,UAAY,EACjB5Y,KAAK+Y,UAAY,EAGjB,IACIS,EAAGC,EAAGwQ,EAAG/mB,EACTmoB,EAFAC,EAAsC,IAA1BtrB,KAAK+kB,iBAAyB,EAAI,IAOlD,GAHAvL,EAAIxZ,KAAK0mB,KAAK,GACdjN,EAAIzZ,KAAK2mB,KAAK,GAAK,EAEO,IAAtB3mB,KAAK6kB,cAIP,GAAIpL,GAAKsQ,GAAQtQ,EAAI,EAAIsQ,GAAQvQ,IAAM,GAAKA,EAAI,IAa9C,GAVAyQ,EAAIjqB,KAAK2R,OAAO3R,KAAK4mB,QAAQ,GAAK0E,GAGhCF,EADEprB,KAAK8mB,SAAS,GACN,GAAKiD,EAAOtQ,GAEZsQ,EAAOtQ,EAEnB2R,GAAW,EAEXC,EAAqB,IAAPtB,EAAavQ,EACvBxZ,KAAK+mB,SAAS,GAChB,IAAK7jB,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACvB,GAAIsW,GAAK,GAAKA,EAAI,KAEd6R,GAAe,GACfA,EAAc,OACoB,IAAlCrrB,KAAKumB,YAAY8E,IAEU,IAAvBpB,EAAEO,IAAIY,EAAUloB,GAGlB,OAFAlD,KAAK4Y,SAAWyS,EAAc,IAC9BrrB,KAAK+Y,SAAWgR,GACT,EAIbvQ,IACA6R,SAGF,IAAKnoB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACtB,GAAIsW,GAAK,GAAKA,EAAI,KAEd6R,GAAe,GACfA,EAAc,OACoB,IAAlCrrB,KAAKumB,YAAY8E,IAEU,IAAvBpB,EAAEO,IAAIY,EAAUloB,GAGlB,OAFAlD,KAAK4Y,SAAWyS,EAAc,IAC9BrrB,KAAK+Y,SAAWgR,GACT,EAIbvQ,IACA6R,UAQN,GAAI5R,GAAKsQ,GAAQtQ,EAAI,GAAKsQ,GAAQvQ,IAAM,GAAKA,EAAI,IAiC/C,IA5BE4R,EADEprB,KAAK8mB,SAAS,GACN,IAAMiD,EAAOtQ,GAEbsQ,EAAOtQ,GAGL,EAEZwQ,EAAIjqB,KAAK2R,OACP3R,KAAK4mB,QAAQ,IACV5mB,KAAK8mB,SAAS,GAAK,EAAI,IACG,IAAP,EAAlB9mB,KAAK4mB,QAAQ,IAAgB,IAAM,KAIzCqD,EAAIjqB,KAAK2R,OACP3R,KAAK4mB,QAAQ,IACV5mB,KAAK8mB,SAAS,GAAK,EAAI,IACG,IAAP,EAAlB9mB,KAAK4mB,QAAQ,IAAgB,IAAM,IAErC5mB,KAAK8mB,SAAS,GAChBsE,EAAU,GAAKA,EAEfA,GAAW,GAGfA,GAAW,EAEXC,EAAqB,IAAPtB,EAAavQ,EACvBxZ,KAAK+mB,SAAS,GAChB,IAAK7jB,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACvB,GAAIsW,GAAK,GAAKA,EAAI,KAEd6R,GAAe,GACfA,EAAc,OACoB,IAAlCrrB,KAAKumB,YAAY8E,IAEU,IAAvBpB,EAAEO,IAAIY,EAAUloB,GAGlB,OAFAlD,KAAK4Y,SAAWyS,EAAc,IAC9BrrB,KAAK+Y,SAAWgR,GACT,EAIbvQ,IACA6R,SAGF,IAAKnoB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACtB,GAAIsW,GAAK,GAAKA,EAAI,KAEd6R,GAAe,GACfA,EAAc,OACoB,IAAlCrrB,KAAKumB,YAAY8E,IAEU,IAAvBpB,EAAEO,IAAIY,EAAUloB,GAGlB,OAFAlD,KAAK4Y,SAAWyS,EAAc,IAC9BrrB,KAAK+Y,SAAWgR,GACT,EAIbvQ,IACA6R,IAMR,OAAO,GAMTlC,SAAU,SAAUva,EAAShH,GAC3B5H,KAAKyR,QAAQ7C,GAAWhH,EAGpBgH,EAAU,MACZ5O,KAAKyR,QAAQ7C,GAAWhH,EACxB5H,KAAKurB,aAAa3c,EAAShH,IAClBgH,GAAW,MAAUA,EAAU,KACxC5O,KAAKwrB,eAAexrB,KAAKonB,QAAQ,GAAIxY,EAAU,KAAQhH,GAC9CgH,GAAW,MAAUA,EAAU,KACxC5O,KAAKyrB,iBAAiBzrB,KAAKonB,QAAQ,GAAIxY,EAAU,KAAQhH,GAChDgH,GAAW,MAAUA,EAAU,MACxC5O,KAAKwrB,eAAexrB,KAAKonB,QAAQ,GAAIxY,EAAU,KAAQhH,GAC9CgH,GAAW,OAAUA,EAAU,MACxC5O,KAAKyrB,iBAAiBzrB,KAAKonB,QAAQ,GAAIxY,EAAU,MAAQhH,GAChDgH,GAAW,OAAUA,EAAU,MACxC5O,KAAKwrB,eAAexrB,KAAKonB,QAAQ,GAAIxY,EAAU,MAAQhH,GAC9CgH,GAAW,OAAUA,EAAU,MACxC5O,KAAKyrB,iBAAiBzrB,KAAKonB,QAAQ,GAAIxY,EAAU,MAAQhH,GAChDgH,GAAW,OAAUA,EAAU,MACxC5O,KAAKwrB,eAAexrB,KAAKonB,QAAQ,GAAIxY,EAAU,MAAQhH,GAC9CgH,GAAW,OAAUA,EAAU,MACxC5O,KAAKyrB,iBAAiBzrB,KAAKonB,QAAQ,GAAIxY,EAAU,MAAQhH,GAChDgH,GAAW,OAAUA,EAAU,OACxC5O,KAAK2oB,kBAMTA,eAAgB,WACd,IAAIzlB,EAEJ,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IACM,IAApBlD,KAAKslB,WACPtlB,KAAKmnB,WAAWjkB,GAAKlD,KAAKunB,SAASmE,SACN,GAA3B1rB,KAAKyR,QAAQ,MAASvO,IAGxBlD,KAAKmnB,WAAWjkB,GAAKlD,KAAKunB,SAASmE,SACN,GAA3B1rB,KAAKyR,QAAQ,MAASvO,IAI5B,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IACM,IAApBlD,KAAKslB,WACPtlB,KAAKknB,WAAWhkB,GAAKlD,KAAKunB,SAASmE,SACN,GAA3B1rB,KAAKyR,QAAQ,MAASvO,IAGxBlD,KAAKknB,WAAWhkB,GAAKlD,KAAKunB,SAASmE,SACN,GAA3B1rB,KAAKyR,QAAQ,MAASvO,KAS9BqoB,aAAc,SAAU3c,EAAShH,GAC/B,IAAI+jB,EAAYzZ,KAAKC,MAAMvD,EAAU,IACjCgd,EAAWhd,EAAU,GACrBgd,EAAW,EACb5rB,KAAK2R,OAAOga,GAAWE,YACrBD,EACAhkB,EACA5H,KAAKyR,QAAQ7C,EAAU,IAGzB5O,KAAK2R,OAAOga,GAAWE,YACrBD,EAAW,EACX5rB,KAAKyR,QAAQ7C,EAAU,GACvBhH,IAON4jB,eAAgB,SAAU1oB,EAAO8L,EAAShH,GACxC5H,KAAKqnB,UAAUvkB,GAAOynB,KAAK3b,GAAWhH,EAItC5H,KAAKsoB,aAAatoB,KAAK8Y,SAAW,KAMpC2S,iBAAkB,SAAU3oB,EAAO8L,EAAShH,GAC1C5H,KAAKqnB,UAAUvkB,GAAOgpB,YAAYld,EAAShH,IAK7CkhB,qBAAsB,SAAUla,EAAShH,GACvC,IAAImkB,EAAS7Z,KAAKC,MAAMvD,EAAU,GAEnB,IAAXmd,GAEF/rB,KAAKsoB,aAAatoB,KAAK8Y,SAAW,IAGhClK,EAAU,GAAM,EAElB5O,KAAK2mB,KAAKoF,GAAUnkB,EACXgH,EAAU,GAAM,EAEzB5O,KAAK4mB,QAAQmF,GAAUnkB,EACdgH,EAAU,GAAM,GAEzB5O,KAAK8mB,SAASiF,GAA6B,IAAV,IAARnkB,GACzB5H,KAAK+mB,SAASgF,GAA6B,IAAV,GAARnkB,GACzB5H,KAAKgnB,WAAW+E,GAA6B,IAAV,GAARnkB,GAC3B5H,KAAK6mB,OAAOkF,IAAmB,EAARnkB,IAAc,GAC5BgH,EAAU,GAAM,IAEzB5O,KAAK0mB,KAAKqF,GAAUnkB,IAIxBokB,MAAO,WAELhsB,KAAKgZ,cAAchZ,KAAK4nB,eAAe,GAEvC5nB,KAAKiE,IAAI4K,IAAInH,WAAW1H,KAAKiE,IAAI4K,IAAIjJ,UAGvC+J,aAAc,SAAU6J,EAAGC,GAEzB,OADAzZ,KAAKuR,mBACwC,WAAtCvR,KAAKiE,IAAIkL,IAAIkX,QAAQ5M,GAAK,GAAKD,IAGxCnR,gBAAiB,CAEf,UACA,YAEA,QACA,OACA,OACA,QACA,QAEA,QACA,OACA,OACA,QACA,QACA,QACA,OAEA,cACA,iBAEA,gBACA,eACA,mBACA,mBACA,YACA,gBACA,UACA,iBACA,iBACA,eACA,eACA,aAEA,wBACA,aAEA,mBACA,kBACA,UAEA,cAEA,UAEA,aACA,aAEA,OACA,WACA,uBACA,QACA,WAEA,SACA,SACA,WACA,cAEA,kBACA,QACA,mBACA,aACA,gBACA,2BAGFC,OAAQ,WACN,IAAIpF,EACAF,EAAQc,EAAMwE,OAAOtI,MAGzB,IADAgD,EAAMqkB,UAAY,GACbnkB,EAAI,EAAGA,EAAIlD,KAAKqnB,UAAU7kB,OAAQU,IACrCF,EAAMqkB,UAAUnkB,GAAKlD,KAAKqnB,UAAUnkB,GAAGoF,SAIzC,IADAtF,EAAM2O,OAAS,GACVzO,EAAI,EAAGA,EAAIlD,KAAK2R,OAAOnP,OAAQU,IAClCF,EAAM2O,OAAOzO,GAAKlD,KAAK2R,OAAOzO,GAAGoF,SAGnC,OAAOtF,GAGTuF,SAAU,SAAUvF,GAClB,IAAIE,EAIJ,IAFAY,EAAMyE,SAASvI,KAAMgD,GAEhBE,EAAI,EAAGA,EAAIlD,KAAKqnB,UAAU7kB,OAAQU,IACrClD,KAAKqnB,UAAUnkB,GAAGqF,SAASvF,EAAMqkB,UAAUnkB,IAG7C,IAAKA,EAAI,EAAGA,EAAIlD,KAAK2R,OAAOnP,OAAQU,IAClClD,KAAK2R,OAAOzO,GAAGqF,SAASvF,EAAM2O,OAAOzO,IAIvC,IAAKA,EAAI,EAAGA,EAAIlD,KAAKikB,UAAUzhB,OAAQU,IACrClD,KAAK8oB,qBAAqB5lB,EAAGlD,KAAKikB,UAAU/gB,MAKlD,IAAI2kB,EAAY,SAAUoE,EAAOC,EAAQC,GACvCnsB,KAAKisB,MAAQA,EACbjsB,KAAKksB,OAASA,EACdlsB,KAAKmsB,KAAOA,EAEZnsB,KAAKuqB,KAAO,IAAItnB,MAAMgpB,EAAQC,GAC9BlsB,KAAKomB,OAAS,IAAInjB,MAAMgpB,EAAQC,GAChC,IAAK,IAAIhpB,EAAI,EAAGA,EAAI+oB,EAAQC,EAAQhpB,IAClClD,KAAKuqB,KAAKrnB,GAAK,EACflD,KAAKomB,OAAOljB,GAAK,GAIrB2kB,EAAU3pB,UAAY,CACpBusB,aAAc,SAAUjR,EAAGC,GACzB,OAAOzZ,KAAKuqB,KAAK9Q,EAAIzZ,KAAKisB,MAAQzS,IAGpCkR,UAAW,SAAUlR,EAAGC,GACtB,OAAOzZ,KAAKomB,OAAO3M,EAAIzZ,KAAKisB,MAAQzS,IAGtCsS,YAAa,SAAUhpB,EAAO8E,GAO5B,IANA,IAEIvB,EACA+lB,EACAC,EAJAC,EAASxpB,EAAQ,EAAK,EACtBypB,EAAgC,EAAxBra,KAAKC,MAAMrP,EAAQ,GAKtB0pB,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChCpmB,EAAOuB,GAAU,GAAW,EAAN4kB,EAAUC,GAAS,EACzC,IAAK,IAAIhT,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACrB4S,EAAKE,EAAc,EAANG,EAAUjT,EAEvB6S,GADKE,EAAc,EAANC,EAAU/S,GACPzZ,KAAKisB,MAAQG,EAC7BpsB,KAAKomB,OAAOiG,GAAahmB,GAAO,EAAK,KAO/CiC,OAAQ,WACN,MAAO,CACLiiB,KAAMvqB,KAAKuqB,KACXnE,OAAQpmB,KAAKomB,SAIjB7d,SAAU,SAAUC,GAClBxI,KAAKuqB,KAAO/hB,EAAE+hB,KACdvqB,KAAKomB,OAAS5d,EAAE4d,SAIpB,IAAI0B,EAAe,WACjB9nB,KAAK0sB,SAAW,IAAIzpB,MAAM,IAC1BjD,KAAK2sB,UAAY,IAAI1pB,MAAM,GAC3BjD,KAAK4sB,aAAe,GAGtB9E,EAAa5pB,UAAY,CACvBwH,MAAO,WACL1F,KAAK0oB,YAAY,IAGnBX,gBAAiB,WAEf/nB,KAAK0sB,SAAW,CAAC,QAAU,SAAU,SAAU,SAAU,QAAU,GAAU,GAAU,KAAU,MAAU,OAAU,MAAU,QAAU,QAAU,EAAU,EAAU,EAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAU,KAAU,MAAU,MAAU,MAAU,MAAU,QAAU,SAAU,EAAU,EAAU,EAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAU,MAAU,MAAU,MAAU,OAAU,QAAU,SAAU,QAAU,EAAU,EAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAU,QAAU,SAAU,SAAU,SAAU,SAAU,EAAU,GACvoB1sB,KAAK6sB,aACL7sB,KAAK0oB,YAAY,IAGnBoE,eAAgB,WAEd9sB,KAAK0sB,SAAW,CAAC,QAAU,SAAU,SAAU,SAAU,QAAU,GAAU,GAAU,KAAU,MAAU,OAAU,MAAU,QAAU,QAAU,EAAU,EAAU,EAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAU,KAAU,MAAU,MAAU,MAAU,MAAU,QAAU,SAAU,EAAU,EAAU,EAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAU,MAAU,MAAU,MAAU,OAAU,QAAU,SAAU,QAAU,EAAU,EAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAU,QAAU,SAAU,SAAU,SAAU,SAAU,EAAU,GACvoB1sB,KAAK6sB,aACL7sB,KAAK0oB,YAAY,IAGnBmE,WAAY,WAIV,IAHA,IAAIE,EAAGC,EAAGC,EAAG7C,EAAKlnB,EAAGgqB,EAASC,EAASC,EAG9BC,EAAO,EAAGA,EAAO,EAAGA,IAsB3B,IApBAH,EAAU,EACVC,EAAU,EACVC,EAAU,EAES,IAAP,EAAPC,KACHH,EAAU,IACVE,EAAU,KAEO,IAAP,EAAPC,KACHH,EAAU,IACVC,EAAU,KAEO,IAAP,EAAPE,KACHF,EAAU,IACVC,EAAU,KAGZptB,KAAK2sB,UAAUU,GAAQ,IAAIpqB,MAAM,IAG5BC,EAAI,EAAGA,EAAI,GAAIA,IAClBknB,EAAMpqB,KAAK0sB,SAASxpB,GACpB6pB,EAAI7a,KAAKC,MAAMnS,KAAKstB,OAAOlD,GAAO8C,GAClCF,EAAI9a,KAAKC,MAAMnS,KAAKutB,SAASnD,GAAO+C,GACpCF,EAAI/a,KAAKC,MAAMnS,KAAKwtB,QAAQpD,GAAOgD,GACnCptB,KAAK2sB,UAAUU,GAAMnqB,GAAKlD,KAAKytB,OAAOV,EAAGC,EAAGC,IAKlDvE,YAAa,SAAU2E,GACrB,GAAIA,IAASrtB,KAAK4sB,YAAa,CAC7B5sB,KAAK4sB,YAAcS,EACnB,IAAK,IAAInqB,EAAI,EAAGA,EAAI,GAAIA,IACtBlD,KAAK0sB,SAASxpB,GAAKlD,KAAK2sB,UAAUU,GAAMnqB,KAK9CwoB,SAAU,SAAUgC,GAClB,OAAO1tB,KAAK0sB,SAASgB,IAGvBJ,OAAQ,SAAUK,GAChB,OAAQA,GAAO,GAAM,KAGvBJ,SAAU,SAAUI,GAClB,OAAQA,GAAO,EAAK,KAGtBH,QAAS,SAAUG,GACjB,OAAa,IAANA,GAGTF,OAAQ,SAAUV,EAAGC,EAAGC,GACtB,OAAQF,GAAK,GAAOC,GAAK,EAAKC,GAGhCW,mBAAoB,WAClB5tB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,IAAK,IAAK,KACzCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,GAAI,GAAI,KACvCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,EAAG,EAAG,KACrCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,GAAI,EAAG,KACtCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,IAAK,EAAG,KACvCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,IAAK,EAAG,IACvCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,IAAK,EAAG,GACvCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,IAAK,GAAI,GACxCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,GAAI,GAAI,GACvCztB,KAAK0sB,SAAS,GAAK1sB,KAAKytB,OAAO,EAAG,GAAI,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,GAAI,GACvCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,GAAI,IACvCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,GAAI,GAAI,IACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,IAAK,KACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,GAAI,GAAI,KACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,EAAG,KACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,EAAG,KACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,EAAG,IACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,GAAI,GACzCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,GAAI,IACzCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,GAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,IAAK,GACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,IAAK,GACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,IAAK,IACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,IAAK,KACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,GAAI,IAAK,KACzCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,GAAI,IAAK,KACzCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,IAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,IAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,IAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,IAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,GAAI,IAAK,IACzCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,GAAI,IAAK,KACzCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,IAAK,KACxCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,IAAK,IAAK,KAC1CztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GACtCztB,KAAK0sB,SAAS,IAAM1sB,KAAKytB,OAAO,EAAG,EAAG,GAEtCztB,KAAK6sB,aACL7sB,KAAK0oB,YAAY,KAIrBjsB,EAAOC,QAAUya,G,+BCxtDjB,IAAI9I,EAAUtK,EAAQ,OAClBigB,EAAOjgB,EAAQ,OAEfsT,EAAM,SAAUpT,GAClBjE,KAAKiE,IAAMA,EAEXjE,KAAK6tB,WAAa,IAAI5qB,MAAM,IAE5B,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBlD,KAAK6tB,WAAW3qB,GAAK,iBAEvBlD,KAAK6tB,WAAW,GAAK,gBACrB7tB,KAAK6tB,WAAW,GAAK,gBACrB7tB,KAAK6tB,WAAW,GAAK,QACrB7tB,KAAK6tB,WAAW,GAAK,QACrB7tB,KAAK6tB,WAAW,GAAK,gBACrB7tB,KAAK6tB,WAAW,GAAK,gBACrB7tB,KAAK6tB,WAAW,GAAK,YACrB7tB,KAAK6tB,WAAW,GAAK,QACrB7tB,KAAK6tB,WAAW,GAAK,YACrB7tB,KAAK6tB,WAAW,GAAK,gBACrB7tB,KAAK6tB,WAAW,IAAM,gBACtB7tB,KAAK6tB,WAAW,IAAM,oBACtB7tB,KAAK6tB,WAAW,IAAM,YACtB7tB,KAAK6tB,WAAW,IAAM,kBACtB7tB,KAAK6tB,WAAW,IAAM,cACtB7tB,KAAK6tB,WAAW,IAAM,YACtB7tB,KAAK6tB,WAAW,IAAM,qBACtB7tB,KAAK6tB,WAAW,IAAM,kBACtB7tB,KAAK6tB,WAAW,IAAM,sBACtB7tB,KAAK6tB,WAAW,IAAM,eACtB7tB,KAAK6tB,WAAW,IAAM,eACtB7tB,KAAK6tB,WAAW,IAAM,eACtB7tB,KAAK6tB,WAAW,IAAM,cACtB7tB,KAAK6tB,WAAW,IAAM,eACtB7tB,KAAK6tB,WAAW,IAAM,kBACtB7tB,KAAK6tB,WAAW,IAAM,sBACtB7tB,KAAK6tB,WAAW,IAAM,kBAEtB7tB,KAAK6tB,WAAW,IAAM,sBACtB7tB,KAAK6tB,WAAW,IAAM,mBACtB7tB,KAAK6tB,WAAW,IAAM,eACtB7tB,KAAK6tB,WAAW,IAAM,gBACtB7tB,KAAK6tB,WAAW,IAAM,gBACtB7tB,KAAK6tB,WAAW,IAAM,sBACtB7tB,KAAK6tB,WAAW,IAAM,gBACtB7tB,KAAK6tB,WAAW,IAAM,wBACtB7tB,KAAK6tB,WAAW,IAAM,sBAGxBxW,EAAInZ,UAAY,CAEd6V,mBAAoB,EACpBD,qBAAsB,EACtBga,qBAAsB,EACtBja,uBAAwB,EACxBmD,wBAAyB,EACzB+W,wBAAyB,EACzBC,wBAAyB,EACzBC,iBAAkB,EAElBC,OAAQ,KACRzd,IAAK,KACLe,KAAM,KACNE,SAAU,KAEVf,SAAU,KACVM,UAAW,KACX+B,UAAW,KACX7B,WAAY,KACZgd,QAAS,KACTC,WAAY,KACZC,WAAY,KACZ3d,OAAO,EAEP/J,KAAM,SAAUoT,GACd,IAAI7W,EAAG6C,EAAGuoB,EAEV,IAAiC,IAA7BvU,EAAKwU,QAAQ,QACf,MAAM,IAAI3d,MAAM,wBAGlB,IADA5Q,KAAKkuB,OAAS,IAAIjrB,MAAM,IACnBC,EAAI,EAAGA,EAAI,GAAIA,IAClBlD,KAAKkuB,OAAOhrB,GAA0B,IAArB6W,EAAKyU,WAAWtrB,GAEnClD,KAAK2Q,SAAW3Q,KAAKkuB,OAAO,GAC5BluB,KAAKiR,UAA6B,EAAjBjR,KAAKkuB,OAAO,GAC7BluB,KAAKgT,UAAqC,IAAP,EAAjBhT,KAAKkuB,OAAO,IAAgB,EAAI,EAClDluB,KAAKmR,WAAsC,IAAP,EAAjBnR,KAAKkuB,OAAO,IAC/BluB,KAAKmuB,QAAmC,IAAP,EAAjBnuB,KAAKkuB,OAAO,IAC5BluB,KAAKouB,WAAsC,IAAP,EAAjBpuB,KAAKkuB,OAAO,IAC/BluB,KAAKquB,WAAcruB,KAAKkuB,OAAO,IAAM,EAAuB,IAAjBluB,KAAKkuB,OAAO,GAKvD,IAAIO,GAAa,EACjB,IAAKvrB,EAAI,EAAGA,EAAI,GAAIA,IAClB,GAAuB,IAAnBlD,KAAKkuB,OAAOhrB,GAAU,CACxBurB,GAAa,EACb,MAGAA,IACFzuB,KAAKquB,YAAc,IAGrBruB,KAAKyQ,IAAM,IAAIxN,MAAMjD,KAAK2Q,UAC1B,IAkCIgb,EACAC,EAnCAhqB,EAAS,GACb,IAAKsB,EAAI,EAAGA,EAAIlD,KAAK2Q,SAAUzN,IAAK,CAElC,IADAlD,KAAKyQ,IAAIvN,GAAK,IAAID,MAAM,OACnB8C,EAAI,EAAGA,EAAI,SACVnE,EAASmE,GAAKgU,EAAKvX,QADFuD,IAIrB/F,KAAKyQ,IAAIvN,GAAG6C,GAAmC,IAA9BgU,EAAKyU,WAAW5sB,EAASmE,GAE5CnE,GAAU,MAIZ,IADA5B,KAAKwR,KAAO,IAAIvO,MAAMjD,KAAKiR,WACtB/N,EAAI,EAAGA,EAAIlD,KAAKiR,UAAW/N,IAAK,CAEnC,IADAlD,KAAKwR,KAAKtO,GAAK,IAAID,MAAM,MACpB8C,EAAI,EAAGA,EAAI,QACVnE,EAASmE,GAAKgU,EAAKvX,QADHuD,IAIpB/F,KAAKwR,KAAKtO,GAAG6C,GAAmC,IAA9BgU,EAAKyU,WAAW5sB,EAASmE,GAE7CnE,GAAU,KAKZ,IADA5B,KAAK0R,SAAW,IAAIzO,MAAMjD,KAAKiR,WAC1B/N,EAAI,EAAGA,EAAIlD,KAAKiR,UAAW/N,IAE9B,IADAlD,KAAK0R,SAASxO,GAAK,IAAID,MAAM,KACxB8C,EAAI,EAAGA,EAAI,IAAKA,IACnB/F,KAAK0R,SAASxO,GAAG6C,GAAK,IAAIie,EAO9B,IAAKsK,EAAI,EAAGA,EAAItuB,KAAKiR,UAAWqd,IAC9B,IAAKprB,EAAI,EAAGA,EAAI,KAAMA,IACpByoB,EAAYzoB,GAAK,GACjB0oB,EAAW1oB,EAAI,IACA,EACblD,KAAK0R,SAAS4c,GAAG3C,GAAWE,YAC1BD,EACA5rB,KAAKwR,KAAK8c,GAAGprB,GACblD,KAAKwR,KAAK8c,GAAGprB,EAAI,IAGnBlD,KAAK0R,SAAS4c,GAAG3C,GAAWE,YAC1BD,EAAW,EACX5rB,KAAKwR,KAAK8c,GAAGprB,EAAI,GACjBlD,KAAKwR,KAAK8c,GAAGprB,IAMrBlD,KAAK0Q,OAAQ,GAGfuJ,iBAAkB,WAChB,OAAIja,KAAKouB,WACApuB,KAAK8tB,qBAES,IAAnB9tB,KAAKgT,UACAhT,KAAK8T,qBAEP9T,KAAK+T,oBAGd2a,cAAe,WACb,OAAI1uB,KAAKquB,YAAc,GAAKruB,KAAKquB,WAAaruB,KAAK6tB,WAAWrrB,OACrDxC,KAAK6tB,WAAW7tB,KAAKquB,YAEvB,mBAAqBruB,KAAKquB,YAGnCM,gBAAiB,WACf,YAA2C,IAA7BtgB,EAAQrO,KAAKquB,aAG7BrU,aAAc,WACZ,GAAIha,KAAK2uB,kBACP,OAAO,IAAItgB,EAAQrO,KAAKquB,YAAYruB,KAAKiE,KAEzC,MAAM,IAAI2M,MACR,kDACE5Q,KAAK0uB,gBACL,IACA1uB,KAAKquB,WACL,OAMV5xB,EAAOC,QAAU2a,G,kBC3MjB,IAAI2M,EAAO,WAEThkB,KAAKwqB,IAAM,IAAIvnB,MAAM,IAErBjD,KAAK4uB,QAAU,KACf5uB,KAAK+rB,OAAS,KACd/rB,KAAKwZ,EAAI,KACTxZ,KAAKyZ,EAAI,KACTzZ,KAAK0P,EAAI,KACT1P,KAAK6uB,EAAI,KACT7uB,KAAK8uB,KAAO,KACZ9uB,KAAK+uB,KAAO,KACZ/uB,KAAKgvB,SAAW,KAChBhvB,KAAKivB,KAAO,KACZjvB,KAAKkvB,EAAI,KACTlvB,KAAKmvB,aAAc,EACnBnvB,KAAK4qB,OAAS,IAAI3nB,MAAM,IAG1B+gB,EAAK9lB,UAAY,CACfkxB,UAAW,SAAUtW,GACnB,IAAK9Y,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,IAChCzZ,KAAK6rB,YAAY7rB,KAAKyZ,EAAGX,EAAS9Y,KAAKyZ,GAAIX,EAAS9Y,KAAKyZ,EAAI,KAIjEoS,YAAa,SAAUwD,EAAOhG,EAAIC,GAGhC,IAFAtpB,KAAKmvB,aAAc,EACnBnvB,KAAK+rB,OAASsD,GAAS,EAClBrvB,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,IAChCxZ,KAAKwqB,IAAIxqB,KAAK+rB,OAAS/rB,KAAKwZ,IACxB6P,GAAO,EAAIrpB,KAAKwZ,EAAM,KAAQ8P,GAAO,EAAItpB,KAAKwZ,EAAM,IAAM,GACvB,IAAnCxZ,KAAKwqB,IAAIxqB,KAAK+rB,OAAS/rB,KAAKwZ,KAC9BxZ,KAAK4qB,OAAOyE,IAAS,IAK3BnE,OAAQ,SACN7E,EACAiJ,EACAtE,EACAuE,EACAtE,EACAuE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,KAAIP,GAAM,GAAKA,GAAM,KAAOC,GAAM,GAAKA,GAAM,KAqB7C,GAjBAzvB,KAAK0P,EAAI6f,EAAQD,EACjBtvB,KAAK6uB,EAAI5D,EAAQD,EAEbwE,EAAK,IACPF,GAASE,GAEPA,EAAKD,GAAS,MAChBA,EAAQ,IAAMC,GAGZC,EAAK,IACPzE,GAASyE,GAEPA,EAAKxE,GAAS,MAChBA,EAAQ,IAAMwE,GAGXG,GAAmBC,EA0BjB,GAAID,IAAmBC,EAG5B,IAFA7vB,KAAK4uB,SAAWa,GAAM,GAAKD,EAC3BxvB,KAAK+rB,OAAS,EACT/rB,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,IAAK,CACrC,IAAKzZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,IAE9BxZ,KAAKwZ,GAAK8V,GACVtvB,KAAKwZ,EAAI+V,GACTvvB,KAAKyZ,GAAKuR,GACVhrB,KAAKyZ,EAAIwR,IAETjrB,KAAKgvB,SAAWhvB,KAAKwqB,IAAIxqB,KAAK+rB,QAC9B/rB,KAAKivB,KAAOc,EAAS/vB,KAAK4uB,SACJ,IAAlB5uB,KAAKgvB,UAAkBc,IAAoB,IAAZ9vB,KAAKivB,QACtC5I,EAAOrmB,KAAK4uB,SAAWe,EAAQ3vB,KAAKgvB,SAAWU,GAC/C1vB,KAAKivB,KAAoB,KAAZjvB,KAAKivB,KAAgBa,EAClCC,EAAS/vB,KAAK4uB,SAAW5uB,KAAKivB,OAGlCjvB,KAAK4uB,UACL5uB,KAAK+rB,SAEP/rB,KAAK4uB,SAAW,EAChB5uB,KAAK4uB,SAAW,IAChB5uB,KAAK+rB,QAAU,QAEZ,GAAI8D,IAAiBD,EAG1B,IAFA5vB,KAAK4uB,SAAWa,GAAM,GAAKD,EAC3BxvB,KAAK+rB,OAAS,GACT/rB,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,IAAK,CACrC,IAAKzZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,IAE9BxZ,KAAKwZ,GAAK8V,GACVtvB,KAAKwZ,EAAI+V,GACTvvB,KAAKyZ,GAAKuR,GACVhrB,KAAKyZ,EAAIwR,IAETjrB,KAAKgvB,SAAWhvB,KAAKwqB,IAAIxqB,KAAK+rB,QAC9B/rB,KAAKivB,KAAOc,EAAS/vB,KAAK4uB,SACJ,IAAlB5uB,KAAKgvB,UAAkBc,IAAoB,IAAZ9vB,KAAKivB,QACtC5I,EAAOrmB,KAAK4uB,SAAWe,EAAQ3vB,KAAKgvB,SAAWU,GAC/C1vB,KAAKivB,KAAoB,KAAZjvB,KAAKivB,KAAgBa,EAClCC,EAAS/vB,KAAK4uB,SAAW5uB,KAAKivB,OAGlCjvB,KAAK4uB,UACL5uB,KAAK+rB,SAEP/rB,KAAK4uB,SAAW,EAChB5uB,KAAK4uB,SAAW,IAChB5uB,KAAK+rB,QAAU,QAKjB,IAFA/rB,KAAK4uB,SAAWa,GAAM,GAAKD,EAC3BxvB,KAAK+rB,OAAS,GACT/rB,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,IAAK,CACrC,IAAKzZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,IAE9BxZ,KAAKwZ,GAAK8V,GACVtvB,KAAKwZ,EAAI+V,GACTvvB,KAAKyZ,GAAKuR,GACVhrB,KAAKyZ,EAAIwR,IAETjrB,KAAKgvB,SAAWhvB,KAAKwqB,IAAIxqB,KAAK+rB,QAC9B/rB,KAAKivB,KAAOc,EAAS/vB,KAAK4uB,SACJ,IAAlB5uB,KAAKgvB,UAAkBc,IAAoB,IAAZ9vB,KAAKivB,QACtC5I,EAAOrmB,KAAK4uB,SAAWe,EAAQ3vB,KAAKgvB,SAAWU,GAC/C1vB,KAAKivB,KAAoB,KAAZjvB,KAAKivB,KAAgBa,EAClCC,EAAS/vB,KAAK4uB,SAAW5uB,KAAKivB,OAGlCjvB,KAAK4uB,UACL5uB,KAAK+rB,SAEP/rB,KAAK4uB,SAAW,EAChB5uB,KAAK4uB,SAAW,SAlGlB,IAFA5uB,KAAK4uB,SAAWa,GAAM,GAAKD,EAC3BxvB,KAAK+rB,OAAS,EACT/rB,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,EAAI,EAAGzZ,KAAKyZ,IAAK,CACrC,IAAKzZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,EAAI,EAAGxZ,KAAKwZ,IAE9BxZ,KAAKwZ,GAAK8V,GACVtvB,KAAKwZ,EAAI+V,GACTvvB,KAAKyZ,GAAKuR,GACVhrB,KAAKyZ,EAAIwR,IAETjrB,KAAKgvB,SAAWhvB,KAAKwqB,IAAIxqB,KAAK+rB,QAC9B/rB,KAAKivB,KAAOc,EAAS/vB,KAAK4uB,SACJ,IAAlB5uB,KAAKgvB,UAAkBc,IAAoB,IAAZ9vB,KAAKivB,QAEtC5I,EAAOrmB,KAAK4uB,SAAWe,EAAQ3vB,KAAKgvB,SAAWU,GAC/C1vB,KAAKivB,KAAoB,KAAZjvB,KAAKivB,KAAgBa,EAClCC,EAAS/vB,KAAK4uB,SAAW5uB,KAAKivB,OAGlCjvB,KAAK4uB,UACL5uB,KAAK+rB,SAEP/rB,KAAK4uB,SAAW,EAChB5uB,KAAK4uB,SAAW,MAkFtBoB,cAAe,SAAUxW,EAAGC,GAC1B,OAAkC,IAA3BzZ,KAAKwqB,KAAK/Q,GAAK,GAAKD,IAG7BlR,OAAQ,WACN,MAAO,CACLsiB,OAAQ5qB,KAAK4qB,OACbJ,IAAKxqB,KAAKwqB,MAIdjiB,SAAU,SAAUC,GAClBxI,KAAK4qB,OAASpiB,EAAEoiB,OAChB5qB,KAAKwqB,IAAMhiB,EAAEgiB,MAIjB/tB,EAAOC,QAAUsnB,G,kBCrMjBvnB,EAAOC,QAAU,CACf2U,kBAAmB,SAAUzO,EAAKqtB,EAAQC,EAAMC,EAAS3tB,GACvD,IAAK,IAAIU,EAAI,EAAGA,EAAIV,IAAUU,EAC5BgtB,EAAKC,EAAUjtB,GAAKN,EAAIqtB,EAAS/sB,IAIrCktB,UAAW,SAAUxtB,GACnB,OAAOA,EAAIytB,MAAM,IAGnB9nB,SAAU,SAAU+nB,EAAKttB,GACvB,IAAK,IAAIE,EAAI,EAAGA,EAAIotB,EAAIjoB,gBAAgB7F,OAAQU,IAC9CotB,EAAIA,EAAIjoB,gBAAgBnF,IAAMF,EAAMstB,EAAIjoB,gBAAgBnF,KAI5DoF,OAAQ,SAAUgoB,GAEhB,IADA,IAAIttB,EAAQ,GACHE,EAAI,EAAGA,EAAIotB,EAAIjoB,gBAAgB7F,OAAQU,IAC9CF,EAAMstB,EAAIjoB,gBAAgBnF,IAAMotB,EAAIA,EAAIjoB,gBAAgBnF,IAE1D,OAAOF,K,+FCrBX,MACMutB,EADe1H,CAAAA,KAAM2H,EAAAA,EAAAA,IAAa,mBAAoB3H,EAAIA,KAAK4H,EAAAA,EAAAA,MAAe5H,GACnD6H,EAAa,KAAoBC,EAAAA,EAAAA,GAAoB,IAAK,CAAEC,MAAO,CAAE,YAAa,SAAY,OAAQ,KACjIC,EAAa,CAAEC,MAAO,OCD5B,MAAMC,EAAa,CACjB,GAAI,aACJ,MAAO,MACP,OAAQ,MACR,MAAO,CAAC,MAAQ,S,QCLlB,MAAMC,EAAQjtB,EAAQ,MAKtB,IAAIktB,EAEAC,EAEAC,EAEAC,EACJ,MACMC,EAAe,KACfC,EAAcD,KACdE,EAAkB,IAAIjyB,aAAa+xB,GACnCG,EAAkB,IAAIlyB,aAAa+xB,GACzC,IAAII,EAAqB,EAAGC,EAAoB,EAChD,MAAMztB,EAAM,IAAI+sB,EAAM5iB,IAAI,CAEtBkJ,QAAUqa,IACN,IAAK,IAAIzuB,EAAI,EAAGA,EAlBC0uB,MAkBqB1uB,IAClCkuB,EAAgBluB,GAAK,WAAayuB,EAAezuB,IAGzDqU,cAAe,SAAUsa,EAAG9E,GACxBwE,EAAgBE,GAAsBI,EACtCL,EAAgBC,GAAsB1E,EACtC0E,EAAsBA,EAAqB,EAAKH,KAGlDQ,EAAmB,KACrBC,OAAOC,sBAAsBF,GAC7BZ,EAAMnX,KAAK1X,IAAI8uB,GACfF,EAAWgB,aAAaf,EAAO,EAAG,IAMhCgB,EAAkBC,IACpB,MAAMC,EAAMD,EAAME,aACZxvB,EAAMuvB,EAAI5vB,QALRivB,EAAqBC,EAAqBJ,GAzB9B,KAiChBrtB,EAAI+T,QACR,MAAMsa,EAAQF,EAAIG,eAAe,GAC3BC,EAAQJ,EAAIG,eAAe,GACjC,IAAK,IAAIrvB,EAAI,EAAGA,EAAIL,EAAKK,IAAK,CAC1B,MAAMuvB,EAAWf,EAAoBxuB,EAAKouB,EAC1CgB,EAAMpvB,GAAKquB,EAAgBkB,GAC3BD,EAAMtvB,GAAKsuB,EAAgBiB,GAE/Bf,EAAqBA,EAAoB7uB,EAAOyuB,GAG9CoB,EAAW,CAACC,EAAUR,KAExB,OAAQA,EAAMS,SACV,KAAK,GACDD,EAHO,EAGU3B,EAAMjuB,WAAWQ,WAClC,MACJ,KAAK,GACDovB,EANO,EAMU3B,EAAMjuB,WAAWS,aAClC,MACJ,KAAK,GACDmvB,EATO,EASU3B,EAAMjuB,WAAWU,aAClC,MACJ,KAAK,GACDkvB,EAZO,EAYU3B,EAAMjuB,WAAWW,cAClC,MACJ,KAAK,GACL,KAAK,GACDivB,EAhBO,EAgBU3B,EAAMjuB,WAAWI,UAClC,MACJ,KAAK,GACL,KAAK,GACDwvB,EApBO,EAoBU3B,EAAMjuB,WAAWK,UAClC,MACJ,KAAK,EACDuvB,EAvBO,EAuBU3B,EAAMjuB,WAAWM,eAClC,MACJ,KAAK,GACDsvB,EA1BO,EA0BU3B,EAAMjuB,WAAWO,gBAMxCuvB,EAAYC,IAEd,MAAMC,EAASC,SAASC,eAAeH,GACvC7B,EAAa8B,EAAOG,WAAW,MAC/BhC,EAAQD,EAAWkC,aAAa,EAAG,EA5FlB,IACC,KA4FlBlC,EAAWmC,UAAY,QACvBnC,EAAWoC,SAAS,EAAG,EA9FN,IACC,KA+FlB,MAAMhN,EAAS,IAAI1pB,YAAYu0B,EAAMnX,KAAKvX,QAC1C2uB,EAAiB,IAAIhzB,kBAAkBkoB,GACvC+K,EAAkB,IAAI/xB,YAAYgnB,GAElC,MAAMiN,EAAY,IAAIvB,OAAOwB,aACvBC,EAAmBF,EAAUG,sBA1Ff,IA0FsD,EAAG,GAC7ED,EAAiBE,eAAiBxB,EAClCsB,EAAiBG,QAAQL,EAAUM,cAEjCC,EAAYC,IACd7vB,EAAIuM,QAAQsjB,GACZ/B,OAAOC,sBAAsBF,IAOpBiC,EAAe,CAACjB,EAAWkB,KACpCnB,EAASC,GAET,MAAMmB,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOH,GAChBC,EAAIG,iBAAiB,sCACrBH,EAAII,QAAU,OACdJ,EAAIK,OAAS,WACW,MAAhB,KAAKpsB,OACL2rB,EAAS,KAAKU,cAEO,IAAhB,KAAKrsB,QAIV+rB,EAAII,WAGZJ,EAAIO,QAERxB,SAASyB,iBAAiB,WAAYtC,IAClCO,EAASzuB,EAAIN,WAAYwuB,MAE7Ba,SAASyB,iBAAiB,SAAUtC,IAChCO,EAASzuB,EAAIJ,SAAUsuB,MDzI3B,OAAeuC,EAAAA,EAAAA,IAAgB,CAC7BvI,KAAM,OACNwI,MAAO,CACLC,QAASC,OACTvc,QAASuc,QAEX9a,KAAI,KACK,IAET+a,UACE,KAAKC,WAEPC,QAAS,CACPD,UCgGyB,IAACjC,EAAWgB,ED/F/B,KAAKc,SAA2B,IAAhB,KAAKA,QACvBb,EAAa,aAAc,KAAKa,SACzB,KAAKtc,SAA2B,IAAhB,KAAKA,UC6FNwa,ED5FR,aC4FmBgB,ED5FL,KAAKxb,QC6FrCua,EAASC,GACTe,EAASC,Q,WC3Gb,OAFiC,OAAgB,EAAQ,CAAC,CAAC,SFIpD,SAAgB,EAAM,EAAQ,EAAQ,EAAQ,EAAO,GACxD,OAAM7H,EAAAA,EAAAA,OAAc2E,EAAAA,EAAAA,IAAoB,SAAUG,OGRtD,GAAe2D,EAAAA,EAAAA,IAAgB,CAC3BvI,KAAM,WACNpS,KAAI,KACO,CACH6a,QAAS,GACTtc,QAAS,KAGjB2c,WAAY,CACRC,KAAAA,GAEJJ,YAaAE,QAAS,KCjBb,OAFiC,OAAgB,EAAQ,CAAC,CAAC,SLHpD,SAAgBG,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GACxD,MAAMC,GAAmBC,EAAAA,EAAAA,IAAkB,SAC3C,OAAQC,EAAAA,EAAAA,OAAc5E,EAAAA,EAAAA,IAAoB6E,EAAAA,GAAW,KAAM,CACvDrF,GACAI,EAAAA,EAAAA,GAAoB,MAAOE,EAAY,EACnCgF,EAAAA,EAAAA,IAAaJ,EAAkB,CAAEnd,QAAS6c,EAAK7c,SAAW,KAAM,EAAG,CAAC,eAEzE,MKJqE,CAAC,YAAY","sources":["webpack://fob/./node_modules/core-js/internals/array-buffer-native.js","webpack://fob/./node_modules/core-js/internals/array-buffer-view-core.js","webpack://fob/./node_modules/core-js/internals/correct-prototype-getter.js","webpack://fob/./node_modules/core-js/internals/object-get-prototype-of.js","webpack://fob/./node_modules/core-js/internals/to-offset.js","webpack://fob/./node_modules/core-js/internals/to-positive-integer.js","webpack://fob/./node_modules/core-js/modules/es.typed-array.set.js","webpack://fob/./node_modules/jsnes/src/controller.js","webpack://fob/./node_modules/jsnes/src/cpu.js","webpack://fob/./node_modules/jsnes/src/index.js","webpack://fob/./node_modules/jsnes/src/mappers.js","webpack://fob/./node_modules/jsnes/src/nes.js","webpack://fob/./node_modules/jsnes/src/papu.js","webpack://fob/./node_modules/jsnes/src/ppu.js","webpack://fob/./node_modules/jsnes/src/rom.js","webpack://fob/./node_modules/jsnes/src/tile.js","webpack://fob/./node_modules/jsnes/src/utils.js","webpack://fob/./node_modules/vue-loader/dist/templateLoader.js","webpack://fob/./src/components/Nes/NesG.vue","webpack://fob/./src/components/Nes/Nes.ts","webpack://fob/./src/components/Nes/NesG.vue?e721","webpack://fob/./node_modules/vue-loader/dist/index.js","webpack://fob/./src/views/Tools/Nes/NesGame.vue"],"sourcesContent":["// eslint-disable-next-line es/no-typed-arrays -- safe\nmodule.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n","'use strict';\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar hasOwn = require('../internals/has-own-property');\nvar classof = require('../internals/classof');\nvar tryToString = require('../internals/try-to-string');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar defineProperty = require('../internals/object-define-property').f;\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar uid = require('../internals/uid');\n\nvar Int8Array = global.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar Uint8ClampedArray = global.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\nvar TypedArray = Int8Array && getPrototypeOf(Int8Array);\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\nvar ObjectPrototype = Object.prototype;\nvar TypeError = global.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = uid('TYPED_ARRAY_CONSTRUCTOR');\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return klass === 'DataView'\n    || hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar isTypedArray = function (it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray = function (it) {\n  if (isTypedArray(it)) return it;\n  throw TypeError('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor = function (C) {\n  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;\n  throw TypeError(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype[KEY] || forced) {\n    redefine(TypedArrayPrototype, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS) return;\n  if (setPrototypeOf) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global[ARRAY];\n      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      redefine(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = global[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR, Constructor);\n  else NATIVE_ARRAY_BUFFER_VIEWS = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = global[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR, Constructor);\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray = function TypedArray() {\n    throw TypeError('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n  TypedArrayPrototype = TypedArray.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n}\n\nif (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {\n    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n  } });\n  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {\n    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);\n  }\n}\n\nmodule.exports = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n  TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,\n  aTypedArray: aTypedArray,\n  aTypedArrayConstructor: aTypedArrayConstructor,\n  exportTypedArrayMethod: exportTypedArrayMethod,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n  isView: isView,\n  isTypedArray: isTypedArray,\n  TypedArray: TypedArray,\n  TypedArrayPrototype: TypedArrayPrototype\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","var global = require('../internals/global');\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar Object = global.Object;\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof Object ? ObjectPrototype : null;\n};\n","var global = require('../internals/global');\nvar toPositiveInteger = require('../internals/to-positive-integer');\n\nvar RangeError = global.RangeError;\n\nmodule.exports = function (it, BYTES) {\n  var offset = toPositiveInteger(it);\n  if (offset % BYTES) throw RangeError('Wrong offset');\n  return offset;\n};\n","var global = require('../internals/global');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar RangeError = global.RangeError;\n\nmodule.exports = function (it) {\n  var result = toIntegerOrInfinity(it);\n  if (result < 0) throw RangeError(\"The argument can't be less than 0\");\n  return result;\n};\n","'use strict';\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toOffset = require('../internals/to-offset');\nvar toIndexedObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\n\nvar RangeError = global.RangeError;\nvar Int8Array = global.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar $set = Int8ArrayPrototype && Int8ArrayPrototype.set;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails(function () {\n  // eslint-disable-next-line es/no-typed-arrays -- required for testing\n  var array = new Uint8ClampedArray(2);\n  call($set, array, { length: 1, 0: 3 }, 1);\n  return array[1] !== 3;\n});\n\n// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other\nvar TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function () {\n  var array = new Int8Array(2);\n  array.set(1);\n  array.set('2', 1);\n  return array[0] !== 0 || array[1] !== 2;\n});\n\n// `%TypedArray%.prototype.set` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set\nexportTypedArrayMethod('set', function set(arrayLike /* , offset */) {\n  aTypedArray(this);\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n  var src = toIndexedObject(arrayLike);\n  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call($set, this, src, offset);\n  var length = this.length;\n  var len = lengthOfArrayLike(src);\n  var index = 0;\n  if (len + offset > length) throw RangeError('Wrong length');\n  while (index < len) this[offset + index] = src[index++];\n}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);\n","var Controller = function () {\n  this.state = new Array(8);\n  for (var i = 0; i < this.state.length; i++) {\n    this.state[i] = 0x40;\n  }\n};\n\nController.BUTTON_A = 0;\nController.BUTTON_B = 1;\nController.BUTTON_SELECT = 2;\nController.BUTTON_START = 3;\nController.BUTTON_UP = 4;\nController.BUTTON_DOWN = 5;\nController.BUTTON_LEFT = 6;\nController.BUTTON_RIGHT = 7;\n\nController.prototype = {\n  buttonDown: function (key) {\n    this.state[key] = 0x41;\n  },\n\n  buttonUp: function (key) {\n    this.state[key] = 0x40;\n  },\n};\n\nmodule.exports = Controller;\n","var utils = require(\"./utils\");\n\nvar CPU = function (nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function () {\n    // Main memory\n    this.mem = new Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function () {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 56: {\n        // *******\n        // * ALR *\n        // *******\n\n        // Shift right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.F_CARRY = temp & 1;\n        this.REG_ACC = this.F_ZERO = temp >> 1;\n        this.F_SIGN = 0;\n        break;\n      }\n      case 57: {\n        // *******\n        // * ANC *\n        // *******\n\n        // AND accumulator, setting carry to bit 7 result.\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        break;\n      }\n      case 58: {\n        // *******\n        // * ARR *\n        // *******\n\n        // Rotate right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\n        this.F_SIGN = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\n        break;\n      }\n      case 59: {\n        // *******\n        // * AXS *\n        // *******\n\n        // Set X to (X AND A) - value.\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_X = temp & 0xff;\n        break;\n      }\n      case 60: {\n        // *******\n        // * LAX *\n        // *******\n\n        // Load A and X with memory:\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 61: {\n        // *******\n        // * SAX *\n        // *******\n\n        // Store A AND X in memory:\n        this.write(addr, this.REG_ACC & this.REG_X);\n        break;\n      }\n      case 62: {\n        // *******\n        // * DCP *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then compare with the accumulator:\n        temp = this.REG_ACC - temp;\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 63: {\n        // *******\n        // * ISC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then subtract from the accumulator:\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 64: {\n        // *******\n        // * RLA *\n        // *******\n\n        // Rotate one bit left\n        temp = this.load(addr);\n        add = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = ((temp << 1) & 0xff) + add;\n        this.write(addr, temp);\n\n        // Then AND with the accumulator.\n        this.REG_ACC = this.REG_ACC & temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 65: {\n        // *******\n        // * RRA *\n        // *******\n\n        // Rotate one bit right\n        temp = this.load(addr);\n        add = this.F_CARRY << 7;\n        this.F_CARRY = temp & 1;\n        temp = (temp >> 1) + add;\n        this.write(addr, temp);\n\n        // Then add to the accumulator\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 66: {\n        // *******\n        // * SLO *\n        // *******\n\n        // Shift one bit left\n        temp = this.load(addr);\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = (temp << 1) & 255;\n        this.write(addr, temp);\n\n        // Then OR with the accumulator.\n        this.REG_ACC = this.REG_ACC | temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 67: {\n        // *******\n        // * SRE *\n        // *******\n\n        // Shift one bit right\n        temp = this.load(addr) & 0xff;\n        this.F_CARRY = temp & 1;\n        temp >>= 1;\n        this.write(addr, temp);\n\n        // Then XOR with the accumulator.\n        this.REG_ACC = this.REG_ACC ^ temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 68: {\n        // *******\n        // * SKB *\n        // *******\n\n        // Do nothing\n        break;\n      }\n      case 69: {\n        // *******\n        // * IGN *\n        // *******\n\n        // Do nothing but load.\n        // TODO: Properly implement the double-reads.\n        this.load(addr);\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function (addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function (addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function (addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function (type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function (value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function () {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function () {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function (addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function (cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function (status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function () {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function (status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function () {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function (st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\",\n  ],\n\n  toJSON: function () {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function (s) {\n    utils.fromJSON(this, s);\n  },\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function () {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // ALR:\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\n\n  // ANC:\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\n\n  // ARR:\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\n\n  // AXS:\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\n\n  // LAX:\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\n\n  // SAX:\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\n\n  // DCP:\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\n\n  // ISC:\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\n\n  // RLA:\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\n\n  // RRA:\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\n\n  // SLO:\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\n\n  // SRE:\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\n\n  // SKB:\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\n\n  // SKB:\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(70);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n  this.instname[56] = \"ALR\";\n  this.instname[57] = \"ANC\";\n  this.instname[58] = \"ARR\";\n  this.instname[59] = \"AXS\";\n  this.instname[60] = \"LAX\";\n  this.instname[61] = \"SAX\";\n  this.instname[62] = \"DCP\";\n  this.instname[63] = \"ISC\";\n  this.instname[64] = \"RLA\";\n  this.instname[65] = \"RRA\";\n  this.instname[66] = \"SLO\";\n  this.instname[67] = \"SRE\";\n  this.instname[68] = \"SKB\";\n  this.instname[69] = \"IGN\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_ALR: 56,\n  INS_ANC: 57,\n  INS_ARR: 58,\n  INS_AXS: 59,\n  INS_LAX: 60,\n  INS_SAX: 61,\n  INS_DCP: 62,\n  INS_ISC: 63,\n  INS_RLA: 64,\n  INS_RRA: 65,\n  INS_SLO: 66,\n  INS_SRE: 67,\n  INS_SKB: 68,\n  INS_IGN: 69,\n\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function (inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  },\n};\n\nmodule.exports = CPU;\n","module.exports = {\n  Controller: require(\"./controller\"),\n  NES: require(\"./nes\"),\n};\n","var utils = require(\"./utils\");\n\nvar Mappers = {};\n\nMappers[0] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function () {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function (address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to persistent RAM\n        this.nes.opts.onBatteryRamWrite(address, value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function (address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function (address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function (address) {\n    switch (\n      address >> 12 // use fourth nibble (0xF000)\n    ) {\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function (address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function () {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function () {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function () {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function () {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function () {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function () {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function (bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function (bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function (bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function (bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function (bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\n    }\n  },\n\n  load2kVromBank: function (bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\n    }\n  },\n\n  load8kRomBank: function (bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function () {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  latchAccess: function (address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function () {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite,\n    };\n  },\n\n  fromJSON: function (s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  },\n};\n\nMappers[1] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function () {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function (reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function (address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n// eslint-disable-next-line no-unused-vars\nMappers[1].prototype.switchLowHighPrgRom = function (oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function () {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function () {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function () {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function (s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function (nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.pageNumber = null;\n  this.irqCounter = null;\n  this.irqLatchValue = null;\n  this.irqEnable = null;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Counter register\n      this.irqCounter = value;\n      //nes.ppu.mapperIrqCounter = 0;\n      break;\n\n    case 0xc001:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable)\n      //irqCounter = irqLatchValue;\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function (cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function () {\n  if (this.irqEnable === 1) {\n    this.irqCounter--;\n    if (this.irqCounter < 0) {\n      // Trigger IRQ:\n      //nes.getCpu().doIrq();\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n      this.irqCounter = this.irqLatchValue;\n    }\n  }\n};\n\nMappers[4].prototype.toJSON = function () {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.pageNumber = this.pageNumber;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function (s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.pageNumber = s.pageNumber;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 038\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\n * @example Crime Busters\n * @constructor\n */\nMappers[38] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[38].prototype = new Mappers[0]();\n\nMappers[38].prototype.write = function (address, value) {\n  if (address < 0x7000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function (address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 094 (UN1ROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\n * @example Senjou no Ookami\n * @constructor\n */\nMappers[94] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[94].prototype = new Mappers[0]();\n\nMappers[94].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value >> 2, 0x8000);\n  }\n};\n\nMappers[94].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 140\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\n * @example Bio Senshi Dan - Increaser Tono Tatakai\n * @constructor\n */\nMappers[140] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[140].prototype = new Mappers[0]();\n\nMappers[140].prototype.write = function (address, value) {\n  if (address < 0x6000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 180\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\n * @example Crazy Climber\n * @constructor\n */\nMappers[180] = function (nes) {\n  this.nes = nes;\n};\n\nMappers[180].prototype = new Mappers[0]();\n\nMappers[180].prototype.write = function (address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0xc000:\n    this.loadRomBank(value, 0xc000);\n  }\n};\n\nMappers[180].prototype.loadROM = function () {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nmodule.exports = Mappers;\n","var CPU = require(\"./cpu\");\nvar Controller = require(\"./controller\");\nvar PPU = require(\"./ppu\");\nvar PAPU = require(\"./papu\");\nvar ROM = require(\"./rom\");\n\nvar NES = function (opts) {\n  this.opts = {\n    onFrame: function () {},\n    onAudioSample: null,\n    onStatusUpdate: function () {},\n    onBatteryRamWrite: function () {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 48000, // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate,\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller(),\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function () {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function () {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function (controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function (controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function (x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function () {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function () {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function () {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function () {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function (data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function (rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function () {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON(),\n    };\n  },\n\n  fromJSON: function (s) {\n    this.reset();\n    this.romData = s.romData;\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  },\n};\n\nmodule.exports = NES;\n","var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function (nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function () {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function (address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function (address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function () {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function (value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function (nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function (cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function () {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function () {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function (value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function (value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function (value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function (pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function (value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function () {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function () {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function () {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function () {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function () {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Array(32 * 16);\n    this.tnd_table = new Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  },\n};\n\nvar ChannelDM = function (papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function () {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function () {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function () {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function (address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function (value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function () {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function () {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function () {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  },\n};\n\nvar ChannelNoise = function (papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function () {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function () {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function (address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n};\n\nvar ChannelSquare = function (papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function () {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function () {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function () {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function (address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n};\n\nvar ChannelTriangle = function (papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function () {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function () {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function () {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function () {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function (address) {\n    return 0;\n  },\n\n  writeReg: function (address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function (nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function () {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function (value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function () {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  },\n};\n\nmodule.exports = PAPU;\n","var Tile = require(\"./tile\");\nvar utils = require(\"./utils\");\n\nvar PPU = function (nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function () {\n    var i;\n\n    // Memory\n    this.vramMem = new Array(0x8000);\n    this.spriteMem = new Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Array(256 * 240);\n    this.bgbuffer = new Array(256 * 240);\n    this.pixrendered = new Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Array(16);\n    this.imgPalette = new Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function (mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function (fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function () {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function () {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function () {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function () {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function (value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function (value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function (flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function () {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function (address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function () {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function (value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function (value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function (address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function () {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function (value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function (value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function () {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function () {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function () {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function () {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function (count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function (address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function (address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function () {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function (startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function (bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function (startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function (scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function (address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function () {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function (address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function (index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function (index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function (address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function () {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function (x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\",\n  ],\n\n  toJSON: function () {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function (state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  },\n};\n\nvar NameTable = function (width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Array(width * height);\n  this.attrib = new Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function (x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function (x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function (index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[attindex] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function () {\n    return {\n      tile: this.tile,\n      attrib: this.attrib,\n    };\n  },\n\n  fromJSON: function (s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  },\n};\n\nvar PaletteTable = function () {\n  this.curTable = new Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function () {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function () {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function () {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function () {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function (emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function (yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function (rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function (rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function (rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function (r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function () {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n};\n\nmodule.exports = PPU;\n","var Mappers = require(\"./mappers\");\nvar Tile = require(\"./tile\");\n\nvar ROM = function (nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function (data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function () {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function () {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function () {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function () {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  },\n};\n\nmodule.exports = ROM;\n","var Tile = function () {\n  // Tile data:\n  this.pix = new Array(64);\n\n  this.fbIndex = null;\n  this.tIndex = null;\n  this.x = null;\n  this.y = null;\n  this.w = null;\n  this.h = null;\n  this.incX = null;\n  this.incY = null;\n  this.palIndex = null;\n  this.tpri = null;\n  this.c = null;\n  this.initialized = false;\n  this.opaque = new Array(8);\n};\n\nTile.prototype = {\n  setBuffer: function (scanline) {\n    for (this.y = 0; this.y < 8; this.y++) {\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\n    }\n  },\n\n  setScanline: function (sline, b1, b2) {\n    this.initialized = true;\n    this.tIndex = sline << 3;\n    for (this.x = 0; this.x < 8; this.x++) {\n      this.pix[this.tIndex + this.x] =\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\n      if (this.pix[this.tIndex + this.x] === 0) {\n        this.opaque[sline] = false;\n      }\n    }\n  },\n\n  render: function (\n    buffer,\n    srcx1,\n    srcy1,\n    srcx2,\n    srcy2,\n    dx,\n    dy,\n    palAdd,\n    palette,\n    flipHorizontal,\n    flipVertical,\n    pri,\n    priTable\n  ) {\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\n      return;\n    }\n\n    this.w = srcx2 - srcx1;\n    this.h = srcy2 - srcy1;\n\n    if (dx < 0) {\n      srcx1 -= dx;\n    }\n    if (dx + srcx2 >= 256) {\n      srcx2 = 256 - dx;\n    }\n\n    if (dy < 0) {\n      srcy1 -= dy;\n    }\n    if (dy + srcy2 >= 240) {\n      srcy2 = 240 - dy;\n    }\n\n    if (!flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 0;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              //console.log(\"Rendering upright tile to buffer\");\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    } else if (flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 7;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex += 16;\n      }\n    } else if (flipVertical && !flipHorizontal) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 56;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex -= 16;\n      }\n    } else {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 63;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    }\n  },\n\n  isTransparent: function (x, y) {\n    return this.pix[(y << 3) + x] === 0;\n  },\n\n  toJSON: function () {\n    return {\n      opaque: this.opaque,\n      pix: this.pix,\n    };\n  },\n\n  fromJSON: function (s) {\n    this.opaque = s.opaque;\n    this.pix = s.pix;\n  },\n};\n\nmodule.exports = Tile;\n","module.exports = {\n  copyArrayElements: function (src, srcPos, dest, destPos, length) {\n    for (var i = 0; i < length; ++i) {\n      dest[destPos + i] = src[srcPos + i];\n    }\n  },\n\n  copyArray: function (src) {\n    return src.slice(0);\n  },\n\n  fromJSON: function (obj, state) {\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      obj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\n    }\n  },\n\n  toJSON: function (obj) {\n    var state = {};\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      state[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\n    }\n    return state;\n  },\n};\n","import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-69c15c27\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", { style: {\"font-size\":\"36px\"} }, \"Nes\", -1))\nconst _hoisted_2 = { class: \"nes\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_nes_g = _resolveComponent(\"nes-g\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createVNode(_component_nes_g, { romData: _ctx.romData }, null, 8, [\"romData\"])\n    ])\n  ], 64))\n}","<template>\n  <canvas id=\"nes-canvas\" width=\"600\" height=\"400\" style=\"width: 100%\"></canvas>\n</template>\n\n<script>\nimport { defineComponent } from \"vue\";\nimport { nes_load_url, nes_load_data } from \"./Nes\";\nexport default defineComponent({\n  name: \"NesG\",\n  props: {\n    romPath: String,\n    romData: String,\n  },\n  data() {\n    return {};\n  },\n  mounted() {\n    this.LoadRom();\n  },\n  methods: {\n    LoadRom() {\n      if (this.romPath && this.romPath != \"\")\n        nes_load_url(\"nes-canvas\", this.romPath);\n      else if (this.romData && this.romData != \"\")\n        nes_load_data(\"nes-canvas\", this.romData);\n    },\n  },\n});\n</script>\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst jsnes = require(\"jsnes\");\n\nconst SCREEN_WIDTH = 256;\nconst SCREEN_HEIGHT = 240;\nconst FRAMEBUFFER_SIZE = SCREEN_WIDTH * SCREEN_HEIGHT;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet canvas_ctx: any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet image: any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet framebuffer_u8: any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet framebuffer_u32: any;\n\nconst AUDIO_BUFFERING = 512;\nconst SAMPLE_COUNT = 4 * 1024;\nconst SAMPLE_MASK = SAMPLE_COUNT - 1;\nconst audio_samples_L = new Float32Array(SAMPLE_COUNT);\nconst audio_samples_R = new Float32Array(SAMPLE_COUNT);\nlet audio_write_cursor = 0,\n  audio_read_cursor = 0;\n\nconst nes = new jsnes.NES({\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onFrame: (framebuffer_24: any) => {\n    for (let i = 0; i < FRAMEBUFFER_SIZE; i++)\n      framebuffer_u32[i] = 0xff000000 | framebuffer_24[i];\n  },\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onAudioSample: function (l: any, r: any) {\n    audio_samples_L[audio_write_cursor] = l;\n    audio_samples_R[audio_write_cursor] = r;\n    audio_write_cursor = (audio_write_cursor + 1) & SAMPLE_MASK;\n  },\n});\n\nconst onAnimationFrame = () => {\n  window.requestAnimationFrame(onAnimationFrame);\n\n  image.data.set(framebuffer_u8);\n  canvas_ctx.putImageData(image, 0, 0);\n};\n\nconst audio_remain = () => {\n  return (audio_write_cursor - audio_read_cursor) & SAMPLE_MASK;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst audio_callback = (event: any) => {\n  const dst = event.outputBuffer;\n  const len = dst.length;\n\n  // Attempt to avoid buffer underruns.\n  if (audio_remain() < AUDIO_BUFFERING) nes.frame();\n\n  const dst_l = dst.getChannelData(0);\n  const dst_r = dst.getChannelData(1);\n  for (let i = 0; i < len; i++) {\n    const src_idx = (audio_read_cursor + i) & SAMPLE_MASK;\n    dst_l[i] = audio_samples_L[src_idx];\n    dst_r[i] = audio_samples_R[src_idx];\n  }\n\n  audio_read_cursor = (audio_read_cursor + len) & SAMPLE_MASK;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst keyboard = (callback: any, event: any) => {\n  const player = 1;\n  switch (event.keyCode) {\n    case 38: // UP\n      callback(player, jsnes.Controller.BUTTON_UP);\n      break;\n    case 40: // Down\n      callback(player, jsnes.Controller.BUTTON_DOWN);\n      break;\n    case 37: // Left\n      callback(player, jsnes.Controller.BUTTON_LEFT);\n      break;\n    case 39: // Right\n      callback(player, jsnes.Controller.BUTTON_RIGHT);\n      break;\n    case 65: // 'a' - qwerty, dvorak\n    case 81: // 'q' - azerty\n      callback(player, jsnes.Controller.BUTTON_A);\n      break;\n    case 83: // 's' - qwerty, azerty\n    case 79: // 'o' - dvorak\n      callback(player, jsnes.Controller.BUTTON_B);\n      break;\n    case 9: // Tab\n      callback(player, jsnes.Controller.BUTTON_SELECT);\n      break;\n    case 13: // Return\n      callback(player, jsnes.Controller.BUTTON_START);\n      break;\n    default:\n      break;\n  }\n};\n\nconst nes_init = (canvas_id: string) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const canvas: any = document.getElementById(canvas_id);\n  canvas_ctx = canvas.getContext(\"2d\");\n  image = canvas_ctx.getImageData(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n  canvas_ctx.fillStyle = \"black\";\n  canvas_ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n  // Allocate framebuffer array.\n  const buffer = new ArrayBuffer(image.data.length);\n  framebuffer_u8 = new Uint8ClampedArray(buffer);\n  framebuffer_u32 = new Uint32Array(buffer);\n\n  // Setup audio.\n  const audio_ctx = new window.AudioContext();\n  const script_processor = audio_ctx.createScriptProcessor(\n    AUDIO_BUFFERING,\n    0,\n    2\n  );\n  script_processor.onaudioprocess = audio_callback;\n  script_processor.connect(audio_ctx.destination);\n};\n\nconst nes_boot = (rom_data: string) => {\n  nes.loadROM(rom_data);\n  window.requestAnimationFrame(onAnimationFrame);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const nes_load_data = (canvas_id: string, rom_data: string) => {\n  nes_init(canvas_id);\n  nes_boot(rom_data);\n};\n\nexport const nes_load_url = (canvas_id: string, path: string) => {\n  nes_init(canvas_id);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const req: any = new XMLHttpRequest();\n  req.open(\"GET\", path);\n  req.overrideMimeType(\"text/plain; charset=x-user-defined\");\n  req.onerror = () => console.log(`Error loading ${path}: ${req.statusText}`);\n\n  req.onload = function () {\n    if (this.status === 200) {\n      nes_boot(this.responseText);\n    } else if (this.status === 0) {\n      // Aborted, so ignore error\n    } else {\n      req.onerror();\n    }\n  };\n\n  req.send();\n};\n\ndocument.addEventListener(\"keydown\", (event) => {\n  keyboard(nes.buttonDown, event);\n});\ndocument.addEventListener(\"keyup\", (event) => {\n  keyboard(nes.buttonUp, event);\n});\n","import { render } from \"./NesG.vue?vue&type=template&id=eb7ead44\"\nimport script from \"./NesG.vue?vue&type=script&lang=js\"\nexport * from \"./NesG.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/github/workspace/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport NesG from \"@/components/Nes/NesG.vue\";\n\nexport default defineComponent({\n  name: \"NesGamer\",\n  data() {\n    return {\n      romPath: \"\",\n      romData: \"\",\n    };\n  },\n  components: {\n    NesG,\n  },\n  mounted() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    // const fs = require(\"fs\");\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    // const path = require(\"path\");\n    // let filePath = path.resolve(\"/src/assets/nes/demo.nes\");\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    // fs.readFile(filePath, (err: any, buffer: any) => {\n    //   if (!err) {\n    //     this.romData = buffer;\n    //   }\n    // });\n  },\n  methods: {},\n});\n","import { render } from \"./NesGame.vue?vue&type=template&id=69c15c27&scoped=true&ts=true\"\nimport script from \"./NesGame.vue?vue&type=script&lang=ts\"\nexport * from \"./NesGame.vue?vue&type=script&lang=ts\"\n\nimport \"./NesGame.vue?vue&type=style&index=0&id=69c15c27&scoped=true&lang=css\"\n\nimport exportComponent from \"/github/workspace/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-69c15c27\"]])\n\nexport default __exports__"],"names":["module","exports","ArrayBuffer","DataView","NAME","Constructor","Prototype","NATIVE_ARRAY_BUFFER","DESCRIPTORS","global","isCallable","isObject","hasOwn","classof","tryToString","createNonEnumerableProperty","redefine","defineProperty","isPrototypeOf","getPrototypeOf","setPrototypeOf","wellKnownSymbol","uid","Int8Array","Int8ArrayPrototype","prototype","Uint8ClampedArray","Uint8ClampedArrayPrototype","TypedArray","TypedArrayPrototype","ObjectPrototype","Object","TypeError","TO_STRING_TAG","TYPED_ARRAY_TAG","TYPED_ARRAY_CONSTRUCTOR","NATIVE_ARRAY_BUFFER_VIEWS","opera","TYPED_ARRAY_TAG_REQUIRED","TypedArrayConstructorsList","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigIntArrayConstructorsList","BigInt64Array","BigUint64Array","isTypedArray","it","klass","Function","get","this","undefined","aTypedArray","aTypedArrayConstructor","C","exportTypedArrayMethod","KEY","property","forced","options","ARRAY","TypedArrayConstructor","error","error2","exportTypedArrayStaticMethod","isView","fails","F","constructor","toObject","sharedKey","CORRECT_PROTOTYPE_GETTER","IE_PROTO","O","object","toPositiveInteger","RangeError","BYTES","offset","toIntegerOrInfinity","result","call","ArrayBufferViewCore","lengthOfArrayLike","toOffset","toIndexedObject","$set","set","WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS","array","length","TO_OBJECT_BUG","arrayLike","arguments","src","len","index","Controller","state","Array","i","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","buttonDown","key","buttonUp","utils","require","CPU","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","cyclesToHalt","crash","irqRequested","irqType","reset","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","p","j","k","setStatus","OpData","emulate","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","mmap","load","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","stop","crashMessage","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","cycles","status","getStatus","st","JSON_PROPERTIES","toJSON","fromJSON","s","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","INS_ALR","INS_ANC","INS_ARR","INS_AXS","INS_LAX","INS_SAX","INS_DCP","INS_ISC","INS_RLA","INS_RRA","INS_SLO","INS_SRE","INS_SKB","INS_IGN","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","NES","Mappers","joy1StrobeState","joy2StrobeState","joypadLastWrite","zapperFired","zapperX","zapperY","address","cpu","opts","onBatteryRamWrite","regWrite","writelow","regLoad","ppu","readStatusRegister","sramLoad","vramLoad","papu","readReg","joy1Read","w","isPixelWhite","joy2Read","updateControlReg1","updateControlReg2","writeSRAMAddress","sramWrite","scrollWrite","writeVRAMAddress","vramWrite","sramDMA","writeReg","ret","controllers","loadROM","rom","valid","romCount","Error","loadPRGROM","loadCHRROM","loadBatteryRam","loadRomBank","vromCount","loadVromBank","batteryRam","ram","copyArrayElements","bank","triggerRendering","vrom","vramMem","vromTile","ptTile","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","Math","floor","bankoffset","baseIndex","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","clockIrqCounter","latchAccess","apply","regBuffer","regBufferCounter","mirroring","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","getRegNumber","setReg","reg","tmp","setMirroring","SINGLESCREEN_MIRRORING","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","pageNumber","irqCounter","irqLatchValue","irqEnable","prgAddressChanged","executeCommand","cmd","arg","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","SINGLESCREEN_MIRRORING2","prgbank1","prgbank2","PPU","PAPU","ROM","onFrame","onAudioSample","onStatusUpdate","preferredFrameRate","emulateSound","sampleRate","frameTime","ui","writeFrame","updateStatus","frame","bind","zapperMove","zapperFireDown","zapperFireUp","fpsFrameCount","romData","lastFpsTime","startFrame","FRAMELOOP","clockFrameCounter","curX","spr0HitX","f_spVisibility","scanline","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","requestEndFrame","nmiCounter","startVBlank","endScanline","controller","button","x","y","getFPS","now","Date","fps","reloadROM","data","createMapper","getMirroringType","setFramerate","rate","setSampleRate","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","updateChannelEnable","resetCounter","getLengthStatus","getIrqStatus","irqGenerated","frameCounterTick","setEnabled","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","accSample","sample","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","sampleValueL","sampleValueR","smpDiffL","smpDiffR","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","ival","max_sqr","max_tnd","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","endOfSample","nextSample","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","Tile","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","nmiOk","dummyCycleToggle","validTileData","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","buffer","bgbuffer","pixrendered","scantile","lastRenderedScanline","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","hitSpr0","sprPalette","imgPalette","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSize","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_VBLANK","NameTable","PaletteTable","loadNTSCPalette","defineMirrorRegion","fromStart","toStart","renderFramePartially","endFrame","renderBgScanline","checkSprite0","regsToAddress","cntsToAddress","bgColor","setEmphasis","updatePalettes","flag","n","spriteRamWriteUpdate","mirroredLoad","cntsFromAddress","regsFromAddress","mirroredWrite","writeMem","baseAddress","b1","b2","incTileCounter","count","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","t","tpix","att","col","tscanoffset","targetBuffer","tile","pix","getTileIndex","getAttrib","sx","opaque","startscan","scancount","bgPri","srcy1","srcy2","render","top","toffset","bufferIndex","tIndexAdd","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","leftOver","setScanline","writeAttrib","tIndex","doNMI","width","height","name","tx","attindex","basex","basey","sqy","sqx","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","mapperName","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","trainer","fourScreen","mapperType","v","indexOf","charCodeAt","foundError","getMapperName","mapperSupported","fbIndex","h","incX","incY","palIndex","tpri","c","initialized","setBuffer","sline","srcx1","srcx2","dx","dy","palAdd","palette","flipHorizontal","flipVertical","pri","priTable","isTransparent","srcPos","dest","destPos","copyArray","slice","obj","_hoisted_1","_pushScopeId","_popScopeId","_withScopeId","_createElementVNode","style","_hoisted_2","class","_createElementBlock","jsnes","canvas_ctx","image","framebuffer_u8","framebuffer_u32","SAMPLE_COUNT","SAMPLE_MASK","audio_samples_L","audio_samples_R","audio_write_cursor","audio_read_cursor","framebuffer_24","SCREEN_WIDTH","l","onAnimationFrame","window","requestAnimationFrame","putImageData","audio_callback","event","dst","outputBuffer","dst_l","getChannelData","dst_r","src_idx","keyboard","callback","keyCode","nes_init","canvas_id","canvas","document","getElementById","getContext","getImageData","fillStyle","fillRect","audio_ctx","AudioContext","script_processor","createScriptProcessor","onaudioprocess","connect","destination","nes_boot","rom_data","nes_load_url","path","req","XMLHttpRequest","open","overrideMimeType","onerror","onload","responseText","send","addEventListener","defineComponent","props","romPath","String","mounted","LoadRom","methods","components","NesG","_ctx","_cache","$props","$setup","$data","$options","_component_nes_g","_resolveComponent","_openBlock","_Fragment","_createVNode"],"sourceRoot":""}